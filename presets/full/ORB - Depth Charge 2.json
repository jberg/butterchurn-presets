{"version":2,"baseVals":{"rating":4,"decay":0.9,"echo_zoom":1.006596,"echo_alpha":0.5,"echo_orient":1,"wave_mode":1,"wrap":0,"brighten":1,"wave_a":0.001,"zoom":0.96,"rot":-6.279995,"warp":0.000521,"wave_r":0,"wave_g":0,"wave_b":0,"ob_r":1,"ob_g":1,"ob_b":1,"mv_x":64,"mv_y":48,"mv_l":4.95,"mv_r":0,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"textured":1,"rad":2.667177,"tex_zoom":0.451117,"g":1,"a":0.15,"g2":0,"a2":0.05},"init_eqs_str":"a.q1=0;","frame_eqs_str":"a.r=.1+.5*Math.sin(a.q1);a.g=.1+.5*Math.sin(.9878*a.q1);a.b=.1+.5*Math.sin(.897*a.q1);","init_eqs_eel":"","frame_eqs_eel":"r = 0.1 + 0.5*sin(q1);\ng = 0.1 + 0.5*sin(q1*0.9878);\nb = 0.1 + 0.5*sin(q1*0.897);"},{"baseVals":{"sides":100,"textured":1,"rad":2.380961,"tex_zoom":0.424973,"r":0,"b":1,"a":0.4,"g2":0,"a2":0.9,"border_a":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"r = 0.1 + 0.5*sin(q1);\ng = 0.1 + 0.5*sin(q1*0.9878);\nb = 0.1 + 0.5*sin(q1*0.897);","init_eqs_eel":"","frame_eqs_eel":"r = 0.1 + 0.5*sin(q1);\ng = 0.1 + 0.5*sin(q1*0.9878);\nb = 0.1 + 0.5*sin(q1*0.897);"},{"baseVals":{"sides":100,"x":1,"rad":0.102009,"enabled":0},"init_eqs_str":"","frame_eqs_str":"x = 0.5 + 0.02*sin(time);\ny = 0.5 + 0.02*cos(time);\n\nr = 0.1 + 0.5*sin(q1*0.01);\ng = 0.1 + 0.5*sin(q1*0.09878);\nb = 0.1 + 0.5*sin(q1*0.0897);\n\nr2 = 0.1 + 0.5*sin(q1*0.035);\ng2 = 0.1 + 0.5*sin(q1*0.09878);\nb2 = 0.1 + 0.5*sin(q1*0.0897);","init_eqs_eel":"","frame_eqs_eel":"x = 0.5 + 0.02*sin(time);\ny = 0.5 + 0.02*cos(time);\n\nr = 0.1 + 0.5*sin(q1*0.01);\ng = 0.1 + 0.5*sin(q1*0.09878);\nb = 0.1 + 0.5*sin(q1*0.0897);\n\nr2 = 0.1 + 0.5*sin(q1*0.035);\ng2 = 0.1 + 0.5*sin(q1*0.09878);\nb2 = 0.1 + 0.5*sin(q1*0.0897);"},{"baseVals":{"enabled":1,"sides":100,"g":1,"b":1,"r2":1,"g2":0,"b2":1,"a2":1},"init_eqs_str":"a.q1=0;","frame_eqs_str":"a.x=.5+.02*Math.sin(.5*a.time+1.68);a.y=.5+.02*Math.cos(.5*a.time+1.68);a.r=.1+.5*Math.sin(.0144*a.q1);a.g=.1+.5*Math.sin(.05878*a.q1);a.b=.1+.5*Math.sin(.0797*a.q1);a.r2=.1+.5*Math.sin(.065*a.q1);a.g2=.1+.5*Math.sin(.07878*a.q1);a.b2=.1+.5*Math.sin(.0897*a.q1);","init_eqs_eel":"","frame_eqs_eel":"x = 0.5 + 0.02*sin(time*0.5 + 1.68);\ny = 0.5 + 0.02*cos(time*0.5 + 1.68);\n\n\nr = 0.1 + 0.5*sin(q1*0.0144);\ng = 0.1 + 0.5*sin(q1*0.05878);\nb = 0.1 + 0.5*sin(q1*0.0797);\n\nr2 = 0.1 + 0.5*sin(q1*0.065);\ng2 = 0.1 + 0.5*sin(q1*0.07878);\nb2 = 0.1 + 0.5*sin(q1*0.0897);"}],"waves":[{"baseVals":{"enabled":1,"spectrum":1,"thick":1,"additive":1,"a":0.1},"init_eqs_str":"a.xx=0;a.s=0;a.xs=0;a.ss=0;a.zn=0;a.q1=0;a.xd=0;a.zd=0;a.v=0;a.yx=0;a.angle2=0;a.zs=0;a.angle=0;a.ys=0;a.xn=0;a.yd=0;a.angle3=0;a.yn=0;a.u=0;a.zx=0;","frame_eqs_str":"","point_eqs_str":"a.u=3.14159*Math.abs(Math.cos(.1*a.q1));a.v=6.28318*Math.abs(Math.cos(.015*a.q1));a.s=314*a.sample;a.ss=6280*a.sample;a.xs=.3*Math.sin(a.s)*Math.cos(a.ss);a.ys=.3*Math.sin(a.s)*Math.sin(a.ss);a.zs=.3*Math.cos(a.s);a.angle=6.28*Math.sin(.027*a.q1);a.yx=a.ys*Math.cos(a.angle)-a.zs*Math.sin(a.angle);a.zx=a.ys*Math.sin(a.angle)+a.zs*Math.cos(a.angle);a.xx=a.xs;a.angle2=6.28*Math.sin(.03*a.q1);a.xd=a.xx*Math.cos(a.angle2)-a.zx*Math.sin(a.angle2);a.zd=a.xx*Math.sin(a.angle2)+a.zx*\nMath.cos(a.angle2);a.yd=a.yx;a.angle3=6.28*Math.sin(.028*a.q1);a.xn=a.xd*Math.cos(a.angle3)-a.yd*Math.sin(a.angle3);a.yn=a.xd*Math.sin(a.angle3)+a.yd*Math.cos(a.angle3);a.zd+=2;a.x=a.xn*a.zd*.3+.5;a.y=a.yn*a.zd*.36+.5;a.r=.5+.5*Math.sin(.2*a.q1+a.x+a.x)+a.xn;a.g=.5+.5*Math.sin(.5*a.q1+a.x+a.y)+a.yn;a.b=.5+.5*Math.sin(.36*a.q1+a.y+a.y)+a.zn;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"u = abs(cos(q1*0.1))*3.14159;\nv = abs(cos(q1*0.015))*3.14159*2;\ns = sample*3.14*100;\nss = sample*6.28*1000;\n\n//draw\nxs = 0.3*sin(s)*cos(ss);\nys = 0.3*sin(s)*sin(ss);\nzs = 0.3*cos(s);\n\n\n//rotate x axis\nangle = sin(q1*0.027)*6.28;\nyx = ys*cos(angle) - zs*sin(angle);\nzx = ys*sin(angle) + zs*cos(angle);\nxx = xs;\n\n//rotate y axis\nangle2 = sin(q1*0.03)*6.28;\nxd = xx*cos(angle2) - zx*sin(angle2);\nzd = xx*sin(angle2) + zx*cos(angle2);\nyd = yx;\n\n//rotaye z axis\nangle3 = sin(q1*0.028)*6.28;\nxn = xd*cos(angle3) - yd*sin(angle3);\nyn = xd*sin(angle3) + yd*cos(angle3);\n\nzd = zd + 2;\n\nx = xn*zd*0.3 + 0.5;\ny = yn*zd*0.3*1.2 + 0.5;\n\n\nr = 0.5 + 0.5*sin(q1*0.2 + x + x) + xn;\ng = 0.5 + 0.5*sin(q1*0.5 + x + y) + yn;\nb = 0.5 + 0.5*sin(q1*0.36 + y + y) + zn;"},{"baseVals":{"enabled":1,"spectrum":1,"usedots":1,"thick":1,"additive":1},"init_eqs_str":"a.xx=0;a.s=0;a.xs=0;a.xdriftinc=0;a.yval=0;a.ss=0;a.q1=0;a.xd=0;a.zd=0;a.alphax=0;a.yx=0;a.angle2=0;a.zs=0;a.angle=0;a.ys=0;a.xn=0;a.burstspeed=0;a.yd=0;a.burst=0;a.angle3=0;a.state=0;a.yn=0;a.ymax=0;a.q3=0;a.xdrift=0;a.zx=0;a.flag=0;","frame_eqs_str":"","point_eqs_str":"a.flag=above(a.q3,2);a.state+=a.flag*equal(a.state,0);a.yval=.00001<Math.abs(equal(a.state,0))?0:a.yval;a.yval+=.00004*equal(a.state,1);a.ymax=.00001<Math.abs(equal(a.state,0))?.004*Math.floor(rand(100)):a.ymax;a.state=.00001<Math.abs(above(a.yval,.5+a.ymax))?2:a.state;a.yval=.00001<Math.abs(equal(a.state,0))?0:a.yval;a.burst=.00001<Math.abs(equal(a.state,0))?.001:a.burst;a.alphax=.00001<Math.abs(equal(a.state,0))?1:a.alphax;a.xdriftinc=.00001<Math.abs(equal(a.state,0))?0:a.xdriftinc;\na.burstspeed=.00001<Math.abs(equal(a.state,0))?Math.floor(rand(10)):a.burstspeed;a.xdrift=.00001<Math.abs(equal(a.state,0))?Math.floor(rand(20)):a.xdrift;a.xdriftinc=a.xdriftinc+equal(a.xdrift,0)*equal(a.state,1)*.00002+equal(a.xdrift,1)*equal(a.state,1)*.000018+equal(a.xdrift,2)*equal(a.state,1)*.000016+equal(a.xdrift,3)*equal(a.state,1)*.000014+equal(a.xdrift,4)*equal(a.state,1)*.000012+equal(a.xdrift,5)*equal(a.state,1)*.00001+equal(a.xdrift,6)*equal(a.state,1)*.000008+equal(a.xdrift,7)*equal(a.state,\n1)*.000006+equal(a.xdrift,8)*equal(a.state,1)*.000004+equal(a.xdrift,9)*equal(a.state,1)*.000002+equal(a.xdrift,11)*equal(a.state,1)*-.000002+equal(a.xdrift,12)*equal(a.state,1)*-.000004+equal(a.xdrift,13)*equal(a.state,1)*-.000006+equal(a.xdrift,14)*equal(a.state,1)*-.000008+equal(a.xdrift,15)*equal(a.state,1)*-.00001+equal(a.xdrift,16)*equal(a.state,1)*-.000012+equal(a.xdrift,17)*equal(a.state,1)*-.000014+equal(a.xdrift,18)*equal(a.state,1)*-.000016+equal(a.xdrift,19)*equal(a.state,1)*-.000018;\na.burst=a.burst+equal(a.burstspeed,0)*equal(a.state,2)*.000024+equal(a.burstspeed,1)*equal(a.state,2)*.000022+equal(a.burstspeed,2)*equal(a.state,2)*.00002+equal(a.burstspeed,3)*equal(a.state,2)*.000018+equal(a.burstspeed,4)*equal(a.state,2)*.000016+equal(a.burstspeed,5)*equal(a.state,2)*.000014+equal(a.burstspeed,6)*equal(a.state,2)*.000012+equal(a.burstspeed,7)*equal(a.state,2)*.00001+equal(a.burstspeed,8)*equal(a.state,2)*.000008+equal(a.burstspeed,9)*equal(a.state,2)*.000008;a.alphax-=.00004*\nequal(a.state,2);a.state=.00001<Math.abs(below(a.alphax,0))?0:a.state;a.s=314*a.sample;a.ss=6280*a.sample;a.xs=(a.burst+.0001*Math.cos(a.s))*Math.cos(a.ss);a.ys=(a.burst+.0001*Math.cos(a.s))*Math.sin(a.ss);a.zs=.1*a.burst*Math.sin(a.s);a.angle=6.28*Math.sin(.035*-a.q1);a.yx=a.ys*Math.cos(a.angle)-a.zs*Math.sin(a.angle);a.zx=a.ys*Math.sin(a.angle)+a.zs*Math.cos(a.angle);a.xx=a.xs;a.angle2=6.28*Math.sin(.03*a.q1);a.xd=a.xx*Math.cos(a.angle2)-a.zx*Math.sin(a.angle2);a.zd=a.xx*Math.sin(a.angle2)+a.zx*\nMath.cos(a.angle2);a.yd=a.yx;a.angle3=6.28*Math.sin(.032*-a.q1);a.xn=a.xd*Math.cos(a.angle3)-a.yd*Math.sin(a.angle3);a.yn=a.xd*Math.sin(a.angle3)+a.yd*Math.cos(a.angle3);a.zd+=2;a.x=a.xn*a.zd*.3+.5;a.y=a.yn*a.zd*.36;a.x+=a.xdriftinc;a.y=a.y+Math.sin(1.5*a.yval)-.18;a.r=.5+.5*Math.sin(1.7*a.q1+a.x+a.x);a.g=.5+.5*Math.sin(1.5*a.q1+a.x+a.y);a.b=.5+.5*Math.sin(1.16*a.q1+a.y+a.y);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"//apply zoom burst on beat\nflag = above(q3,2);\n//state zero is ready state\nstate = state + flag*equal(state,0);\n\n//upwards flight\nyval = if(equal(state,0),0, yval);\nyval = yval + 0.00004*equal(state,1);\nymax = if(equal(state,0),int(rand(100))*0.004,ymax);\n\n//hit apogee\nstate = if(above(yval,0.5+ymax),2,state);\n\n//reset variable\nyval = if(equal(state,0),0, yval);\nburst = if(equal(state,0),0.001,burst);\nalphax = if(equal(state,0),1,alphax);\nxdriftinc = if(equal(state,0),0,xdriftinc);\n\nburstspeed = if(equal(state,0),int(rand(10)),burstspeed);\nxdrift = if(equal(state,0),int(rand(20)),xdrift);\n//to get the numbers small enough have to use constants\nxdriftinc = xdriftinc\n+ equal(xdrift,0)*equal(state,1)*0.00002\n+ equal(xdrift,1)*equal(state,1)*0.000018\n+ equal(xdrift,2)*equal(state,1)*0.000016\n+ equal(xdrift,3)*equal(state,1)*0.000014\n+ equal(xdrift,4)*equal(state,1)*0.000012\n+ equal(xdrift,5)*equal(state,1)*0.00001\n+ equal(xdrift,6)*equal(state,1)*0.000008\n+ equal(xdrift,7)*equal(state,1)*0.000006\n+ equal(xdrift,8)*equal(state,1)*0.000004\n+ equal(xdrift,9)*equal(state,1)*0.000002\n+ equal(xdrift,11)*equal(state,1)*-0.000002\n+ equal(xdrift,12)*equal(state,1)*-0.000004\n+ equal(xdrift,13)*equal(state,1)*-0.000006\n+ equal(xdrift,14)*equal(state,1)*-0.000008\n+ equal(xdrift,15)*equal(state,1)*-0.00001\n+ equal(xdrift,16)*equal(state,1)*-0.000012\n+ equal(xdrift,17)*equal(state,1)*-0.000014\n+ equal(xdrift,18)*equal(state,1)*-0.000016\n+ equal(xdrift,19)*equal(state,1)*-0.000018;\n\nburst = burst\n+ equal(burstspeed,0)*equal(state,2)*0.000024\n+ equal(burstspeed,1)*equal(state,2)*0.000022\n+ equal(burstspeed,2)*equal(state,2)*0.00002\n+ equal(burstspeed,3)*equal(state,2)*0.000018\n+ equal(burstspeed,4)*equal(state,2)*0.000016\n+ equal(burstspeed,5)*equal(state,2)*0.000014\n+ equal(burstspeed,6)*equal(state,2)*0.000012\n+ equal(burstspeed,7)*equal(state,2)*0.00001\n+ equal(burstspeed,8)*equal(state,2)*0.000008\n+ equal(burstspeed,9)*equal(state,2)*0.000008;\n\nalphax = alphax - 0.00004*equal(state,2);\nstate = if(below(alphax,0),0,state);\n\n\ns = sample*3.14*100;\nss = sample*6.28*1000;\n\n//draw torus\nxs = (burst + 0.0001*cos(s))*cos(ss);\nys = (burst + 0.0001*cos(s))*sin(ss);\nzs = 0.1*burst*sin(s);\n\n\n//rotate x axis\nangle = sin(-q1*0.035)*6.28;\nyx = ys*cos(angle) - zs*sin(angle);\nzx = ys*sin(angle) + zs*cos(angle);\nxx = xs;\n\n//rotate y axis\nangle2 = sin(q1*0.03)*6.28;\nxd = xx*cos(angle2) - zx*sin(angle2);\nzd = xx*sin(angle2) + zx*cos(angle2);\nyd = yx;\n\n//rotaye z axis\nangle3 = sin(-q1*0.032)*6.28;\nxn = xd*cos(angle3) - yd*sin(angle3);\nyn = xd*sin(angle3) + yd*cos(angle3);\n\nzd = zd + 2;\n\nx = xn*zd*0.3 + 0.5;\ny = yn*zd*0.3*1.2;\n\n\nx = x + xdriftinc;\ny = y + sin(yval*1.5) - 0.18;\n\n\nr = 0.5 + 0.5*sin(q1*1.7 + x + x);\ng = 0.5 + 0.5*sin(q1*1.5 + x + y);\nb = 0.5 + 0.5*sin(q1*1.16 + y + y);"},{"baseVals":{"enabled":1,"spectrum":1,"usedots":1,"thick":1,"additive":1},"init_eqs_str":"a.xx=0;a.s=0;a.xs=0;a.xdriftinc=0;a.yval=0;a.ss=0;a.q1=0;a.xd=0;a.zd=0;a.alphax=0;a.yx=0;a.angle2=0;a.zs=0;a.angle=0;a.ys=0;a.xn=0;a.burstspeed=0;a.yd=0;a.burst=0;a.angle3=0;a.state=0;a.yn=0;a.ymax=0;a.q3=0;a.xdrift=0;a.zx=0;a.flag=0;","frame_eqs_str":"","point_eqs_str":"a.flag=above(a.q3,2);a.state+=a.flag*equal(a.state,0);a.yval=.00001<Math.abs(equal(a.state,0))?0:a.yval;a.yval+=.00004*equal(a.state,1);a.ymax=.00001<Math.abs(equal(a.state,0))?.004*Math.floor(rand(100)):a.ymax;a.state=.00001<Math.abs(above(a.yval,.5+a.ymax))?2:a.state;a.yval=.00001<Math.abs(equal(a.state,0))?0:a.yval;a.burst=.00001<Math.abs(equal(a.state,0))?.001:a.burst;a.alphax=.00001<Math.abs(equal(a.state,0))?1:a.alphax;a.xdriftinc=.00001<Math.abs(equal(a.state,0))?0:a.xdriftinc;\na.burstspeed=.00001<Math.abs(equal(a.state,0))?Math.floor(rand(10)):a.burstspeed;a.xdrift=.00001<Math.abs(equal(a.state,0))?Math.floor(rand(20)):a.xdrift;a.xdriftinc=a.xdriftinc+equal(a.xdrift,0)*equal(a.state,1)*.00002+equal(a.xdrift,1)*equal(a.state,1)*.000018+equal(a.xdrift,2)*equal(a.state,1)*.000016+equal(a.xdrift,3)*equal(a.state,1)*.000014+equal(a.xdrift,4)*equal(a.state,1)*.000012+equal(a.xdrift,5)*equal(a.state,1)*.00001+equal(a.xdrift,6)*equal(a.state,1)*.000008+equal(a.xdrift,7)*equal(a.state,\n1)*.000006+equal(a.xdrift,8)*equal(a.state,1)*.000004+equal(a.xdrift,9)*equal(a.state,1)*.000002+equal(a.xdrift,11)*equal(a.state,1)*-.000002+equal(a.xdrift,12)*equal(a.state,1)*-.000004+equal(a.xdrift,13)*equal(a.state,1)*-.000006+equal(a.xdrift,14)*equal(a.state,1)*-.000008+equal(a.xdrift,15)*equal(a.state,1)*-.00001+equal(a.xdrift,16)*equal(a.state,1)*-.000012+equal(a.xdrift,17)*equal(a.state,1)*-.000014+equal(a.xdrift,18)*equal(a.state,1)*-.000016+equal(a.xdrift,19)*equal(a.state,1)*-.000018;\na.burst=a.burst+equal(a.burstspeed,0)*equal(a.state,2)*.000024+equal(a.burstspeed,1)*equal(a.state,2)*.000022+equal(a.burstspeed,2)*equal(a.state,2)*.00002+equal(a.burstspeed,3)*equal(a.state,2)*.000018+equal(a.burstspeed,4)*equal(a.state,2)*.000016+equal(a.burstspeed,5)*equal(a.state,2)*.000014+equal(a.burstspeed,6)*equal(a.state,2)*.000012+equal(a.burstspeed,7)*equal(a.state,2)*.00001+equal(a.burstspeed,8)*equal(a.state,2)*.000008+equal(a.burstspeed,9)*equal(a.state,2)*.000008;a.alphax-=.00004*\nequal(a.state,2);a.state=.00001<Math.abs(below(a.alphax,0))?0:a.state;a.s=314*a.sample;a.ss=6280*a.sample;a.xs=(.8*a.burst+.4*a.burst*Math.cos(a.s))*Math.cos(a.ss);a.ys=(.8*a.burst+.4*a.burst*Math.cos(a.s))*Math.sin(a.ss);a.zs=.4*a.burst*Math.sin(a.s);a.angle=6.28*Math.sin(.015*-a.q1);a.yx=a.ys*Math.cos(a.angle)-a.zs*Math.sin(a.angle);a.zx=a.ys*Math.sin(a.angle)+a.zs*Math.cos(a.angle);a.xx=a.xs;a.angle2=6.28*Math.sin(.01579*a.q1);a.xd=a.xx*Math.cos(a.angle2)-a.zx*Math.sin(a.angle2);a.zd=a.xx*Math.sin(a.angle2)+\na.zx*Math.cos(a.angle2);a.yd=a.yx;a.angle3=6.28*Math.sin(.022*a.q1);a.xn=a.xd*Math.cos(a.angle3)-a.yd*Math.sin(a.angle3);a.yn=a.xd*Math.sin(a.angle3)+a.yd*Math.cos(a.angle3);a.zd+=2;a.x=a.xn*a.zd*.3+.5;a.y=a.yn*a.zd*.36;a.x+=a.xdriftinc;a.y=a.y+Math.sin(1.5*a.yval)-.18;a.r=.5+.5*Math.sin(1.27*a.q1+a.x+a.x);a.g=.5+.5*Math.sin(1.5*a.q1+a.x+a.y);a.b=.5+.5*Math.sin(1.346*a.q1+a.y+a.y);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"//apply zoom burst on beat\nflag = above(q3,2);\n//state zero is ready state\nstate = state + flag*equal(state,0);\n\n//upwards flight\nyval = if(equal(state,0),0, yval);\nyval = yval + 0.00004*equal(state,1);\nymax = if(equal(state,0),int(rand(100))*0.004,ymax);\n\n//hit apogee\nstate = if(above(yval,0.5+ymax),2,state);\n\n//reset variable\nyval = if(equal(state,0),0, yval);\nburst = if(equal(state,0),0.001,burst);\nalphax = if(equal(state,0),1,alphax);\nxdriftinc = if(equal(state,0),0,xdriftinc);\n\nburstspeed = if(equal(state,0),int(rand(10)),burstspeed);\nxdrift = if(equal(state,0),int(rand(20)),xdrift);\n//to get the numbers small enough have to use constants\nxdriftinc = xdriftinc\n+ equal(xdrift,0)*equal(state,1)*0.00002\n+ equal(xdrift,1)*equal(state,1)*0.000018\n+ equal(xdrift,2)*equal(state,1)*0.000016\n+ equal(xdrift,3)*equal(state,1)*0.000014\n+ equal(xdrift,4)*equal(state,1)*0.000012\n+ equal(xdrift,5)*equal(state,1)*0.00001\n+ equal(xdrift,6)*equal(state,1)*0.000008\n+ equal(xdrift,7)*equal(state,1)*0.000006\n+ equal(xdrift,8)*equal(state,1)*0.000004\n+ equal(xdrift,9)*equal(state,1)*0.000002\n+ equal(xdrift,11)*equal(state,1)*-0.000002\n+ equal(xdrift,12)*equal(state,1)*-0.000004\n+ equal(xdrift,13)*equal(state,1)*-0.000006\n+ equal(xdrift,14)*equal(state,1)*-0.000008\n+ equal(xdrift,15)*equal(state,1)*-0.00001\n+ equal(xdrift,16)*equal(state,1)*-0.000012\n+ equal(xdrift,17)*equal(state,1)*-0.000014\n+ equal(xdrift,18)*equal(state,1)*-0.000016\n+ equal(xdrift,19)*equal(state,1)*-0.000018;\n\nburst = burst\n+ equal(burstspeed,0)*equal(state,2)*0.000024\n+ equal(burstspeed,1)*equal(state,2)*0.000022\n+ equal(burstspeed,2)*equal(state,2)*0.00002\n+ equal(burstspeed,3)*equal(state,2)*0.000018\n+ equal(burstspeed,4)*equal(state,2)*0.000016\n+ equal(burstspeed,5)*equal(state,2)*0.000014\n+ equal(burstspeed,6)*equal(state,2)*0.000012\n+ equal(burstspeed,7)*equal(state,2)*0.00001\n+ equal(burstspeed,8)*equal(state,2)*0.000008\n+ equal(burstspeed,9)*equal(state,2)*0.000008;\n\nalphax = alphax - 0.00004*equal(state,2);\nstate = if(below(alphax,0),0,state);\n\n\ns = sample*3.14*100;\nss = sample*6.28*1000;\n\n//draw torus\nxs = (burst*0.8 + 0.4*burst*cos(s))*cos(ss);\nys = (burst*0.8 + 0.4*burst*cos(s))*sin(ss);\nzs = 0.4*burst*sin(s);\n\n\n//rotate x axis\nangle = sin(-q1*0.015)*6.28;\nyx = ys*cos(angle) - zs*sin(angle);\nzx = ys*sin(angle) + zs*cos(angle);\nxx = xs;\n\n//rotate y axis\nangle2 = sin(q1*0.01579)*6.28;\nxd = xx*cos(angle2) - zx*sin(angle2);\nzd = xx*sin(angle2) + zx*cos(angle2);\nyd = yx;\n\n//rotaye z axis\nangle3 = sin(q1*0.022)*6.28;\nxn = xd*cos(angle3) - yd*sin(angle3);\nyn = xd*sin(angle3) + yd*cos(angle3);\n\nzd = zd + 2;\n\nx = xn*zd*0.3 + 0.5;\ny = yn*zd*0.3*1.2;\n\n\nx = x + xdriftinc;\ny = y + sin(yval*1.5) - 0.18;\n\n\nr = 0.5 + 0.5*sin(q1*1.27 + x + x);\ng = 0.5 + 0.5*sin(q1*1.5 + x + y);\nb = 0.5 + 0.5*sin(q1*1.346 + y + y);"},{"baseVals":{"enabled":1,"spectrum":1,"usedots":1,"thick":1,"additive":1},"init_eqs_str":"a.xx=0;a.s=0;a.xs=0;a.xdriftinc=0;a.yval=0;a.ss=0;a.q1=0;a.xd=0;a.zd=0;a.alphax=0;a.yx=0;a.angle2=0;a.zs=0;a.angle=0;a.ys=0;a.xn=0;a.burstspeed=0;a.yd=0;a.burst=0;a.angle3=0;a.state=0;a.yn=0;a.ymax=0;a.q3=0;a.xdrift=0;a.zx=0;a.flag=0;","frame_eqs_str":"","point_eqs_str":"a.flag=above(a.q3,2);a.state+=a.flag*equal(a.state,0);a.yval=.00001<Math.abs(equal(a.state,0))?0:a.yval;a.yval+=.00004*equal(a.state,1);a.ymax=.00001<Math.abs(equal(a.state,0))?.004*Math.floor(rand(100)):a.ymax;a.state=.00001<Math.abs(above(a.yval,.5+a.ymax))?2:a.state;a.yval=.00001<Math.abs(equal(a.state,0))?0:a.yval;a.burst=.00001<Math.abs(equal(a.state,0))?.001:a.burst;a.alphax=.00001<Math.abs(equal(a.state,0))?1:a.alphax;a.xdriftinc=.00001<Math.abs(equal(a.state,0))?0:a.xdriftinc;\na.burstspeed=.00001<Math.abs(equal(a.state,0))?Math.floor(rand(10)):a.burstspeed;a.xdrift=.00001<Math.abs(equal(a.state,0))?Math.floor(rand(20)):a.xdrift;a.xdriftinc=a.xdriftinc+equal(a.xdrift,0)*equal(a.state,1)*.00002+equal(a.xdrift,1)*equal(a.state,1)*.000018+equal(a.xdrift,2)*equal(a.state,1)*.000016+equal(a.xdrift,3)*equal(a.state,1)*.000014+equal(a.xdrift,4)*equal(a.state,1)*.000012+equal(a.xdrift,5)*equal(a.state,1)*.00001+equal(a.xdrift,6)*equal(a.state,1)*.000008+equal(a.xdrift,7)*equal(a.state,\n1)*.000006+equal(a.xdrift,8)*equal(a.state,1)*.000004+equal(a.xdrift,9)*equal(a.state,1)*.000002+equal(a.xdrift,11)*equal(a.state,1)*-.000002+equal(a.xdrift,12)*equal(a.state,1)*-.000004+equal(a.xdrift,13)*equal(a.state,1)*-.000006+equal(a.xdrift,14)*equal(a.state,1)*-.000008+equal(a.xdrift,15)*equal(a.state,1)*-.00001+equal(a.xdrift,16)*equal(a.state,1)*-.000012+equal(a.xdrift,17)*equal(a.state,1)*-.000014+equal(a.xdrift,18)*equal(a.state,1)*-.000016+equal(a.xdrift,19)*equal(a.state,1)*-.000018;\na.burst=a.burst+equal(a.burstspeed,0)*equal(a.state,2)*.000024+equal(a.burstspeed,1)*equal(a.state,2)*.000022+equal(a.burstspeed,2)*equal(a.state,2)*.00002+equal(a.burstspeed,3)*equal(a.state,2)*.000018+equal(a.burstspeed,4)*equal(a.state,2)*.000016+equal(a.burstspeed,5)*equal(a.state,2)*.000014+equal(a.burstspeed,6)*equal(a.state,2)*.000012+equal(a.burstspeed,7)*equal(a.state,2)*.00001+equal(a.burstspeed,8)*equal(a.state,2)*.000008+equal(a.burstspeed,9)*equal(a.state,2)*.000008;a.alphax-=.00004*\nequal(a.state,2);a.state=.00001<Math.abs(below(a.alphax,0))?0:a.state;a.s=314*a.sample;a.ss=6280*a.sample;a.xs=(a.burst+.1*Math.cos(a.s))*Math.cos(a.ss);a.ys=(a.burst+.1*Math.cos(a.s))*Math.sin(a.ss);a.zs=.1*a.burst*Math.sin(a.s);a.angle=6.28*Math.sin(.035*-a.q1);a.yx=a.ys*Math.cos(a.angle)-a.zs*Math.sin(a.angle);a.zx=a.ys*Math.sin(a.angle)+a.zs*Math.cos(a.angle);a.xx=a.xs;a.angle2=6.28*Math.sin(.03*-a.q1);a.xd=a.xx*Math.cos(a.angle2)-a.zx*Math.sin(a.angle2);a.zd=a.xx*Math.sin(a.angle2)+a.zx*Math.cos(a.angle2);\na.yd=a.yx;a.angle3=6.28*Math.sin(.022*-a.q1);a.xn=a.xd*Math.cos(a.angle3)-a.yd*Math.sin(a.angle3);a.yn=a.xd*Math.sin(a.angle3)+a.yd*Math.cos(a.angle3);a.zd+=2;a.x=a.xn*a.zd*.3+.5;a.y=a.yn*a.zd*.36;a.x+=a.xdriftinc;a.y=a.y+Math.sin(1.5*a.yval)-.18;a.r=.5+.5*Math.sin(1.3*a.q1+a.x+a.x);a.g=.5+.5*Math.sin(1.1*a.q1+a.x+a.y);a.b=.5+.5*Math.sin(1.66*a.q1+a.y+a.y);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"//apply zoom burst on beat\nflag = above(q3,2);\n//state zero is ready state\nstate = state + flag*equal(state,0);\n\n//upwards flight\nyval = if(equal(state,0),0, yval);\nyval = yval + 0.00004*equal(state,1);\nymax = if(equal(state,0),int(rand(100))*0.004,ymax);\n\n//hit apogee\nstate = if(above(yval,0.5+ymax),2,state);\n\n//reset variable\nyval = if(equal(state,0),0, yval);\nburst = if(equal(state,0),0.001,burst);\nalphax = if(equal(state,0),1,alphax);\nxdriftinc = if(equal(state,0),0,xdriftinc);\n\nburstspeed = if(equal(state,0),int(rand(10)),burstspeed);\nxdrift = if(equal(state,0),int(rand(20)),xdrift);\n//to get the numbers small enough have to use constants\nxdriftinc = xdriftinc\n+ equal(xdrift,0)*equal(state,1)*0.00002\n+ equal(xdrift,1)*equal(state,1)*0.000018\n+ equal(xdrift,2)*equal(state,1)*0.000016\n+ equal(xdrift,3)*equal(state,1)*0.000014\n+ equal(xdrift,4)*equal(state,1)*0.000012\n+ equal(xdrift,5)*equal(state,1)*0.00001\n+ equal(xdrift,6)*equal(state,1)*0.000008\n+ equal(xdrift,7)*equal(state,1)*0.000006\n+ equal(xdrift,8)*equal(state,1)*0.000004\n+ equal(xdrift,9)*equal(state,1)*0.000002\n+ equal(xdrift,11)*equal(state,1)*-0.000002\n+ equal(xdrift,12)*equal(state,1)*-0.000004\n+ equal(xdrift,13)*equal(state,1)*-0.000006\n+ equal(xdrift,14)*equal(state,1)*-0.000008\n+ equal(xdrift,15)*equal(state,1)*-0.00001\n+ equal(xdrift,16)*equal(state,1)*-0.000012\n+ equal(xdrift,17)*equal(state,1)*-0.000014\n+ equal(xdrift,18)*equal(state,1)*-0.000016\n+ equal(xdrift,19)*equal(state,1)*-0.000018;\n\nburst = burst\n+ equal(burstspeed,0)*equal(state,2)*0.000024\n+ equal(burstspeed,1)*equal(state,2)*0.000022\n+ equal(burstspeed,2)*equal(state,2)*0.00002\n+ equal(burstspeed,3)*equal(state,2)*0.000018\n+ equal(burstspeed,4)*equal(state,2)*0.000016\n+ equal(burstspeed,5)*equal(state,2)*0.000014\n+ equal(burstspeed,6)*equal(state,2)*0.000012\n+ equal(burstspeed,7)*equal(state,2)*0.00001\n+ equal(burstspeed,8)*equal(state,2)*0.000008\n+ equal(burstspeed,9)*equal(state,2)*0.000008;\n\nalphax = alphax - 0.00004*equal(state,2);\nstate = if(below(alphax,0),0,state);\n\n\ns = sample*3.14*100;\nss = sample*6.28*1000;\n\n//draw torus\nxs = (burst + 0.1*cos(s))*cos(ss);\nys = (burst + 0.1*cos(s))*sin(ss);\nzs = 0.1*burst*sin(s);\n\n\n//rotate x axis\nangle = sin(-q1*0.035)*6.28;\nyx = ys*cos(angle) - zs*sin(angle);\nzx = ys*sin(angle) + zs*cos(angle);\nxx = xs;\n\n//rotate y axis\nangle2 = sin(-q1*0.03)*6.28;\nxd = xx*cos(angle2) - zx*sin(angle2);\nzd = xx*sin(angle2) + zx*cos(angle2);\nyd = yx;\n\n//rotaye z axis\nangle3 = sin(-q1*0.022)*6.28;\nxn = xd*cos(angle3) - yd*sin(angle3);\nyn = xd*sin(angle3) + yd*cos(angle3);\n\nzd = zd + 2;\n\nx = xn*zd*0.3 + 0.5;\ny = yn*zd*0.3*1.2;\n\n\nx = x + xdriftinc;\ny = y + sin(yval*1.5) - 0.18;\n\n\nr = 0.5 + 0.5*sin(q1*1.3 + x + x);\ng = 0.5 + 0.5*sin(q1*1.1 + x + y);\nb = 0.5 + 0.5*sin(q1*1.66 + y + y);"}],"init_eqs_str":"a.basstime=0;a.stickybit=0;a.volavg2=0;a.q1=0;a.q9=0;a.sample1=0;a.difftime=0;a.diff=0;a.edge=0;a.volavg=0;a.bit2=0;a.vol=0;a.q2=0;a.q3=0;a.basssum=0;a.sample2=0;a.state=0;","frame_eqs_str":"a.basstime+=.06*a.bass;a.q1=a.basstime;a.q9=.000005*a.basstime;a.basstime=.00001<Math.abs(below(a.basstime,1E3))?1E3:a.basstime;a.vol=pow(a.bass+a.mid+a.treb,2);a.basssum=a.vol;a.stickybit=mod(a.time,2);a.volavg+=a.vol*equal(a.stickybit,1);a.sample1+=equal(a.stickybit,1);a.volavg2+=a.vol*equal(a.stickybit,0);a.sample2+=equal(a.stickybit,0);a.edge=bnot(equal(a.bit2,a.stickybit));a.volavg-=a.volavg*a.edge*a.stickybit;a.volavg2-=a.volavg2*a.edge*equal(a.stickybit,0);a.sample1-=\na.sample1*a.edge*a.stickybit;a.sample2-=a.sample2*a.edge*equal(a.stickybit,0);a.diff=.00001<Math.abs(equal(a.stickybit,1))?div(a.basssum,div(a.volavg2,a.sample2)):0;a.diff=.00001<Math.abs(equal(a.stickybit,0))?div(a.basssum,div(a.volavg,a.sample1)):a.diff;a.q3=a.diff;a.bit2=mod(a.time,2);a.difftime+=.03*a.diff;a.q2=a.difftime;a.difftime=.00001<Math.abs(above(a.difftime,2E3))?0:a.difftime;a.monitor=a.q1;","pixel_eqs_str":"a.zoom=1;","init_eqs_eel":"state = 0;","frame_eqs_eel":"basstime = basstime + bass*0.06;\nq1 = basstime;\n\nq9 = basstime * 0.000005;\n\nbasstime = if(below(basstime,1000),1000,basstime);\n\nvol = pow(bass+mid+treb,2);\nbasssum = vol;\n\nstickybit = time%2;\n\n//avg vol\n//buffer 1\nvolAvg = volAvg + vol*equal(stickybit,1);\n//number of samples 1 or framerate\nsample1 = sample1 + equal(stickybit,1);\n//buffer 2\nvolAvg2 = volAvg2 + vol*equal(stickybit,0);\n//number of samples 2\nsample2 = sample2 + equal(stickybit,0);\n\n//transision\nedge = bnot(equal(bit2,stickybit));\n\nvolAvg = volAvg - volAvg*edge*stickybit;\nvolAvg2 = volAvg2 - volAvg2*edge*equal(stickybit,0);\n\nsample1 = sample1  - sample1*edge*stickybit;\nsample2 = sample2  - sample2*edge*equal(stickybit,0);\n\n//test vol against avg buffer lvl\ndiff = if(equal(stickybit,1), (basssum/(volAvg2/sample2)) , 0);\ndiff = if(equal(stickybit,0), (basssum/(volAvg/sample1)), diff);\n\nq3 = diff;\n\nbit2 = time%2;\n\ndifftime = difftime + diff*0.03;\nq2 = difftime;\n\n//fix a strange error\ndifftime = if(above(difftime,2000),0, difftime);\n\n\n\nmonitor = q1;","pixel_eqs_eel":"zoom = 1;","warp":" shader_body { \n  float final_noise_1;\n  vec3 tmpvar_2;\n  tmpvar_2.xy = uv;\n  tmpvar_2.z = (q1 * 0.1);\n  final_noise_1 = ((texture (sampler_noisevol_lq, tmpvar_2) * 2.0) - 1.0).x;\n  final_noise_1 = (final_noise_1 + (0.5 * (\n    (texture (sampler_noisevol_hq, (tmpvar_2 * 2.0)) * 2.0)\n   - 1.0)).x);\n  final_noise_1 = (final_noise_1 + (0.25 * (\n    (texture (sampler_noisevol_lq, (tmpvar_2 * 4.0)) * 2.0)\n   - 1.0)).x);\n  final_noise_1 = (final_noise_1 + (0.125 * (\n    (texture (sampler_noisevol_hq, (tmpvar_2 * 8.0)) * 2.0)\n   - 1.0)).x);\n  final_noise_1 = (1.0 + (final_noise_1 * 0.02));\n  mat2 tmpvar_3;\n  float tmpvar_4;\n  tmpvar_4 = cos(q9);\n  tmpvar_3[uint(0)].x = tmpvar_4;\n  float tmpvar_5;\n  tmpvar_5 = sin(q9);\n  tmpvar_3[uint(0)].y = -(tmpvar_5);\n  tmpvar_3[1u].x = tmpvar_5;\n  tmpvar_3[1u].y = tmpvar_4;\n  vec4 tmpvar_6;\n  tmpvar_6.w = 1.0;\n  tmpvar_6.xyz = texture (sampler_main, (((\n    ((uv - 0.5) * (tmpvar_3 * final_noise_1))\n   * \n    (1.0 - ((rad * 0.05) * (0.9 + (bass * 0.1))))\n  ) * final_noise_1) + 0.5)).xyz;\n  ret = tmpvar_6.xyz;\n }","comp":" shader_body { \n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  tmpvar_1.xyz = (mix (texture (sampler_main, uv).xyz, texture (sampler_main, (\n    (vec2(-0.993, 0.993) * (uv - 0.5))\n   + 0.5)).xyz, vec3(0.5, 0.5, 0.5)) * 2.0);\n  ret = tmpvar_1.xyz;\n }","warp_hlsl":"shader_body\n{\n\n    float3 txr = float3(uv,q1*0.1);\n\n    float final_noise = 0;\n    \n    final_noise += (1.0/pow(2,0))*(tex3D(sampler_noisevol_lq, txr*pow(2,0))*2-1); \n    final_noise += (1.0/pow(2,1))*(tex3D(sampler_noisevol_hq, txr*pow(2,1))*2-1); \n    final_noise += (1.0/pow(2,2))*(tex3D(sampler_noisevol_lq, txr*pow(2,2))*2-1); \n    final_noise += (1.0/pow(2,3))*(tex3D(sampler_noisevol_hq, txr*pow(2,3))*2-1); \n        \n \n    final_noise = 1 +  final_noise*0.02;// (final_noise+1)*0.1;\n    \n    float2x2 rot = { cos(q9), sin(q9),\n                      -sin(q9), cos(q9) }; \n\n    rot = rot * (final_noise);\n    \n\n    ret = tex2D( sampler_main, mul((uv-0.5),rot)*(1-rad*0.05*(0.9 + bass*0.1))*final_noise + 0.5 ).xyz; \n   \n    // darken (decay) over time\n    ret = ret;// - 0.08; //or try: ret -= 0.004;\n}","comp_hlsl":"\nshader_body\n{\n    float2 uv_echo = (uv - 0.5)*0.993*float2(-1,1) + 0.5;\n    ret = lerp( tex2D(sampler_main, uv).xyz, \n                tex2D(sampler_main, uv_echo).xyz, \n                0.50 \n              ); //video echo\n    ret *= 2.00; //gamma\n    ret =  ret; //brighten\n}"}