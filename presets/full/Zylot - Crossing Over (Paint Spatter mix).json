{"version":2,"baseVals":{"rating":3,"wrap":0,"wave_scale":0.133,"wave_mystery":-0.38,"wave_r":0.5,"wave_g":0.5,"wave_b":0.5,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"sides":100,"rad":0.1644,"g":1,"b":1,"a":0,"r2":1,"b2":1,"border_a":0},"init_eqs_str":"","frame_eqs_str":"a.a=.00001<Math.abs(above(a.bass,1.2))?1:0;a.x=.01*rand(100);a.y=.01*rand(100);a.rad=.1+.01*rand(50);","init_eqs_eel":"","frame_eqs_eel":"a = if(above(bass,1.2),1,0);\nx = rand(100)*.01;\ny = rand(100)*.01;\nrad = .1+rand(50)*.01;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"","frame_eqs_str":"a.warp=0;a.wave_r=a.wave_r+.4*Math.sin(.333*a.time)+.2*a.bass_att;a.wave_g=a.wave_g+.4*Math.sin(.555*a.time)+.2*a.treb_att;a.wave_b=a.wave_b+.4*Math.sin(.444*a.time)+.2*a.mid_att;a.dx=.0002*Math.sin(a.time);a.dy=.0002*Math.sin(.999*a.time);","pixel_eqs_str":"a.zoom=1+a.rad*(.15+.05*a.bass);","init_eqs_eel":"","frame_eqs_eel":"warp = 0;\nwave_r = wave_r + .4*sin(time*.333)+bass_att*.2;\nwave_g = wave_g + .4*sin(time*.555)+treb_att*.2;\nwave_b = wave_b + .4*sin(time*.444)+mid_att*.2;\ndx = .0002*sin(time);\ndy = .0002*sin(time*.999);","pixel_eqs_eel":"zoom = 1+(rad*(.15+(bass*.05)));","warp":" shader_body { \n  vec3 ret_1;\n  ret_1 = (texture (sampler_fc_main, uv).xyz + ((\n    (texture (sampler_noise_lq, (((uv_orig * texsize.xy) * texsize_noise_lq.zw) + rand_frame.xy)).xyz - 0.5)\n   / 256.0) * 5.0));\n  ret_1 = (ret_1 + ((ret_1 - \n    ((texture (sampler_blur2, uv).xyz * scale2) + bias2)\n  ) * 0.3));\n  ret_1 = (ret_1 * 0.9);\n  ret_1 = (ret_1 * 0.96);\n  vec4 tmpvar_2;\n  tmpvar_2.w = 1.0;\n  tmpvar_2.xyz = ret_1;\n  ret = tmpvar_2.xyz;\n }","comp":" shader_body { \n  vec3 ret_1;\n  ret_1 = (texture (sampler_main, uv).xyz * 2.0);\n  ret_1 = (ret_1 * 2.0);\n  ret_1 = (ret_1 + abs((ret_1 - 0.2)));\n  ret_1 = (ret_1 - 0.2);\n  vec4 tmpvar_2;\n  tmpvar_2.w = 1.0;\n  tmpvar_2.xyz = ret_1;\n  ret = tmpvar_2.xyz;\n }","warp_hlsl":"shader_body\n{\n    // sample previous frame\n    ret = tex2D( sampler_fc_main, uv ).xyz;\n    // ERROR DIFFUSION DITHER - looks great\n    float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw + rand_frame.xy;\n    ret += (tex2D(sampler_noise_lq, dither_uv).xyz-0.5)/256.0*5;\n    // darken (decay) over time\n    ret += (ret - GetBlur2(uv))*0.3;\n    ret *= 0.9;\n\n    ret *= 0.96; //or try: ret -= 0.004;\n}","comp_hlsl":"shader_body\n{\n    ret = tex2D(sampler_main, uv).xyz;\n    ret *= 2.00; //gamma\n    ret *= 2.00; //gamma\n    //my stuffz\n    ret += abs(ret-.2);\n    ret = ret - .2;\n}"}