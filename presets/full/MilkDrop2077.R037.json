{"version":2,"baseVals":{"rating":1,"gammaadj":1.98,"decay":0.5,"echo_zoom":0.952,"echo_alpha":0.5,"echo_orient":3,"wave_mode":5,"wave_thick":1,"modwavealphabyvolume":1,"wave_brighten":0,"darken":1,"wave_a":1.136,"wave_scale":1.951,"wave_smoothing":0.9,"wave_mystery":0.094,"modwavealphastart":1.14,"modwavealphaend":1.3,"zoomexp":4.57482,"zoom":1.00778,"rot":0.02,"warp":0.01,"sx":0.96,"wave_g":0.83,"wave_b":1.24,"wave_x":0.86,"ob_size":0.05,"ob_r":0.99,"ib_size":0,"ib_r":0,"ib_g":0,"ib_b":0,"ib_a":1,"mv_b":1.2,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"enabled":1,"sides":40,"thickoutline":1,"textured":1,"rad":0.61756,"g":0.98,"b":1.17,"a":0.99,"r2":1,"b2":1,"a2":1,"border_g":0.98,"border_b":0,"border_a":0},"init_eqs_str":"a.vol=0;a.bob=0;a.border_1=0;a.ro=0;a.sp=0;a.red=0;a.spi=0;a.tm=0;a.bob=1.5;a.ro=0;a.red=rand(20);","frame_eqs_str":"a.vol=1+.17*div(a.bass_att+a.treb_att+a.mid_att,3);a.bob=a.bob*above(a.bob,.008)-.008+(1-above(a.bob,.008));a.bob=.35+.35*Math.sin(.66*a.time);a.bob*=a.vol;a.rad=a.bob;a.border_1=.4;a.sides=30;a.ro+=.02;a.ang=a.ro;a.rad=.6;a.sp=.025*a.red;a.spi=.5-a.sp;a.tm=.1*a.time;a.border_r=.5+a.sp*Math.sin(.46*a.tm)+a.spi*Math.cos(1.343*a.tm);a.border_g=.49+a.sp*Math.sin(1.1775*a.tm)+a.spi*Math.cos(.687*a.tm);a.border_b=.5+a.sp*Math.sin(1.418*a.tm)+a.spi*Math.cos(.76*a.tm);","init_eqs_eel":"bob = 1.5;\nro = 0;\nred = rand(20);","frame_eqs_eel":"vol = 1 + 0.17*((bass_att+treb_att+mid_att)/3);\nbob = bob*above(bob,0.008) - 0.008 + 1*(1 - above(bob,0.008));\nbob = 0.35 + 0.35*sin(time*0.66);\nbob = bob*vol;\nrad = bob;\nborder_1 = 0.4;\nsides = 30;\nro = ro + 0.02;\nang = ro;\nrad = 0.6;\n\nsp = red*0.025;\nspi = 0.5 - sp;\ntm = time*0.1;\nborder_r = 0.5 + sp*sin(tm*0.46) + spi*cos(tm*1.343);\nborder_g = 0.49 + sp*sin(tm*1.1775) + spi*cos(tm*0.687);\nborder_b = 0.5 + sp*sin(tm*1.418) + spi*cos(tm*0.76);"},{"baseVals":{"enabled":1,"sides":40,"additive":1,"tex_zoom":0.88,"g":1,"b":1,"g2":0,"border_g":0.92,"border_a":0},"init_eqs_str":"","frame_eqs_str":"a.x=.6169+.6169*(.29*Math.sin(.92*a.time)+.82*Math.sin(.6169*a.time));a.x=.57+.189*Math.sin(a.time);a.y=.5+.3*Math.cos(a.time);a.rad*=a.mid_att;a.r=.5+.5*Math.sin(.5*a.frame);a.b=.5+.5*Math.sin(.5*a.frame+2.094);a.g=.5+.5*Math.sin(.5*a.frame+4.188);","init_eqs_eel":"","frame_eqs_eel":"x = 0.6169 + 0.6169*(sin(time*0.92)*0.29 + 0.82*sin(time*0.6169));\nx = 0.57 + 0.189*sin(time);\ny = 0.5 + 0.3*cos(time);\n\nrad = rad*mid_att;\nr = 0.5 + 0.5*sin(frame*0.5);\nb = 0.5 + 0.5*sin(frame*0.5 + 2.094);\ng = 0.5 + 0.5*sin(frame*0.5 + 4.188);\n"},{"baseVals":{"enabled":1,"sides":40,"additive":1,"x":0.435,"y":0.595,"rad":0.103,"r":0.8,"g":1,"b":0.87,"g2":0,"border_g":0.99,"border_a":0},"init_eqs_str":"","frame_eqs_str":"a.x=.5+.5*(.3*Math.sin(1.1*a.time)+.7*Math.sin(.5*a.time));a.x=.5+.225*Math.sin(a.time+2.09);a.y=.45+.25*Math.cos(a.time+1.797);a.rad*=a.bass_att;a.r=.4686+.4686*Math.sin(.4686*a.frame);a.b=.5+.5*Math.sin(.5*a.frame+2.094);a.g=.612+.612*Math.sin(.612*a.frame+3.2666);","init_eqs_eel":"","frame_eqs_eel":"x = 0.5 + 0.5*(sin(time*1.1)*0.3 + 0.7*sin(time*0.5));\nx = 0.5 + 0.225*sin(time + 2.09);\ny = 0.45 + 0.25*cos(time + 1.797);\n\nrad = rad*bass_att;\nr = 0.4686 + 0.4686*sin(frame*0.4686);\nb = 0.5 + 0.5*sin(frame*0.5 + 2.094);\ng = 0.612 + 0.612*sin(frame*0.612 + 3.2666);\n"},{"baseVals":{"enabled":1,"sides":40,"additive":1,"x":0.595,"rad":0.09,"g":1,"b":1,"g2":0,"border_g":0.97,"border_a":0},"init_eqs_str":"","frame_eqs_str":"a.x=.495+.495*(.36*Math.sin(.9*a.time)+.8*Math.sin(.495*a.time));a.x=.44+.216*Math.sin(a.time+5.154);a.y=.5+.3*Math.cos(a.time+4.19);a.rad*=a.treb_att;a.r=.5+.5*Math.sin(.5*a.frame);a.b=.5+.5*Math.sin(.5*a.frame+2.094);a.g=.5+.5*Math.sin(.5*a.frame+4.188);","init_eqs_eel":"","frame_eqs_eel":"x = 0.495 + 0.495*(sin(time*0.9)*0.36 + 0.8*sin(time*0.495));\nx = 0.44 + 0.216*sin(time + 5.154);\ny = 0.5 + 0.3*cos(time + 4.19);\n\nrad = rad*treb_att;\nr = 0.5 + 0.5*sin(frame*0.5);\nb = 0.5 + 0.5*sin(frame*0.5 + 2.094);\ng = 0.5 + 0.5*sin(frame*0.5 + 4.188);\n"}],"waves":[{"baseVals":{"scaling":1.24,"r":0.77,"g":1.1,"a":1.11,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"scaling":1.12,"smoothing":0.45,"r":1.02,"g":0.89,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"smoothing":0.385,"b":1.18,"a":0.78,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"smoothing":0.4,"r":1.07,"g":1.07,"b":1.11,"a":0.92,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.q1=0;a.q3=0;a.q4=0;","frame_eqs_str":"","pixel_eqs_str":"a.cx=.00001<Math.abs(above(a.x,.5+a.q1))?.3:1-2*a.q1;a.cx=.00001<Math.abs(above(a.rad,.5))?a.cx+.2*Math.sin(a.q3):a.cx-.1;a.cx=.00001<Math.abs(above(a.ang,1.56))?a.cx+.1:a.cx-.2*Math.sin(a.q4);a.cx=.00001<Math.abs(above(a.ang,3.56))?a.cy-.1:a.cy+.2*Math.sin(a.q3);a.rot=1.5*(1-a.q1)*(0*a.rad+0*a.cx-0*a.cy);","init_eqs_eel":"","frame_eqs_eel":"","pixel_eqs_eel":"cx = if(above(x,0.5+q1),0.3,1-2*q1);\n//cy = if(above(y,0.5),0.2+q1,0.7);\ncx = if(above(rad,0.5),cx+0.2*sin(q3),cx-0.1);\n//cy = if(above(rad,0.5),cy+0.2*cos(q4),cy-0.1);\ncx = if(above(ang,1.56),cx+0.1,cx-0.2*sin(q4));\ncx = if(above(ang,3.56),cy-0.1,cy+0.2*sin(q3));\nrot = 1.5*(1-q1)*(0*rad+ 0.00*cx-0.0*cy);","warp":" shader_body { \n  vec2 uv_1;\n  vec2 uv6_2;\n  vec2 tmpvar_3;\n  tmpvar_3 = ((uv - 0.5) * aspect.xy);\n  float x_4;\n  x_4 = (tmpvar_3.x * tmpvar_3.y);\n  float tmpvar_5;\n  tmpvar_5 = ((q10 * 24.0) * sqrt((x_4 * x_4)));\n  uv_1 = (uv + (vec2(0.0, 0.01) * dot (\n    ((texture (sampler_blur1, uv).xyz * scale1) + bias1)\n  , vec3(0.32, 0.49, 0.29))));\n  uv_1 = (uv_1 - (clamp (\n    ((sin(tmpvar_5) / cos(tmpvar_5)) * normalize(tmpvar_3))\n  , vec2(-2.0, -2.0), vec2(2.0, 2.0)) / 200.0));\n  uv6_2 = (0.4 * sin((\n    (uv_1 * 6.0)\n   + \n    (rand_frame * 16.0)\n  .xy)));\n  vec4 tmpvar_6;\n  tmpvar_6.w = 1.0;\n  tmpvar_6.xyz = (((\n    (texture (sampler_main, uv_1).xyz - (((texture (sampler_blur2, \n      fract(uv_1)\n    ).xyz * scale2) + bias2) * 0.02))\n   + \n    (0.1 * (vec3((0.1 / sqrt(\n      dot (uv6_2, uv6_2)\n    ))) * (0.5 * (1.0 + roam_cos)).xyz))\n  ) * 0.99) - 0.025);\n  ret = tmpvar_6.xyz;\n }","comp":"float xlat_mutablesmask;\nvec2 xlat_mutableuv1;\nvec2 xlat_mutableuv3;\nvec2 xlat_mutableuv4;\n shader_body { \n  float dist_1;\n  float stars_2;\n  vec3 ret_3;\n  float tmpvar_4;\n  tmpvar_4 = (q4 / 2.0);\n  ret_3 = (ret_3 * normalize(texture (sampler_noise_hq, (\n    (uv + tmpvar_4)\n   / 6.0))).xyz);\n  xlat_mutableuv1 = ((uv - 0.5) * aspect.xy);\n  float tmpvar_5;\n  tmpvar_5 = (0.1 * time);\n  float tmpvar_6;\n  tmpvar_6 = (0.2 * rad);\n  dist_1 = ((1.0 - fract(\n    (0.25 + tmpvar_5)\n  )) * (1.0 - tmpvar_6));\n  vec2 tmpvar_7;\n  tmpvar_7.x = q1;\n  tmpvar_7.y = q2;\n  xlat_mutableuv3 = (xlat_mutableuv1 + tmpvar_7);\n  xlat_mutableuv4 = ((64.0 * dist_1) * xlat_mutableuv3);\n  xlat_mutablesmask = (texture (sampler_pw_noise_lq, (xlat_mutableuv4 / 256.0)).y - 0.84);\n  vec2 tmpvar_8;\n  tmpvar_8 = abs((fract(xlat_mutableuv4) - 0.5));\n  stars_2 = max (0.0, clamp ((\n    (1.0 - dist_1)\n   * \n    ((0.1 / sqrt(dot (tmpvar_8, tmpvar_8))) * xlat_mutablesmask)\n  ), 0.0, 1.0));\n  dist_1 = ((1.0 - fract(\n    (0.5 + tmpvar_5)\n  )) * (1.0 - tmpvar_6));\n  vec2 tmpvar_9;\n  tmpvar_9.x = q1;\n  tmpvar_9.y = q2;\n  xlat_mutableuv3 = (xlat_mutableuv1 + tmpvar_9);\n  xlat_mutableuv4 = ((64.0 * dist_1) * xlat_mutableuv3);\n  xlat_mutablesmask = (texture (sampler_pw_noise_lq, (xlat_mutableuv4 / 256.0)).y - 0.84);\n  vec2 tmpvar_10;\n  tmpvar_10 = abs((fract(xlat_mutableuv4) - 0.5));\n  stars_2 = (stars_2 + max (stars_2, clamp (\n    ((1.0 - dist_1) * ((0.1 / sqrt(\n      dot (tmpvar_10, tmpvar_10)\n    )) * xlat_mutablesmask))\n  , 0.0, 1.0)));\n  dist_1 = ((1.0 - fract(\n    (0.75 + tmpvar_5)\n  )) * (1.0 - tmpvar_6));\n  vec2 tmpvar_11;\n  tmpvar_11.x = q1;\n  tmpvar_11.y = q2;\n  xlat_mutableuv3 = (xlat_mutableuv1 + tmpvar_11);\n  xlat_mutableuv4 = ((64.0 * dist_1) * xlat_mutableuv3);\n  xlat_mutablesmask = (texture (sampler_pw_noise_lq, (xlat_mutableuv4 / 256.0)).y - 0.84);\n  vec2 tmpvar_12;\n  tmpvar_12 = abs((fract(xlat_mutableuv4) - 0.5));\n  stars_2 = (stars_2 + max (stars_2, clamp (\n    ((1.0 - dist_1) * ((0.1 / sqrt(\n      dot (tmpvar_12, tmpvar_12)\n    )) * xlat_mutablesmask))\n  , 0.0, 1.0)));\n  dist_1 = ((1.0 - fract(\n    (1.0 + tmpvar_5)\n  )) * (1.0 - tmpvar_6));\n  vec2 tmpvar_13;\n  tmpvar_13.x = q1;\n  tmpvar_13.y = q2;\n  xlat_mutableuv3 = (xlat_mutableuv1 + tmpvar_13);\n  xlat_mutableuv4 = ((64.0 * dist_1) * xlat_mutableuv3);\n  xlat_mutablesmask = (texture (sampler_pw_noise_lq, (xlat_mutableuv4 / 256.0)).y - 0.84);\n  vec2 tmpvar_14;\n  tmpvar_14 = abs((fract(xlat_mutableuv4) - 0.5));\n  stars_2 = (stars_2 + max (stars_2, clamp (\n    ((1.0 - dist_1) * ((0.1 / sqrt(\n      dot (tmpvar_14, tmpvar_14)\n    )) * xlat_mutablesmask))\n  , 0.0, 1.0)));\n  vec3 tmpvar_15;\n  tmpvar_15 = max ((texture (sampler_main, uv).xyz * 2.0), ((\n    (texture (sampler_blur2, uv).xyz * scale2)\n   + bias2) * 2.0));\n  ret_3 = (ret_3 + clamp ((stars_2 * stars_2), 0.0, 1.0));\n  ret_3 = (ret_3 * clamp ((1.0 - \n    (2.0 * dot (tmpvar_15, vec3(0.32, 0.49, 0.29)))\n  ), 0.0, 1.0));\n  ret_3 = (ret_3 + tmpvar_15);\n  ret_3 = (ret_3 * normalize(texture (sampler_noise_hq, (\n    (uv + tmpvar_4)\n   / 6.0))).xyz);\n  vec4 tmpvar_16;\n  tmpvar_16.w = 1.0;\n  tmpvar_16.xyz = ret_3;\n  ret = tmpvar_16.xyz;\n }","warp_hlsl":"sampler sampler_worms;\nfloat3 color, mus;\nfloat dx,dy;\nshader_body {\n\n\nfloat2 uv1 = (uv-.5) * aspect.xy;\n\nfloat2 uv6 = uv1;\nfloat z = q10*24*length(((uv1.x)*(uv1.y)));\nfloat2 d = normalize(uv1);\nfloat2 rs = clamp(tan(z)*d,-2,2);\nuv += .01*lum(GetBlur1(uv))*float2 (0,1);\nuv -= rs/200;\n\nuv6 = .4*sin(uv*6+rand_frame*16);\nmus = .1/(length(uv6));\nmus *= .5*(1+roam_cos);\n\nfloat3 blur = GetBlur2(frac(uv));\n\nfloat3 crisp= tex2D(sampler_main,uv);\n\nfloat3 ret1 = crisp - blur*.02 + .1*mus;\n\nq25 = 1;\nret = q25*(ret1*.99-.025) + (1-q25)* GetPixel(uv_orig);\n\n}","comp_hlsl":"sampler sampler_pw_noise_lq;\nfloat3 ret1;\nfloat2 zz, uv0, uv1,uv2,uv3,uv4;\nfloat smask;\n\nfloat aTan2(float y, float x) {float angle;\t float abs_y = abs(y);\nif (x >= 0) {float r = (x - abs_y) / (x + abs_y); angle = 1-r;} \nelse {float r = (x + abs_y) / (abs_y - x); angle = 3-r; }\t\nangle = angle * .25;\nreturn y < 0 ? -angle : angle;}\n\nshader_body { ;\nuv0 = uv;\nuv1 = (uv-0.56)*aspect.xy;\n\nret *= 1*normalize ((tex2D (sampler_noise_hq,(uv+q4/2)/6)) + 0);\n\n\nuv1 = (uv - .5) * aspect.xy;    \nfloat stars = 0; float dist, inten;\nint n = 1;\nint anz = 4;\nwhile (n <= anz) {\n  dist = (1-frac(1.0/anz*n+.10*time)) * (1-.2*rad);\n  inten =  (1-dist);\n  uv3 = (uv1+float2(q1,q2));\n   uv4 = 64*dist*uv3;\n  smask = (tex2D (sampler_pw_noise_lq,uv4/256)).g-0.84;\n  stars += max(stars,saturate(inten*(.1/length(abs(frac(uv4)-.5))*smask)));\nn++;\n}\nuv2 = uv1 - float2(q5,q6);\nfloat beat = (mid - 0.483) * (mid > 0.483)*2;\nfloat flash = 0.011/(length(uv2))*min(3,pow(beat,1));\nflash *= flash/(abs(frac(3*aTan2(uv2.x,uv2.y)+time*2)-0.56));\nret1 = max(GetPixel(uv0)*2,GetBlur2(uv0)*2);\n//ret = saturate(0.0218/length(sin(uv3)))*float3(0.8,2.4,0.2); //MilkDrop2077 color mod\nret += saturate(pow(stars,2));\nret *= saturate(1-2*lum(ret1));\nret +=  ret1;\nret *= 1*normalize ((tex2D (sampler_noise_hq,(uv+q4/2)/6)) + 0);\n\n//ret += 2*saturate(flash)*float3(1.8,1.3,1.2); //MilkDrop2077 color mod\n}"}