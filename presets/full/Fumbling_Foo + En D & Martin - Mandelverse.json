{"version":2,"baseVals":{"rating":1,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":7,"additivewave":1,"modwavealphabyvolume":1,"wave_brighten":0,"wrap":0,"darken":1,"wave_a":0.001,"wave_scale":1.286,"wave_smoothing":0.63,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0.65,"wave_g":0.65,"wave_b":0.65,"ob_size":0,"ob_g":0.1,"ob_b":1,"ob_a":1,"ib_size":0,"ib_r":0,"ib_g":0,"ib_b":0,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"enabled":1,"sides":54,"textured":1,"rad":0.49138,"ang":1.5708,"tex_ang":3.14159,"g":1,"b":1,"r2":1,"b2":1,"border_a":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":1,"sides":54,"rad":0.08195,"r":0,"g":1,"g2":0,"border_a":0},"init_eqs_str":"a.q3=0;a.q4=0;a.q20=0;a.q21=0;a.q22=0;","frame_eqs_str":"a.x=a.q3;a.y=1-a.q4;a.r=Math.abs(a.q20);a.g=Math.abs(a.q21);a.b=Math.abs(a.q22);a.rad=.1*a.mid;","init_eqs_eel":"","frame_eqs_eel":"x=q3;\ny=1-q4;\n\nr = abs(q20);\ng = abs(q21);\nb = abs(q22);\n\nrad = .1*mid;"},{"baseVals":{"enabled":1,"sides":54,"rad":0.08195,"r":0,"g2":0,"border_a":0},"init_eqs_str":"a.q5=0;a.q6=0;","frame_eqs_str":"a.x=a.q5;a.y=1-a.q6;a.rad=.2*a.bass;","init_eqs_eel":"","frame_eqs_eel":"x=q5;\ny=1-q6;\n\nrad = .2*bass;"},{"baseVals":{"enabled":1,"sides":54,"rad":0.08195,"r":0,"b":1,"g2":0,"border_a":0},"init_eqs_str":"a.q1=0;a.q2=0;a.q23=0;a.q24=0;a.q25=0;a.q19=0;","frame_eqs_str":"a.x=a.q1;a.y=1-a.q2;a.r=a.q23;a.g=a.q24;a.b=a.q25;a.a=a.q19;a.rad=.1*a.bass;","init_eqs_eel":"","frame_eqs_eel":"x=q1;\ny=1-q2;\n\nr = (q23);\ng = (q24);\nb = (q25);\na = q19;\n\nrad = bass*.1;"}],"waves":[{"baseVals":{"sep":51,"spectrum":1,"usedots":1,"thick":1,"scaling":1.32735,"smoothing":0.82,"b":3,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"x = rand(1001)*.001;\ny = rand(1001)*.001;\n\ntm = time*.5 + sample*2;\n\nr = .5 + .5*sin(tm*1.132);\ng = .5 + .5*sin(tm*1.121);\nb = .5 + .5*sin(tm*1.187);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"x = rand(1001)*.001;\ny = rand(1001)*.001;\n\ntm = time*.5 + sample*2;\n\nr = .5 + .5*sin(tm*1.132);\ng = .5 + .5*sin(tm*1.121);\nb = .5 + .5*sin(tm*1.187);"},{"baseVals":{"sep":51,"spectrum":1,"usedots":1,"scaling":1.32735,"smoothing":0.82,"b":3,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"x = rand(1001)*.001;\ny = rand(1001)*.001;\n\ntm = time*.5 + sample*2;\n\nr = .5 + .5*sin(tm*1.132);\ng = .5 + .5*sin(tm*1.121);\nb = .5 + .5*sin(tm*1.187);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"x = rand(1001)*.001;\ny = rand(1001)*.001;\n\ntm = time*.5 + sample*2;\n\nr = .5 + .5*sin(tm*1.132);\ng = .5 + .5*sin(tm*1.121);\nb = .5 + .5*sin(tm*1.187);"},{"baseVals":{"sep":51,"usedots":1,"thick":1,"scaling":1.32735,"smoothing":0.82,"b":3,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"x = rand(1001)*.001;\ny = rand(1001)*.001;\n\ntm = time*.5 + sample*2;\n\nr = .5 + .5*sin(tm*1.132);\ng = .5 + .5*sin(tm*1.121);\nb = .5 + .5*sin(tm*1.187);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"x = rand(1001)*.001;\ny = rand(1001)*.001;\n\ntm = time*.5 + sample*2;\n\nr = .5 + .5*sin(tm*1.132);\ng = .5 + .5*sin(tm*1.121);\nb = .5 + .5*sin(tm*1.187);"},{"baseVals":{"enabled":1,"sep":51,"usedots":1,"additive":1,"scaling":1.32735,"smoothing":0.82,"b":3},"init_eqs_str":"a.tm=0;","frame_eqs_str":"","point_eqs_str":"a.x=.001*rand(1001);a.y=.001*rand(1001);a.tm=.5*a.time+2*a.sample;a.r=.5+.5*Math.sin(1.132*a.tm);a.g=.5+.5*Math.sin(1.121*a.tm);a.b=.5+.5*Math.sin(1.187*a.tm);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"x = rand(1001)*.001;\ny = rand(1001)*.001;\n\ntm = time*.5 + sample*2;\n\nr = .5 + .5*sin(tm*1.132);\ng = .5 + .5*sin(tm*1.121);\nb = .5 + .5*sin(tm*1.187);"}],"init_eqs_str":"a.look=0;a.n=0;a.reg26=0;a.uvx0=0;a.reg34=0;a.reg28=0;a.reg23=0;a.q25=0;a.angchg=0;a.reg20=0;a.reg15=0;a.reg10=0;a.q12=0;a.v3=0;a.q22=0;a.q21=0;a.diry=0;a.q13=0;a.q15=0;a.q6=0;a.posx=0;a.fps_=0;a.reg25=0;a.uvx=0;a.q1=0;a.travel=0;a.posz=0;a.q5=0;a.dirz=0;a.dec_s=0;a.reg16=0;a.slow=0;a.reg36=0;a.reg22=0;a.uvy=0;a.rotz=0;a.ly=0;a.dist_=0;a.q23=0;a.q24=0;a.reg24=0;a.cran0=0;a.ran2=0;a.q11=0;a.q10=0;a.reg14=0;a.posy=0;a.reg31=0;a.dirx=0;a.q4=0;a.start=0;a.reg12=0;a.reg13=0;a.c2=\n0;a.reg37=0;a.s3=0;a.yslope=0;a.lampy=0;a.q16=0;a.xslope=0;a.q26=0;a.reg38=0;a.reg35=0;a.reg11=0;a.tx=0;a.avg=0;a.uvz=0;a.c3=0;a.uvy0=0;a.reg27=0;a.q19=0;a.beat=0;a.reg32=0;a.lx=0;a.reg21=0;a.uvz0=0;a.len=0;a.reg18=0;a.reg30=0;a.q2=0;a.q27=0;a.slen=0;a.q14=0;a.dist=0;a.reg17=0;a.v1=0;a.speed=0;a.s1=0;a.t0=0;a.s2=0;a.ran1=0;a.reg33=0;a.q7=0;a.ds=0;a.q28=0;a.lampx=0;a.ty=0;a.c1=0;a.v2=0;a.q20=0;a.q8=0;a.avg=.01;a.q7=.25;a.q8=rand(2)-1;a.q16=1+rand(2);a.q18=rand(.8)+.1;a.q30=1;a.q31=128;a.start=1;a.travel=\n0;a.rotz=0;a.look=0;a.slow=0;a.t0=a.time+3;a.lampx=.5;a.lampy=.5;a.cran0=rand(1);for(var b=a.n=0;1E4>b;b++)a.gmegabuf[Math.floor(a.n)]=0,a.n+=1;for(b=a.n=0;1E4>b;b++)a.megabuf[Math.floor(a.n)]=0,a.n+=1;a.trelx=0;a.trely=0;a.trelz=0;a.reg20=1;a.reg21=0;a.reg22=0;a.reg23=0;a.reg24=1;a.reg25=0;a.reg26=0;a.reg27=0;a.reg28=1;b=0;do{b+=1;var c;a.ran1=div(rand(800),100);a.ran2=div(rand(800),100);a.ran3=div(rand(800),100);a.posx=rand(5)-2;a.posy=rand(5)-2;a.posz=rand(5)-2;a.c1=Math.cos(a.ran1);a.c2=Math.cos(a.ran2);\na.c3=Math.cos(a.ran3);a.s1=Math.sin(a.ran1);a.s2=Math.sin(a.ran2);a.s3=Math.sin(a.ran3);a.reg20=a.c2*a.c1;a.reg21=a.c2*a.s1;a.reg22=-a.s2;a.reg23=a.s3*a.s2*a.c1-a.c3*a.s1;a.reg24=a.s3*a.s2*a.s1+a.c3*a.c1;a.reg25=a.s3*a.c2;a.reg26=a.c3*a.s2*a.c1+a.s3*a.s1;a.reg27=a.c3*a.s2*a.s1-a.s3*a.c1;a.reg28=a.c3*a.c2;a.dist=.001;var d=0;do{d+=1;a.uvx=div(a.reg26*a.dist,a.q7);a.uvy=div(a.reg27*a.dist,a.q7);a.uvz=div(a.reg28*a.dist,a.q7);a.uvx+=a.posx;a.uvy+=a.posy;a.uvz+=a.posz;a.uvx=8*(div(a.uvx,8)+30.5-Math.floor(div(a.uvx,\n8)+30.5)-.5);a.uvy=8*(div(a.uvy,8)+30.5-Math.floor(div(a.uvy,8)+30.5)-.5);a.uvz=8*(div(a.uvz,8)+30.5-Math.floor(div(a.uvz,8)+30.5)-.5);a.uvx0=a.uvx+a.q8;a.uvy0=a.uvy+a.q8;a.uvz0=a.uvz+a.q8;for(c=0;8>c;c++)a.uvx=.00001<Math.abs(1<a.uvx?1:0)?2-a.uvx:.00001<Math.abs(-1>a.uvx?1:0)?-2-a.uvx:a.uvx,a.uvy=.00001<Math.abs(1<a.uvy?1:0)?2-a.uvy:.00001<Math.abs(-1>a.uvy?1:0)?-2-a.uvy:a.uvy,a.uvz=.00001<Math.abs(1<a.uvz?1:0)?2-a.uvz:.00001<Math.abs(-1>a.uvz?1:0)?-2-a.uvz:a.uvz,a.slen=a.uvx*a.uvx+a.uvy*a.uvy+a.uvz*\na.uvz,a.uvx=2.6*(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvx:.00001<Math.abs(1>a.slen?1:0)?div(a.uvx,a.slen):a.uvx)+a.uvx0,a.uvy=2.6*(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvy:.00001<Math.abs(1>a.slen?1:0)?div(a.uvy,a.slen):a.uvy)+a.uvy0,a.uvz=2.6*(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvz:.00001<Math.abs(1>a.slen?1:0)?div(a.uvz,a.slen):a.uvz)+a.uvz0;a.len=sqrt(a.uvx*a.uvx+a.uvy*a.uvy+a.uvz*a.uvz);a.dist*=1.05;c=(.6>a.dist?1:0)*(30<a.len?1:0)}while(.00001<Math.abs(c)&&1048576>d);d=.06>a.dist?1:0}while(.00001<\nMath.abs(d)&&1048576>b);","frame_eqs_str":"a.fps_=0*a.fps_+1*(.00001<Math.abs(25>=a.fps?1:0)?a.fps:25+.5*(a.fps-25));a.dec_s=1-div(.06*30,a.fps_);a.beat=a.time>a.t0+3?1:0;a.t0=.00001<Math.abs(a.beat)?a.time:a.t0;a.speed=div(Math.min(.2,a.dist_-.02)*(1+2*a.avg)*(1-0*a.slow)*.7,a.q7);a.ds=a.ds*a.dec_s+div((1-a.dec_s)*a.speed*.25,a.fps_);a.rotz=.00001<Math.abs(.00001>Math.abs(a.rotz-0)?1:0)?a.beat*(rand(100)<20*a.travel?1:0)*(div(rand(10),10)-.3):bnot(a.beat*(30>rand(100)?1:0))*a.rotz;a.slow=.00001<Math.abs(bnot(a.slow))?\na.beat*(6>rand(1E3*a.avg)?1:0):bnot(a.beat*(50>rand(100)?1:0));a.look=.00001<Math.abs(bnot(a.look))?a.beat*(12>rand(1E3*a.speed)?1:0):bnot(a.beat*(50>rand(100)?1:0));a.lx=.00001<Math.abs(a.beat)?div(rand(150),200)+.15:a.lx;a.ly=.00001<Math.abs(a.beat)?div(rand(150),200)+.15:a.ly;a.lampx=a.lampx*a.dec_s+(1-a.dec_s)*(.00001<Math.abs(a.look)?a.lx:.5);a.lampy=a.lampy*a.dec_s+(1-a.dec_s)*(.00001<Math.abs(a.look)?a.ly:.5);a.q1=a.lampx;a.q2=a.lampy;a.dirx=a.reg26;a.diry=a.reg27;a.dirz=a.reg28;a.posx+=a.ds*\na.dirx;a.posy+=a.ds*a.diry;a.posz+=a.ds*a.dirz;a.q4=a.posx;a.q5=a.posy;a.q6=a.posz;a.angchg=(.2-a.dist_)*(.2>a.dist_?1:0)*2;a.travel=.00001<Math.abs(0<a.angchg?1:0)?0:a.travel+a.ds;a.v1=a.v1*a.dec_s+(1-a.dec_s)*a.rotz*a.ds;a.v2=a.v2*a.dec_s+div((1-a.dec_s)*a.angchg*a.xslope,a.fps_);a.v3=a.v3*a.dec_s+(1-a.dec_s)*(div(a.angchg*a.yslope,a.fps_)+2*a.v1*Math.sin(.1*a.time));a.reg30=a.reg20;a.reg31=a.reg21;a.reg32=a.reg22;a.reg33=a.reg23;a.reg34=a.reg24;a.reg35=a.reg25;a.reg36=a.reg26;a.reg37=a.reg27;a.reg38=\na.reg28;a.n=0;for(var b=a.avg=0;5>b;b++){a.n+=1;a.ran1=div(rand(100),100);a.ran2=div(rand(100),200)-.25;a.tx=Math.cos(1.57*a.n+a.ran2)*(4>=a.n?1:0)*a.ran1;a.ty=Math.sin(1.57*a.n+a.ran2)*(4>=a.n?1:0)*a.ran1;a.c1=Math.cos(a.v1);a.c2=Math.cos(a.v2+a.ty);a.c3=Math.cos(a.v3+a.tx);a.s1=Math.sin(a.v1);a.s2=Math.sin(a.v2+a.ty);a.s3=Math.sin(a.v3+a.tx);a.reg10=a.c2*a.c1;a.reg11=a.c2*a.s1;a.reg12=-a.s2;a.reg13=a.s3*a.s2*a.c1-a.c3*a.s1;a.reg14=a.s3*a.s2*a.s1+a.c3*a.c1;a.reg15=a.s3*a.c2;a.reg16=a.c3*a.s2*a.c1+\na.s3*a.s1;a.reg17=a.c3*a.s2*a.s1-a.s3*a.c1;a.reg18=a.c3*a.c2;a.reg20=a.reg30;a.reg21=a.reg31;a.reg22=a.reg32;a.reg23=a.reg33;a.reg24=a.reg34;a.reg25=a.reg35;a.reg26=a.reg36;a.reg27=a.reg37;a.reg28=a.reg38;a.q20=a.reg10*a.reg20+a.reg11*a.reg23+a.reg12*a.reg26;a.q21=a.reg10*a.reg21+a.reg11*a.reg24+a.reg12*a.reg27;a.q22=a.reg10*a.reg22+a.reg11*a.reg25+a.reg12*a.reg28;a.q23=a.reg13*a.reg20+a.reg14*a.reg23+a.reg15*a.reg26;a.q24=a.reg13*a.reg21+a.reg14*a.reg24+a.reg15*a.reg27;a.q25=a.reg13*a.reg22+a.reg14*\na.reg25+a.reg15*a.reg28;a.q26=a.reg16*a.reg20+a.reg17*a.reg23+a.reg18*a.reg26;a.q27=a.reg16*a.reg21+a.reg17*a.reg24+a.reg18*a.reg27;a.q28=a.reg16*a.reg22+a.reg17*a.reg25+a.reg18*a.reg28;a.reg20=a.q20;a.reg21=a.q21;a.reg22=a.q22;a.reg23=a.q23;a.reg24=a.q24;a.reg25=a.q25;a.reg26=a.q26;a.reg27=a.q27;a.reg28=a.q28;a.dist=.002;var c,d=0;do{d+=1;a.uvx=div(a.reg26*a.dist,a.q7);a.uvy=div(a.reg27*a.dist,a.q7);a.uvz=div(a.reg28*a.dist,a.q7);a.uvx+=a.posx;a.uvy+=a.posy;a.uvz+=a.posz;a.uvx=8*(div(a.uvx,8)+30.5-\nMath.floor(div(a.uvx,8)+30.5)-.5);a.uvy=8*(div(a.uvy,8)+30.5-Math.floor(div(a.uvy,8)+30.5)-.5);a.uvz=8*(div(a.uvz,8)+30.5-Math.floor(div(a.uvz,8)+30.5)-.5);a.uvx0=a.uvx+a.q8;a.uvy0=a.uvy+a.q8;a.uvz0=a.uvz+a.q8;for(c=0;8>c;c++)a.uvx=.00001<Math.abs(1<a.uvx?1:0)?2-a.uvx:.00001<Math.abs(-1>a.uvx?1:0)?-2-a.uvx:a.uvx,a.uvy=.00001<Math.abs(1<a.uvy?1:0)?2-a.uvy:.00001<Math.abs(-1>a.uvy?1:0)?-2-a.uvy:a.uvy,a.uvz=.00001<Math.abs(1<a.uvz?1:0)?2-a.uvz:.00001<Math.abs(-1>a.uvz?1:0)?-2-a.uvz:a.uvz,a.slen=a.uvx*\na.uvx+a.uvy*a.uvy+a.uvz*a.uvz,a.uvx=2.6*(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvx:.00001<Math.abs(1>a.slen?1:0)?div(a.uvx,a.slen):a.uvx)+a.uvx0,a.uvy=2.6*(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvy:.00001<Math.abs(1>a.slen?1:0)?div(a.uvy,a.slen):a.uvy)+a.uvy0,a.uvz=2.6*(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvz:.00001<Math.abs(1>a.slen?1:0)?div(a.uvz,a.slen):a.uvz)+a.uvz0;a.len=sqrt(a.uvx*a.uvx+a.uvy*a.uvy+a.uvz*a.uvz);a.dist*=1.1;c=(.6>a.dist?1:0)*(30<a.len?1:0)}while(.00001<Math.abs(c)&&1048576>d);a.megabuf[Math.floor(a.n)]=\na.megabuf[Math.floor(a.n)]*a.dec_s+(1-a.dec_s)*a.dist;a.avg+=Math.abs(div(a.megabuf[Math.floor(a.n)],5))}a.n=0;for(b=a.avg=0;5>b;b++)a.n+=1,a.avg+=Math.abs(div(a.megabuf[Math.floor(a.n)],5));a.xslope=Math.min(Math.max(div(2,a.avg)*(a.megabuf[1]-a.megabuf[3]),-3),3);a.yslope=Math.min(Math.max(div(2,a.avg)*(a.megabuf[4]-a.megabuf[2]),-3),3);a.monitor=a.avg;a.dist_=a.dist_*a.dec_s+(1-a.dec_s)*a.dist;a.q10=a.ds*a.q7;a.q14=Math.abs(a.ds)+2*(Math.abs(a.v1)+Math.abs(a.v2)+Math.abs(a.v3))+div(1,255)+.05*\na.start;a.q15=4*a.avg-1.4;a.q19=.6+.4*Math.sin(.02*a.time+6*a.cran0);a.start*=.9;a.q11=a.v1;a.q12=a.v2;a.q13=a.v3;a.monitor=3.333*a.q15;","pixel_eqs_str":"a.warp=0;a.zoom=1;a.dx=div(-a.q12,a.q16)*(1+0*pow(a.x-.5,2));a.dy=div(a.q13,a.q16)*(1+0*pow(a.y-.5,2));a.rot=a.q11;","init_eqs_eel":"//******** INITIALIZATION *********\n//---------- some global vars, do not change -------------\navg = 0.01;\nq7 = .25; //MyZoom\nq8 =  rand(2.0)-1.0; //fractal modifier\n//q8 = 1; //#\nq16 = 1 + rand(2); //Tele ; rather fish eye\n//q16 = 1; //#\nq18 = rand(0.8)+.1; //brightness balance back/front\nq30 = 1; //logarithmic Z-Dist storage; unused\nq31 =128;\nstart = 1; travel = 0; RotZ = 0; look = 0; slow = 0; t0 = time+3; lampx = .5; lampy = .5;\ncran0 = rand(1);\nn = 0; loop (10000, gmegabuf(n)=0; n=n+1; ); \nn = 0; loop (10000,  megabuf(n)=0; n=n+1; ); \ntrelx = 0;  trely = 0; trelz = 0;\nreg20 = 1; reg21 = 0; reg22 = 0; reg23 = 0; reg24 = 1; reg25 = 0; reg26 = 0; reg27 = 0; reg28 = 1;\n\n//Find random starting point\nwhile (exec2(\n  ran1 = rand(800)/100;  ran2 = rand(800)/100;  ran3 = rand(800)/100;\n  PosX = rand(5)-2;   PosY = rand(5)-2;   PosZ = rand(5)-2; \n\n//  PosX = 3.3; PosY = 2; PosZ = -2; ran1 = 0; ran2 = 0; ran3 = 0; //#\n\n  c1 = cos(ran1); c2 = cos(ran2); c3 = cos(ran3); \n  s1 = sin(ran1); s2 = sin(ran2); s3 = sin(ran3);\n\n  reg20 = c2*c1; reg21 = c2*s1; reg22 = -s2;\n  reg23 = s3*s2*c1 - c3*s1; reg24 = s3*s2*s1 + c3*c1; reg25 = s3*c2;\n  reg26 = c3*s2*c1 + s3*s1; reg27 = c3*s2*s1 - s3*c1; reg28 = c3*c2;\n\n  //***********BOT*************\n  //Coord. Trans. must exactly match def in warp S. !!!!\n  dist = 0.001;\n  while (exec2(\n    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;\n    uvx += PosX; uvy += PosY; uvz += PosZ;\n    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);\n    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);\n    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);\n    uvx0 = uvx+q8; uvy0 = uvy+q8; uvz0 = uvz+q8;\n    loop (7+1,\n      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));\n      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));\n      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));\n      slen = uvx*uvx + uvy*uvy + uvz*uvz;\n      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0; \n      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0; \n      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0; \n    );\n    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);\n    dist *= 1.05;\n  ,(dist < 0.6)*(len > 30)));\n,(dist < .06))); //end while","frame_eqs_eel":"fps_ = .0 * fps_ + 1*if(fps<=25,fps,25+.5*(fps-25)); \ndec_s = 1-.06*30/fps_;\nbeat = (time >  t0+3); t0 = if(beat, time, t0);\n\nspeed = min(0.2,dist_-.02) * (1+2*avg) *(1-slow*.0)*.7/q7; //#\nds = ds * dec_s + (1-dec_s)*speed*.25/fps_; \nRotZ = if (RotZ==0,beat*(rand(100)<20*travel)*(rand(10)/10-.3),\n                   bnot(beat*(rand(100)<30))*RotZ);\nslow = if (bnot(slow), beat*(rand(1000*avg)<6), bnot(beat*(rand(100)<50)));\nlook = if (bnot(look), beat*(rand(1000*speed)<12), bnot(beat*(rand(100)<50)));\n\n//Lamp View\nlx = if (beat,rand(150)/200+.15,lx);\nly = if (beat,rand(150)/200+.15,ly);\nlampx = lampx * dec_s + (1-dec_s)*if (look,lx,0.5);\nlampy = lampy * dec_s + (1-dec_s)*if (look,ly,0.5);\nq1 = lampx; q2 = lampy;\n\n//Position \nDirX= reg26; DirY= reg27; DirZ = reg28;\nPosX = PosX + ds*DirX ; PosY = PosY + ds*DirY; PosZ = PosZ + ds*DirZ; \nq4 = PosX; q5 = PosY; q6 = PosZ;\n\nangchg = (.2-dist_)*(dist_ < .2)*2;\ntravel = if (angchg > 0,0,travel+ds);\nv1 = v1 * dec_s + (1-dec_s)* RotZ * ds;\nv2 = v2 *dec_s + (1-dec_s)*angchg *xslope/fps_;\nv3 = v3 *dec_s + (1-dec_s)*(angchg *yslope/fps_ + 2*v1*sin(time*.1));\n//v2 = .008;\n//push old RotMat\nreg30 =reg20; reg31 =reg21; reg32 =reg22; \nreg33 =reg23; reg34 =reg24; reg35 =reg25; \nreg36 =reg26; reg37 =reg27; reg38 =reg28; \n\nn = 0; avg = 0;\nloop (5,\n  n = n+1;\n  //new Rot. Mat for infinitesimal angles\n  ran1 = rand(100)/100;\n  ran2 = rand(100)/200-.25;\n  tx = cos(n*1.57+ran2) * (n <= 4)*ran1; ty = sin(n*1.57+ran2) * (n <= 4)*ran1;\n  c1 = cos(v1); c2 = cos(v2+ty); c3 = cos(v3+tx); \n  s1 = sin(v1); s2 = sin(v2+ty); s3 = sin(v3+tx);\n  reg10 = c2*c1; reg11 = c2*s1; reg12 = -s2;\n  reg13 = s3*s2*c1 - c3*s1; reg14 = s3*s2*s1 + c3*c1; reg15 = s3*c2;\n  reg16 = c3*s2*c1 + s3*s1; reg17 = c3*s2*s1 - s3*c1; reg18 = c3*c2;\n\n  //pop old RotMat\n  reg20 =reg30; reg21 =reg31; reg22 =reg32; \n  reg23 =reg33; reg24 =reg34; reg25 =reg35; \n  reg26 =reg36; reg27 =reg37; reg28 =reg38; \n\n  //Multiply new RotMat by old one\n  q20 = reg10*reg20 + reg11*reg23 + reg12*reg26;\n  q21 = reg10*reg21 + reg11*reg24 + reg12*reg27;\n  q22 = reg10*reg22 + reg11*reg25 + reg12*reg28;\n  q23 = reg13*reg20 + reg14*reg23 + reg15*reg26;\n  q24 = reg13*reg21 + reg14*reg24 + reg15*reg27;\n  q25 = reg13*reg22 + reg14*reg25 + reg15*reg28;\n  q26 = reg16*reg20 + reg17*reg23 + reg18*reg26;\n  q27 = reg16*reg21 + reg17*reg24 + reg18*reg27;\n  q28 = reg16*reg22 + reg17*reg25 + reg18*reg28;\n\n  reg20 =q20; reg21 =q21; reg22 =q22;\n  reg23 =q23; reg24 =q24; reg25 =q25;\n  reg26 =q26; reg27 =q27; reg28 =q28;\n\n  //***********BOT*************\n  //Coord. Trans. must exactly match def in warp S. !!!!\n  dist = 0.002;\n  while (exec2(\n    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;\n    uvx += PosX; uvy += PosY; uvz += PosZ;\n    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);\n    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);\n    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);\n    uvx0 = uvx+q8; uvy0 = uvy+q8; uvz0 = uvz+q8;\n    loop (7+1,\n      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));\n      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));\n      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));\n      slen = uvx*uvx + uvy*uvy + uvz*uvz;\n      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0; \n      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0; \n      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0; \n    );\n    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);\n    dist *= 1.1;\n  ,(dist < 0.6)*(len > 30)));\n  megabuf(n) = megabuf(n)*dec_s + (1-dec_s)*dist; //stores the 4 trial points\n  avg = avg+abs(megabuf(n)/5);\n); //end loop 5\n\nn = 0; avg = 0; loop (5, n=n+1; avg = avg+abs(megabuf(n)/5));\n\nxslope = min(max(2/avg*(megabuf(1)-megabuf(3)),-3),3);\nyslope = min(max(2/avg*(megabuf(4)-megabuf(2)),-3),3);\nmonitor = avg;\ndist_ = dist_*dec_s + (1-dec_s)*dist;\n\nq10 = ds*q7; //compensation of lin. movement in GetDist and zoom uv\nq14 = 1*abs(ds) + 2*(abs(v1) + abs(v2) + abs(v3)) + 1.0/255 + start*.05; \n//q15 = sign(4*avg - 1)*pow(abs(4*avg - 1), 1.25); // 500*ds*q7; // + ( sign(v1)*sqrt(abs(v1)) + sign(v2)*sqrt(abs(v2)) + sign(v3)*sqrt(abs(v3)) )\nq15 = 4*avg - 1.4;\nq19 = .6 + .4*sin(time*.02+cran0*6); //brightness backgd\nstart = start * .9;\nq11 = v1; q12 = v2; q13 = v3;\n//forward comp. of Rotation\n\nmonitor = 3.333*q15;","pixel_eqs_eel":"warp = 0.0; zoom = 1; dx = -q12/q16*(1+0*pow(x-.5,2)); dy = q13/q16*(1+0*pow(y-.5,2)); rot =q11;","warp":"float sustain;\nfloat xlat_mutabledist;\nfloat xlat_mutablestruc;\nvec2 xlat_mutableuv1;\nvec3 xlat_mutableuv2;\n shader_body { \n  mat3 tmpvar_1;\n  tmpvar_1[uint(0)].x = q20;\n  tmpvar_1[uint(0)].y = q23;\n  tmpvar_1[uint(0)].z = q26;\n  tmpvar_1[1u].x = q21;\n  tmpvar_1[1u].y = q24;\n  tmpvar_1[1u].z = q27;\n  tmpvar_1[2u].x = q22;\n  tmpvar_1[2u].y = q25;\n  tmpvar_1[2u].z = q28;\n  vec3 tmpvar_2;\n  tmpvar_2.x = q4;\n  tmpvar_2.y = q5;\n  tmpvar_2.z = q6;\n  sustain = (0.92 + (q14 * 1.5));\n  vec2 uv_3;\n  vec3 ret_4;\n  uv_3 = (((uv - 0.5) * (1.0 - \n    (q10 / (1.0 - ((texture (sampler_blur1, uv).xyz * scale1) + bias1).z))\n  )) + 0.5);\n  xlat_mutableuv1 = (((uv_orig - 0.5) * aspect.xy) * q16);\n  vec4 tmpvar_5;\n  tmpvar_5 = fract((8.0 * texture (sampler_noise_lq, (uv_3 + rand_frame.yz))));\n  vec3 tmpvar_6;\n  tmpvar_6 = tmpvar_5.xyz;\n  if ((tmpvar_5.y > 0.1)) {\n    vec3 tmpvar_7;\n    tmpvar_7 = (tmpvar_5.xyz - vec3(0.5, 0.5, 0.5));\n    vec4 nb2_8;\n    vec4 nb_9;\n    vec2 tmpvar_10;\n    tmpvar_10 = (0.003472222 * floor((\n      (288.0 * texture (sampler_pc_main, (uv_3 - texsize.zw)).yz)\n     + vec2(0.5, 0.5))));\n    nb_9.x = (1.0 - (tmpvar_10.y + (0.03125 * \n      (tmpvar_10.x - 0.505)\n    )));\n    vec2 tmpvar_11;\n    tmpvar_11 = (0.003472222 * floor((\n      (288.0 * texture (sampler_pc_main, (uv_3 + (texsize.zw * vec2(1.0, -1.0)))).yz)\n     + vec2(0.5, 0.5))));\n    nb_9.y = (1.0 - (tmpvar_11.y + (0.03125 * \n      (tmpvar_11.x - 0.505)\n    )));\n    vec2 tmpvar_12;\n    tmpvar_12 = (0.003472222 * floor((\n      (288.0 * texture (sampler_pc_main, (uv_3 + texsize.zw)).yz)\n     + vec2(0.5, 0.5))));\n    nb_9.z = (1.0 - (tmpvar_12.y + (0.03125 * \n      (tmpvar_12.x - 0.505)\n    )));\n    vec2 tmpvar_13;\n    tmpvar_13 = (0.003472222 * floor((\n      (288.0 * texture (sampler_pc_main, (uv_3 + (texsize.zw * vec2(-1.0, 1.0)))).yz)\n     + vec2(0.5, 0.5))));\n    nb_9.w = (1.0 - (tmpvar_13.y + (0.03125 * \n      (tmpvar_13.x - 0.505)\n    )));\n    vec2 tmpvar_14;\n    tmpvar_14 = (0.003472222 * floor((\n      (288.0 * texture (sampler_pc_main, (uv_3 + (texsize.zw * vec2(0.0, -1.0)))).yz)\n     + vec2(0.5, 0.5))));\n    nb2_8.x = (1.0 - (tmpvar_14.y + (0.03125 * \n      (tmpvar_14.x - 0.505)\n    )));\n    vec2 tmpvar_15;\n    tmpvar_15 = (0.003472222 * floor((\n      (288.0 * texture (sampler_pc_main, (uv_3 + (texsize.zw * vec2(1.0, 0.0)))).yz)\n     + vec2(0.5, 0.5))));\n    nb2_8.y = (1.0 - (tmpvar_15.y + (0.03125 * \n      (tmpvar_15.x - 0.505)\n    )));\n    vec2 tmpvar_16;\n    tmpvar_16 = (0.003472222 * floor((\n      (288.0 * texture (sampler_pc_main, (uv_3 + (texsize.zw * vec2(0.0, 1.0)))).yz)\n     + vec2(0.5, 0.5))));\n    nb2_8.z = (1.0 - (tmpvar_16.y + (0.03125 * \n      (tmpvar_16.x - 0.505)\n    )));\n    vec2 tmpvar_17;\n    tmpvar_17 = (0.003472222 * floor((\n      (288.0 * texture (sampler_pc_main, (uv_3 + (texsize.zw * vec2(-1.0, 0.0)))).yz)\n     + vec2(0.5, 0.5))));\n    nb2_8.w = (1.0 - (tmpvar_17.y + (0.03125 * \n      (tmpvar_17.x - 0.505)\n    )));\n    vec4 tmpvar_18;\n    tmpvar_18 = min (nb_9, nb2_8);\n    nb_9.zw = tmpvar_18.zw;\n    nb_9.xy = min (tmpvar_18.xy, tmpvar_18.zw);\n    vec2 tmpvar_19;\n    tmpvar_19 = (0.003472222 * floor((\n      (288.0 * texture (sampler_pc_main, uv_3).yz)\n     + vec2(0.5, 0.5))));\n    vec2 tmpvar_20;\n    tmpvar_20.x = (tmpvar_7.x * abs(tmpvar_7.y));\n    tmpvar_20.y = (abs(tmpvar_7.x) * tmpvar_7.y);\n    xlat_mutabledist = (min (min (nb_9.x, nb_9.y), (1.0 - \n      (tmpvar_19.y + (0.03125 * (tmpvar_19.x - 0.505)))\n    )) + (0.01 * tmpvar_20)).x;\n  } else {\n    xlat_mutabledist = tmpvar_6.x;\n  };\n  vec2 tmpvar_21;\n  tmpvar_21 = (0.003472222 * floor((\n    (288.0 * texture (sampler_pc_main, uv_3).yz)\n   + vec2(0.5, 0.5))));\n  xlat_mutabledist = (min (xlat_mutabledist, (1.0 - \n    (tmpvar_21.y + (0.03125 * (tmpvar_21.x - 0.505)))\n  )) - (q10 * 0.8));\n  float tmpvar_22;\n  tmpvar_22 = (xlat_mutabledist + (pow (xlat_mutabledist, 3.0) * 0.2));\n  vec3 tmpvar_23;\n  tmpvar_23.xy = (xlat_mutableuv1 * tmpvar_22);\n  tmpvar_23.z = tmpvar_22;\n  xlat_mutableuv2 = (((tmpvar_23 / q7) * tmpvar_1) + tmpvar_2);\n  xlat_mutableuv2 = ((fract(\n    ((xlat_mutableuv2 / 8.0) + 0.5)\n  ) - 0.5) * 8.0);\n  vec4 tmpvar_24;\n  tmpvar_24.w = 0.0;\n  tmpvar_24.xyz = (vec3((texture (sampler_noisevol_lq, (xlat_mutableuv2 / 16.0)).x * 3.0)) * 80.0);\n  float tmpvar_25;\n  tmpvar_25 = sqrt(dot (tmpvar_24.xyz, tmpvar_24.xyz));\n  xlat_mutablestruc = (sqrt(dot (tmpvar_24.xyz, tmpvar_24.xyz)) / 80.0);\n  if (((tmpvar_25 < 80.0) && (xlat_mutabledist > 0.005))) {\n    ret_4.x = (((1.0 - sustain) * xlat_mutablestruc) + (sustain * texture (sampler_main, uv_3).x));\n    vec2 tmpvar_26;\n    tmpvar_26 = (0.003472222 * floor((\n      (288.0 * vec2((1.0 - xlat_mutabledist)))\n     + vec2(0.5, 0.5))));\n    vec2 tmpvar_27;\n    tmpvar_27.x = ((32.0 * (\n      (1.0 - xlat_mutabledist)\n     - tmpvar_26.x)) + 0.495);\n    tmpvar_27.y = tmpvar_26.x;\n    ret_4.yz = tmpvar_27;\n  } else {\n    vec3 tmpvar_28;\n    tmpvar_28.x = (0.5 * (sustain + 1.0));\n    tmpvar_28.y = sustain;\n    tmpvar_28.z = sustain;\n    vec3 tmpvar_29;\n    tmpvar_29.y = 0.0;\n    tmpvar_29.x = (1.0 - sustain);\n    tmpvar_29.z = (1.0 - sustain);\n    ret_4 = ((texture (sampler_fw_main, fract(uv_3)).xyz * tmpvar_28) - (0.01 * tmpvar_29));\n  };\n  vec4 tmpvar_30;\n  tmpvar_30.w = 1.0;\n  tmpvar_30.xyz = ret_4;\n  ret = tmpvar_30.xyz;\n }","comp":" shader_body { \n  vec2 uv_1;\n  vec2 dz_2;\n  vec3 ret2_3;\n  vec2 tmpvar_4;\n  tmpvar_4.x = (abs((uv.x - 0.5)) + 0.5);\n  tmpvar_4.y = uv.y;\n  uv_1 = (abs((tmpvar_4 - 0.5)) + 0.5);\n  ret2_3 = (texture (sampler_main, uv_1).xyz * (0.6 + (0.5 * \n    sin(((uv_1.x * 10.0) + (3.141593 * (q27 + q28))))\n  )));\n  vec3 tmpvar_5;\n  tmpvar_5 = mix (vec3(dot (texture (sampler_main, uv_1).xyz, vec3(0.32, 0.49, 0.29))), ret2_3, pow (ret2_3, vec3((0.15 + \n    (mid_att * 0.025)\n  ))));\n  ret2_3 = tmpvar_5;\n  vec2 tmpvar_6;\n  tmpvar_6 = (uv_1 - 0.5);\n  vec2 tmpvar_7;\n  vec2 tmpvar_8;\n  tmpvar_8 = (vec2(0.0005, 0.0) * q21);\n  tmpvar_7.x = (texture (sampler_main, (uv_1 + tmpvar_8)).x - texture (sampler_main, (uv_1 - tmpvar_8)).z);\n  vec2 tmpvar_9;\n  tmpvar_9 = (vec2(0.0, 0.0005) * q20);\n  tmpvar_7.y = (texture (sampler_main, (uv_1 + tmpvar_9)).x - texture (sampler_main, (uv_1 - tmpvar_9)).z);\n  dz_2 = (tmpvar_7 + ((texture (sampler_noise_hq, \n    (((tmpvar_6 / (\n      (((0.5 * q26) + (0.5 * q27)) / q16)\n     + rad)) * ((q23 * 0.1) + (q24 * 0.1))) + q31)\n  ) - 0.5) * 0.1).xy);\n  vec2 tmpvar_10;\n  tmpvar_10 = abs((tmpvar_6 - dz_2));\n  vec3 tmpvar_11;\n  float tmpvar_12;\n  tmpvar_12 = abs(q21);\n  float tmpvar_13;\n  tmpvar_13 = abs(q20);\n  tmpvar_11.x = (tmpvar_13 + tmpvar_12);\n  float tmpvar_14;\n  tmpvar_14 = abs(q22);\n  tmpvar_11.y = (tmpvar_12 + tmpvar_14);\n  tmpvar_11.z = (tmpvar_14 + tmpvar_13);\n  vec3 tmpvar_15;\n  tmpvar_15 = log(exp2((\n    (3.141593 * tmpvar_11)\n   * \n    ((0.7 * texture (sampler_main, uv_1).xyz) + ((pow (\n      abs((0.03333 / sqrt(dot (tmpvar_10, tmpvar_10))))\n    , 0.75) * tmpvar_5) * (5.0 + sqrt(mid))))\n  .yzx)));\n  vec3 tmpvar_16;\n  float tmpvar_17;\n  tmpvar_17 = abs(q24);\n  float tmpvar_18;\n  tmpvar_18 = abs(q23);\n  tmpvar_16.x = (tmpvar_18 + tmpvar_17);\n  float tmpvar_19;\n  tmpvar_19 = abs(q25);\n  tmpvar_16.y = (tmpvar_17 + tmpvar_19);\n  tmpvar_16.z = (tmpvar_19 + tmpvar_18);\n  vec2 tmpvar_20;\n  tmpvar_20 = fract(-(tmpvar_10));\n  vec2 tmpvar_21;\n  tmpvar_21 = fract(dz_2);\n  vec3 tmpvar_22;\n  tmpvar_22 = log(exp2((\n    (3.141593 * tmpvar_16)\n   * texture (sampler_main, \n    fract(-(abs((tmpvar_20 - \n      (2.0 * (dot (tmpvar_21, tmpvar_20) * tmpvar_21))\n    ))))\n  ).xyz)));\n  vec3 tmpvar_23;\n  float tmpvar_24;\n  tmpvar_24 = abs(q27);\n  float tmpvar_25;\n  tmpvar_25 = abs(q26);\n  tmpvar_23.x = (tmpvar_25 + tmpvar_24);\n  float tmpvar_26;\n  tmpvar_26 = abs(q28);\n  tmpvar_23.y = (tmpvar_24 + tmpvar_26);\n  tmpvar_23.z = (tmpvar_26 + tmpvar_25);\n  vec3 tmpvar_27;\n  tmpvar_27 = log(exp2((\n    (3.141593 * tmpvar_23)\n   * texture (sampler_main, \n    fract(-(tmpvar_10))\n  ).zxy)));\n  vec3 tmpvar_28;\n  tmpvar_28 = mix (tmpvar_15, tmpvar_22, (1.5708 - (1.570796 - \n    (sign(tmpvar_27) * (1.570796 - (sqrt(\n      (1.0 - abs(tmpvar_27))\n    ) * (1.570796 + \n      (abs(tmpvar_27) * (-0.2146018 + (abs(tmpvar_27) * (0.08656672 + \n        (abs(tmpvar_27) * -0.03102955)\n      ))))\n    ))))\n  )));\n  vec3 tmpvar_29;\n  tmpvar_29 = mix (tmpvar_15, tmpvar_22, tmpvar_27);\n  vec3 tmpvar_30;\n  tmpvar_30.z = 0.0;\n  tmpvar_30.xy = ((uv_1 - 0.5) + (0.4 * dot (texture (sampler_main, uv_1).xyz, vec3(0.32, 0.49, 0.29))));\n  float x_31;\n  x_31 = (fract((\n    (dot (tmpvar_30, vec3(0.32, 0.49, 0.29)) * 3.0)\n   - time)) - 0.5);\n  vec4 tmpvar_32;\n  tmpvar_32.w = 1.0;\n  tmpvar_32.xyz = ((0.637 * abs(\n    mix ((1.5708 - (1.570796 - (\n      sign(tmpvar_29)\n     * \n      (1.570796 - (sqrt((1.0 - \n        abs(tmpvar_29)\n      )) * (1.570796 + (\n        abs(tmpvar_29)\n       * \n        (-0.2146018 + (abs(tmpvar_29) * (0.08656672 + (\n          abs(tmpvar_29)\n         * -0.03102955))))\n      ))))\n    ))), (sign(tmpvar_28) * (1.570796 - (\n      sqrt((1.0 - abs(tmpvar_28)))\n     * \n      (1.570796 + (abs(tmpvar_28) * (-0.2146018 + (\n        abs(tmpvar_28)\n       * \n        (0.08656672 + (abs(tmpvar_28) * -0.03102955))\n      ))))\n    ))), ((3.0 * q15) * mix ((1.5708 - \n      (1.570796 - (sign(tmpvar_15) * (1.570796 - (\n        sqrt((1.0 - abs(tmpvar_15)))\n       * \n        (1.570796 + (abs(tmpvar_15) * (-0.2146018 + (\n          abs(tmpvar_15)\n         * \n          (0.08656672 + (abs(tmpvar_15) * -0.03102955))\n        ))))\n      ))))\n    ), (1.5708 - \n      (1.570796 - (sign(tmpvar_22) * (1.570796 - (\n        sqrt((1.0 - abs(tmpvar_22)))\n       * \n        (1.570796 + (abs(tmpvar_22) * (-0.2146018 + (\n          abs(tmpvar_22)\n         * \n          (0.08656672 + (abs(tmpvar_22) * -0.03102955))\n        ))))\n      ))))\n    ), (\n      sign(tmpvar_27)\n     * \n      (1.570796 - (sqrt((1.0 - \n        abs(tmpvar_27)\n      )) * (1.570796 + (\n        abs(tmpvar_27)\n       * \n        (-0.2146018 + (abs(tmpvar_27) * (0.08656672 + (\n          abs(tmpvar_27)\n         * -0.03102955))))\n      ))))\n    ))))\n  )) + (exp(\n    (-20.0 * sqrt((x_31 * x_31)))\n  ) * q10));\n  ret = tmpvar_32.xyz;\n }","warp_hlsl":"sampler sampler_pw_noise_mq;\nfloat limit, dist, struc, len; float2 uv0, uv1; float3 uv2; float4 box;\nstatic const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);\n\nstatic const float3 CamPos = float3(q4,q5,q6);\nstatic const float myzoom = q7,  res = 288, res2 = 32, tele = q16;\nstatic const float change = q14, sustain =.92 + change*1.5, ds = q10, tic8 = 1.0/255, ffac = q17;\n\nfloat2 fstep2 (float2 xy) {return 1.0/res*round(res*xy);}\n\nfloat GetDist(float2 uvi) {float2 tmp; tmp = fstep2(tex2D (sampler_pc_main, uvi).gb); \n  return 1-(tmp.y + 1.0/res2*(tmp.x-.505));}\n\nfloat2 PutDist(float x) {float tmp; tmp = fstep2(1-x);\n  return (float2(res2*((1-x)-tmp)+.495,tmp));}\n\nfloat MinDist (float2 uvi) \n{\n   float tmp; float4 nb; float4 nb2; float2 pix;\n   pix = texsize.zw*(1.0+length(uvi-0.5)*.0);   \n   nb.x = GetDist(uvi+pix*float2(-1,-1));   nb.y = GetDist(uvi+pix*float2(1,-1));\n   nb.z = GetDist(uvi+pix*float2(1,1));     nb.w = GetDist(uvi+pix*float2(-1,1));         \n   nb2.x = GetDist(uvi+pix*float2(0,-1));   nb2.y = GetDist(uvi+pix*float2(1,0));          \n   nb2.z = GetDist(uvi+pix*float2(0,1));    nb2.w = GetDist(uvi+pix*float2(-1,0));\n   //Eo.S. more efficient usage of min to get min value of all 8 GetDist() calls, removes 11ALU\n   nb = min( nb, nb2 );\n   nb.xy = min( nb.xy, nb.zw );\n   tmp =min( nb.x, nb.y );\n   return min(tmp, GetDist(uvi));\n}\n\nfloat3 Get1 (float2 uvi) {return lerp (GetPixel(uvi), GetBlur1(uvi),0);} \n\n\n\n//----------------------------------------------------------------------------------------------\nfloat4 mbox (float3 uvi) {float3 zz, zz0; float tmp;\n  zz0 = uvi; zz = uvi * float3 (1,1,1); \n\n  for (int n = 0; n <= 0; n++) \n  {\n     zz = (tex3D (sampler_noisevol_lq,(zz/16 ))).x*3;\n//     zz = length(1+sin(zz.zx*4+1))*8 * cos(zz.y) ;\n  }\n   \nreturn float4(zz*limit,0);}\n//----------------------------------------------------------------------------------------------\n\n\n\nshader_body {uv0 = uv_orig;\nuv = (uv-.5)*(1-ds/(1-GetBlur1(uv).b)) + .5;\nuv1 = (uv0-.5)*aspect.xy*tele;\nfloat3 noise = frac(8*tex2D (sampler_noise_lq,uv+rand_frame.yz)); \n   if (noise.g > .1) \n   {\n       float3 noiseBiased = noise - float3( 0.5, 0.5, 0.5 );\n      //Eo.S. combine the subtraction on noise to a single float3 \n      //to ensure compiler does the subtraction in a single ALU\n      dist = MinDist( (noiseBiased.zy) * 0.000 + uv ) +  0.01 * float2((noiseBiased.x) * abs(noiseBiased.y), abs(noiseBiased.x) * (noiseBiased.y));\n   }    \n   else {dist = noise.r;}\n dist = min(dist,GetDist(uv)) - ds*.8;\n\nlimit = 80;\nfloat tdist = dist + pow(dist,3)*.2;\nuv2 = mul(float3(uv1*tdist,tdist-.0)/myzoom,RotMat)+CamPos;\nuv2 = (frac(uv2/8.0+.5)-.5)*8.0;\nbox = mbox (uv2);\nlen = (length(box.xyz));\nstruc = length(box.xyz)/limit;\n\nif ((len < limit) && (dist > 0.005)){\n ret.r = (1-sustain)*struc+sustain*(Get1(uv).r); ret.gb=  PutDist(dist); } \n else {ret = tex2D(sampler_fw_main,frac(uv))*float3(.5*(sustain+1), (sustain), sustain) - .01*float3((1 - sustain), 0, (1-sustain));} \n//ret.r = struc;\n}","comp_hlsl":"shader_body\n{\nfloat tele = q16;\nfloat2 uv0 = uv;\nuv = float2(abs(uv.x-.5)+.5,uv.y);\nuv = abs(uv-.5)+.5;\nfloat3   ret2 = tex2D(sampler_main,uv).xyz;\n\nfloat blur1 = lum(GetPixel(uv));\nret2 *= (.6 + .5*sin(uv.x*10 + 3.14159265*(q27 + q28)));\nret2= lerp(blur1,ret2,pow(ret2,.15+(mid_att)*.025));\n\nfloat2 uv1 = uv-.5;\nfloat3 ret1 = tex2D(sampler_main, uv) ;\n\nconst float2 hor = float2 (.0005,0);\nconst float2 ver = float2 (0,.0005);\n    \nfloat dx = GetPixel (uv+hor*q21).r - GetPixel (uv-hor*q21).b;\nfloat dy = GetPixel (uv+ver*q20).r - GetPixel (uv-ver*q20).b;    \nfloat2 dz = float2 (dx,dy);\n \ndz += (tex2D (sampler_noise_hq,uv1/((.5*q26 + .5*q27)/tele+rad)*(q23*.1 + q24*.1)+q31)-.5)*(.1);\n\nuv1 = abs(uv1 - dz);\nfloat dots = pow(abs(.03333/length(uv1)), .75);\n\nret1 = .7*ret1+dots*ret2*(5+sqrt(mid)*1);\n\nfloat3 ret3_1 = log(exp2(3.14159265*float3((abs(q20) + abs(q21)), (abs(q21) + abs(q22)), (abs(q22) + abs(q20)))*ret1.gbr));\nfloat3 ret3_2 = log(exp2(3.14159265*float3((abs(q23) + abs(q24)), (abs(q24) + abs(q25)), (abs(q25) + abs(q23)))*GetPixel(frac(-abs( reflect( frac(-uv1), frac(dz) ) ) )).rgb));\nfloat3 ret3_3 = log(exp2(3.14159265*float3((abs(q26) + abs(q27)), (abs(q27) + abs(q28)), (abs(q28) + abs(q26)))*GetPixel( frac(-uv1) ).brg));\n\nfloat3 ret3 = lerp(ret3_1, ret3_2, 1.5708 - acos(ret3_3) );\n\nfloat3 ret4 = lerp(ret3_1, ret3_2, ret3_3);\n\nfloat3 ret5 = lerp(1.5708 - acos(ret3_1), 1.5708 - acos(ret3_2), asin(ret3_3));\n\nret3 = abs(lerp((1.5708 - acos(ret4)), (asin(ret3)), 3*q15*(ret5) ));\n\nuv1 = uv-.5 + .4*lum(GetPixel(uv));\nret = .637*ret3 + exp(-20*(length(frac(lum(uv1)*3-time)-.5)))*q10 ;\n//ret = ret5;\n}"}