{"version":2,"baseVals":{"rating":5,"gammaadj":1.9,"echo_zoom":1.16936,"wave_mode":5,"additivewave":1,"wave_a":0,"wave_scale":0.899719,"wave_smoothing":0.63,"wave_mystery":1,"modwavealphastart":2,"modwavealphaend":2,"warpscale":2.593743,"zoom":1.00496,"warp":0.278033,"sx":0.999666,"sy":0.9999,"wave_r":0.65,"wave_g":0.65,"wave_b":0.65,"mv_x":0,"mv_y":48,"mv_dx":-0.941273,"mv_dy":0.426319,"mv_l":5,"mv_r":0.315997,"mv_g":0.078173,"mv_b":0.941976,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.du=0;a.q1=0;a.rg=0;a.q9=0;a.mult=0;a.ang2=0;a.dv=0;a.q4=0;a.q2=0;a.dist=0;a.q3=0;a.rg=0;","frame_eqs_str":"a.wave_r+=.35*(.6*Math.sin(.98*a.time)+.4*Math.sin(1.047*a.time));a.wave_g+=.35*(.6*Math.sin(.835*a.time)+.4*Math.sin(1.081*a.time));a.wave_b+=.35*(.6*Math.sin(.814*a.time)+.4*Math.sin(1.011*a.time));a.q1=2*a.cx-1+.52*(.6*Math.sin(.374*a.time)+.4*Math.sin(.294*a.time));a.q2=2*a.cy-1+.52*(.6*Math.sin(.393*a.time)+.4*Math.sin(.223*a.time));a.q3=2*a.cx-1+.52*(.6*Math.sin(.174*-a.time)+.4*Math.sin(.364*a.time));a.q4=2*a.cy-1+.52*(.6*Math.sin(.234*a.time)+.4*Math.sin(.271*-a.time));\na.decay-=.01*equal(mod(a.frame,5),0);a.rg=Math.max(.95*a.rg,.3+.5*Math.min(2,1.3*Math.max(0,a.mid_att-1)));a.q9=a.rg;","pixel_eqs_str":"a.du=2*a.x-1-a.q1;a.dv=2*a.y-1-a.q2;a.dist=sqrt(a.du*a.du+a.dv*a.dv);a.ang2=Math.atan2(a.du,a.dv);a.mult=div(.008,a.dist+.4);a.dx=a.mult*Math.sin(a.ang2-1.5);a.dy=a.mult*Math.cos(a.ang2-1.5);a.du=2*a.x-1-a.q3;a.dv=2*a.y-1-a.q4;a.dist=sqrt(a.du*a.du+a.dv*a.dv);a.ang2=Math.atan2(a.du,a.dv);a.mult=div(.008,a.dist+.4);a.dx+=a.mult*Math.sin(a.ang2+1.5);a.dy+=a.mult*Math.cos(a.ang2+1.5);","init_eqs_eel":"rg = 0;","frame_eqs_eel":"wave_r = wave_r + 0.350*( 0.60*sin(0.980*time) + 0.40*sin(1.047*time) );\nwave_g = wave_g + 0.350*( 0.60*sin(0.835*time) + 0.40*sin(1.081*time) );\nwave_b = wave_b + 0.350*( 0.60*sin(0.814*time) + 0.40*sin(1.011*time) );\nq1 = (cx*2-1) + 0.52*( 0.60*sin(0.374*time) + 0.40*sin(0.294*time) );\nq2 = (cy*2-1) + 0.52*( 0.60*sin(0.393*time) + 0.40*sin(0.223*time) );\nq3 = (cx*2-1) + 0.52*( 0.60*sin(0.174*-time) + 0.40*sin(0.364*time) );\nq4 = (cy*2-1) + 0.52*( 0.60*sin(0.234*time) + 0.40*sin(0.271*-time) );\ndecay = decay - 0.01*equal(frame%5,0);\n\n// this is a great way to respond to beats:\n// once you get one, let it decay at a constant rate!!\nrg = max(rg*0.95, 0.3 + 0.5*min(2,max(0,mid_att-1)*1.3));\nq9 = rg;","pixel_eqs_eel":"du = x*2-1 - q1;\ndv = y*2-1 - q2;\ndist = sqrt(du*du+dv*dv);\nang2 = atan2(du,dv);\nmult = 0.008/(dist+0.4);\ndx = mult*sin(ang2-1.5);\ndy = mult*cos(ang2-1.5);\ndu = x*2-1 - q3;\ndv = y*2-1 - q4;\ndist = sqrt(du*du+dv*dv);\nang2 = atan2(du,dv);\nmult = 0.008/(dist+0.4);\ndx = dx + mult*sin(ang2+1.5);\ndy = dy + mult*cos(ang2+1.5);","warp":" shader_body { \n  vec3 ret_1;\n  vec2 tmpvar_2;\n  tmpvar_2 = mix (uv_orig, uv, vec2(q9));\n  ret_1 = texture (sampler_main, tmpvar_2).xyz;\n  ret_1 = (ret_1 + ((ret_1 - \n    ((texture (sampler_blur1, tmpvar_2).xyz * scale1) + bias1)\n  ) * 0.3));\n  ret_1 = (ret_1 * 0.9);\n  ret_1 = (ret_1 + ((\n    ((texture (sampler_noise_lq, ((\n      (uv_orig * texsize.xy)\n     * \n      (texsize_noise_lq.zw * 0.4)\n    ) + rand_frame.xy)).xyz - 0.5) / 256.0)\n   * 122.0) * clamp (\n    (treb_att - 1.0)\n  , 0.0, 1.0)));\n  ret_1 = mix (ret_1, vec3(dot (ret_1, vec3(0.32, 0.49, 0.29))), vec3(0.2, 0.2, 0.2));\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = ret_1;\n  ret = tmpvar_3.xyz;\n }","comp":" shader_body { \n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  tmpvar_1.xyz = (0.3 + (0.4 * vec3(dot (texture (sampler_main, uv).xyz, vec3(0.32, 0.49, 0.29)))));\n  ret = tmpvar_1.xyz;\n }","warp_hlsl":"shader_body\n{\n    // q9 stores a super smooth bass-driven control signal from the per-frame equations\n    // here we lerp between unwarped & warped UV's based on it, \n    // effectively throttling the amount of motion!\n    float t = q9;\n    uv = lerp(uv_orig, uv, t);\n\n    // sample previous frame\n    ret.xyz = tex2D( sampler_main, uv ).xyz;\n\n      // take the difference between the crisp and blurred images,\n      // then add it back into the image.  Creates spots and stripes over time.\n      ret.xyz += (ret - GetBlur1(uv))*0.3;\n      ret.xyz *= 0.9;\n\n      // add noise:\n      float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw * 0.4 + rand_frame.xy;\n      ret.xyz += (tex2D(sampler_noise_lq, dither_uv).xyz-0.5)/256.0 * 122 * saturate(treb_att-1);\n\n      // desaturate over time, to keep the globs white\n      ret.xyz = lerp(ret.xyz, lum(ret.xyz), 0.2);\n}","comp_hlsl":"shader_body\n{\n    ret = tex2D(sampler_main, uv).xyz;\n    ret = lum(ret);\n    //ret = lerp(float3(0.3,0.5,0.2)*0.9, 1.05*float3(0.4,0.6,0.3), ret.x);\n    ret = 0.3 + 0.4*ret;\n    ret *= 1.00;    \n}"}