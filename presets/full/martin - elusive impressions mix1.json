{"version":2,"baseVals":{"rating":4,"gammaadj":1.98,"decay":0.5,"echo_zoom":0.952,"echo_alpha":0.5,"echo_orient":3,"wave_mode":4,"additivewave":1,"modwavealphabyvolume":1,"wave_brighten":0,"darken":1,"wave_a":0.002,"wave_scale":0.079,"wave_smoothing":0,"wave_mystery":-0.22,"modwavealphastart":0.81,"modwavealphaend":1.4,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0.6,"wave_g":0.5,"wave_b":0,"ob_size":0,"ob_a":1,"ib_size":0.26,"mv_x":64,"mv_y":48,"mv_l":1.85,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"enabled":1,"sides":16,"textured":1,"num_inst":6,"x":0.73,"rad":0.29466,"tex_zoom":1.8751,"r":0.7,"g":0.7,"b":1,"g2":0,"border_b":0,"border_a":0},"init_eqs_str":"a.trig=0;a.q25=0;a.x0=0;a.y0=0;","frame_eqs_str":"a.trig=a.q25;a.a=a.trig*Math.min(a.bass+a.treb-.5,1);a.a2=0*a.trig;a.x0=a.x0*bnot(a.trig)+div(a.trig*rand(100),100);a.y0=a.y0*bnot(a.trig)+div(a.trig*rand(100),100);a.tex_ang=div(rand(20),3);a.rad=.1+div(rand(8),16);a.x=a.x0;a.y=a.y0;a.r=.7+.3*Math.sin(div(a.time,12));a.b=.7+.3*Math.sin(div(a.time,15));a.g=.7+.3*Math.sin(div(a.time,8));a.r2=a.r;a.b2=a.b;a.g2=a.g;","init_eqs_eel":"","frame_eqs_eel":"trig = q25;\na = trig*min(bass+treb-.5,1); a2 = trig*0;\n\nx0 = x0 *bnot(trig) + trig*rand(100)/100;\ny0 = y0 *bnot(trig) + trig*rand(100)/100;\n//x0 = time-int(time);\n//y0 = time-int(time);\n\ntex_ang = rand(20)/3;\nrad = .1+rand(8)/16;\n\nx = x0; y = y0;\nr = .7+.3*sin(time/12);\nb = .7+.3*sin(time/15);\ng = .7+.3*sin(time/8);\nr2 = r; b2 = b; g2 = g;"},{"baseVals":{"sides":32,"num_inst":37,"rad":0.0363,"ang":0.81681,"tex_ang":0.37699,"tex_zoom":1.02841,"g":1,"b":1,"a":0.05,"r2":1,"b2":1,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"k1 = instance/num_inst*6.28;\ntmp = q17/32+time*.1;\ntrel = tmp-int(tmp);\n\nyes = above(sin(time/9.5),0);\n\nbright = 6*q2*q2*yes+.1*min(q8,1);\nborder_a = bright;\n\ntmp = 2*sin(time/12)-1;\na = .5*yes*pow(2,-18*abs(k1-6.28*trel)) * above(tmp,0)*tmp*tmp;\nampl = .1;\nrad = .02+.0*sin(k1*4+time);\nx = .5 +q15*ampl *cos(k1+q17); y = .5+ q16*ampl*sin(k1+q17);\n\nr0 = sin(time/7);\ng0 = sin(time/5);\nb0 = sin(time/9);\n\nborder_r = .8 + .2*r0;\nborder_g = .8 + .2*g0;\nborder_b = .8 + .2*b0;\n\n\n//r = .5*r0; g = .5*g0; b = 0.5*b0; ;\n\n//r2 = 0; g2 = 0; b2 = 0;\n\na2 = 0;\n","init_eqs_eel":"","frame_eqs_eel":"k1 = instance/num_inst*6.28;\ntmp = q17/32+time*.1;\ntrel = tmp-int(tmp);\n\nyes = above(sin(time/9.5),0);\n\nbright = 6*q2*q2*yes+.1*min(q8,1);\nborder_a = bright;\n\ntmp = 2*sin(time/12)-1;\na = .5*yes*pow(2,-18*abs(k1-6.28*trel)) * above(tmp,0)*tmp*tmp;\nampl = .1;\nrad = .02+.0*sin(k1*4+time);\nx = .5 +q15*ampl *cos(k1+q17); y = .5+ q16*ampl*sin(k1+q17);\n\nr0 = sin(time/7);\ng0 = sin(time/5);\nb0 = sin(time/9);\n\nborder_r = .8 + .2*r0;\nborder_g = .8 + .2*g0;\nborder_b = .8 + .2*b0;\n\n\n//r = .5*r0; g = .5*g0; b = 0.5*b0; ;\n\n//r2 = 0; g2 = 0; b2 = 0;\n\na2 = 0;\n"},{"baseVals":{"sides":26,"num_inst":2,"rad":0.15038,"tex_ang":0.62832,"tex_zoom":1.35189,"g":1,"b":1,"a":0.5,"r2":1,"b2":1,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"a = min(q26,1);;","init_eqs_eel":"","frame_eqs_eel":"a = min(q26,1);;"},{"baseVals":{"sides":24,"textured":1,"x":0.7,"y":0.51,"rad":0.19869,"tex_ang":1.00531,"tex_zoom":0.49981,"g":1,"b":0.99,"a":0,"g2":0,"a2":1,"border_r":0,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"samples":182,"sep":60,"usedots":1,"scaling":0.14868,"smoothing":0,"a":0.4,"enabled":0},"init_eqs_str":"","frame_eqs_str":"t1 = 1; t2 = 0;","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"t1 = 1; t2 = 0;","point_eqs_eel":""},{"baseVals":{"samples":100,"usedots":1,"thick":1,"scaling":0.89152,"smoothing":0,"a":0.1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"thick":1,"scaling":0.89152,"smoothing":0.82,"a":0.1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"usedots":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.sw2=0;a.index2=0;a.q25=0;a.index=0;a.q12=0;a.q18=0;a.q22=0;a.q21=0;a.q13=0;a.sw3=0;a.q15=0;a.q6=0;a.dec_med=0;a.q5=0;a.mindev=0;a.trel=0;a.q9=0;a.t0a=0;a.itrel=0;a.my=0;a.is_beat=0;a.q31=0;a.q24=0;a.dec_slow=0;a.q11=0;a.q10=0;a.sdev=0;a.ma=0;a.q4=0;a.spb=0;a.spb_=0;a.q16=0;a.q26=0;a.avg=0;a.mx=0;a.q19=0;a.beat=0;a.q17=0;a.trel2=0;a.peak=0;a.jmp=0;a.itrel_=0;a.q2=0;a.q27=0;a.q14=0;a.sw1=0;a.tmp=0;a.q3=0;a.t0=0;a.q7=0;a.q28=0;a.q30=0;a.q20=0;a.q8=0;a.avg=1;a.index=rand(8);a.index2=\nrand(8);a.ran=1;a.spb_=.3;a.sdev=.1;a.trel2=div(rand(100),100);","frame_eqs_str":"a.dec_med=pow(.9,div(30,a.fps));a.dec_slow=pow(.98,div(30,a.fps));a.beat=a.bass+a.mid+a.treb;a.avg=a.avg*a.dec_slow+a.beat*(1-a.dec_slow);a.is_beat=above(a.beat,.2+a.avg+a.peak)*above(a.time,a.t0+.1);a.t0=a.is_beat*a.time+(1-a.is_beat)*a.t0;a.peak=a.is_beat*a.beat+(1-a.is_beat)*a.peak*a.dec_med;a.index=mod(a.index+a.is_beat,16);a.index2=mod(a.index2+a.is_beat*bnot(a.index),12);a.spb=Math.min(a.t0-a.t0a+.01,2);a.t0a=a.t0;a.spb_=.00001<Math.abs(a.is_beat)?.9*a.spb_+.1*a.spb:a.spb_;\na.mindev=Math.min(Math.min(Math.abs(a.spb-a.spb_),Math.abs(2*a.spb-a.spb_)),Math.abs(a.spb-2*a.spb_));a.sdev=.00001<Math.abs(a.is_beat)?.9*a.sdev+.1*pow(a.mindev+.02,2):a.sdev;a.q20=a.avg;a.q21=a.beat;a.q22=a.peak+.1;a.q24=a.is_beat;a.q27=a.index;a.q28=a.index2;a.trel+=4*div(div(1,a.fps),a.spb_);a.itrel=Math.floor(a.trel);a.q25=above(a.itrel,a.itrel_);a.q30=mod(a.itrel,2);a.itrel_=a.itrel;a.q31=div(a.trel,8)-Math.floor(div(a.trel,8));a.ma+=div(a.peak,a.fps);a.mx=a.mx*a.dec_med+(1-a.dec_med)*Math.cos(a.ma);\na.my=a.my*a.dec_med+(1-a.dec_med)*Math.sin(a.ma+div(a.trel,16));a.q15=a.mx;a.q16=a.my;a.q17=a.ma;a.sw1=.00001<Math.abs(a.sw1)?bnot(a.q24*bnot(rand(10))):a.q24*bnot(rand(20));a.sw2=.00001<Math.abs(a.sw2)?bnot(a.q24*bnot(rand(40))):a.q24*bnot(rand(80));a.sw3=.00001<Math.abs(a.sw3)?bnot(a.q24*bnot(rand(10))):a.q24*bnot(rand(100+1E4*a.sdev));a.q6=Math.sin(div(a.time,15))*Math.sin(div(a.time,27))*.1;a.q10=Math.sin(div(a.time,8));a.q10=a.q10*a.q10*.1;a.q11=1.5+Math.sin(div(a.time,7.8));a.q12=.00001<Math.abs(below(a.sdev,\n.02)*bnot(a.q8))?a.q25:1;a.q13=.5+Math.sin(div(a.time,17));a.q19=.4*Math.sin(div(a.time,5.3));a.q3=a.sw1;a.q4=div(.02,a.sdev);a.q5=.4*Math.max(Math.min(4*Math.sin(div(a.trel,64))-3,1),0);a.q7=below(a.sdev,.004)*mod(a.index2,2);a.q2=Math.abs(a.q19)*sqrt(a.q15*a.q15+a.q16*a.q16);a.trel2+=div(.003*a.q22*a.q22,a.fps);a.tmp=Math.sin(a.trel2);a.tmp=10*a.tmp-9;a.q8=a.tmp*above(a.tmp,0)*(div(4,Math.max(a.q22-4,.2))+4);a.q26=above(a.q22,16)*(a.q22-16)*2;a.tmp=div(a.index2,6);a.q14=6*Math.abs(a.tmp-Math.floor(a.tmp)-\n.5)+1;a.tmp=Math.sin(3.14*div(a.trel,4));a.jmp+=8*div(above(a.tmp,.5)*a.tmp,a.fps)*a.sw2;a.q9=a.jmp*equal(a.q14,1)*below(a.sdev,.04)+a.time*above(Math.sin(div(a.q17,23)),.9);a.q18=div(a.tmp*a.tmp,2)*bnot(a.q8)*a.sw3;a.monitor=a.avg;a.rot=.003;a.warp=0;","pixel_eqs_str":"a.zoom=1+.1*(a.q20-1.5)*a.rad;","init_eqs_eel":"avg = 1;\nindex = rand(8);\nindex2 = rand(8);\nran = 1;\nspb_=.3;\nsdev = .1;\ntrel2 = rand (100)/100;","frame_eqs_eel":"dec_med = pow (0.9, 30/fps); dec_slow = pow (0.98, 30/fps);\nbeat = bass+mid+treb;\navg = avg*dec_slow + beat*(1-dec_slow);\nis_beat = above(beat, .2+avg+peak) * above (time, t0+.1);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\nindex = (index + is_beat) %16;\nindex2 = (index2 + is_beat*bnot(index))%12;\n\nspb = min(t0-t0a + .01,2); t0a = t0;\nspb_ = if(is_beat,spb_ *.9 +.1*spb, spb_);\nmindev = min(min(abs(spb-spb_),abs(spb*2-spb_)),abs(spb-spb_*2));\nsdev = if(is_beat,sdev * .9 + .1*pow(mindev+.02,2),sdev);\n\nq20 = avg; q21 = beat;\nq22 = peak+.1; \nq24 = is_beat;\nq27 = index; q28 = index2;\n\ntrel = trel + 1/fps/spb_*4; itrel = int(trel);\nq25 =  above(itrel, itrel_);\nq30 = itrel%2;\nitrel_ = itrel;\nq31 = trel/8-int(trel/8);\n\nma = ma + peak/fps ;\nmx=mx*dec_med+(1-dec_med)*cos(ma);\nmy=my*dec_med+(1-dec_med)*sin(ma+trel/16);\nq15 = mx ; q16 = my ; q17 = ma;\n\n//first par: off; second: on\nsw1 = if(sw1,bnot(q24*bnot(rand(10))),q24*bnot(rand(20)));\nsw2 = if(sw2,bnot(q24*bnot(rand(40))),q24*bnot(rand(80)));\nsw3 = if(sw3,bnot(q24*bnot(rand(10))),q24*bnot(rand(100+10000*sdev)));\n\n//********* variation parameters warp shader\nq6 = sin(time/15)*sin(time/27)*.1; //zz weighting\nq10 = sin(time/8); //ring\nq10 = q10*q10*.1; \nq11 = 1.5+sin(time/7.8); //zoom uv2\nq12 = if(below(sdev,.02)*bnot(q8),q25,1); //go\nq13 = .5+sin(time/17); //pow noise \nq19 = sin(time/5.3)*.4; //sunpos \n\n//********* variation parameters comp shader\nq3 = sw1;//mirror \nq4 = .02/sdev; //unused ###\nq5 = max(min(4*sin(trel/64)-3,1),0)*.4; //water\nq7 = below(sdev,.004)*(index2%2); //flash\nq2 = abs(q19)*sqrt(q15*q15+q16*q16); //avoid black - frame eq2\n\ntrel2 = trel2+.003*q22*q22/fps;\ntmp = sin(trel2);\ntmp = 10*tmp-9;\nq8 =  tmp*above(tmp,0)*(4/max(q22-4,0.2)+4); // dyn zoom\nq26 = above(q22,16)*(q22-16)*2; //# ok???\n\ntmp = index2/6;\nq14 = abs((tmp-int(tmp))-.5)*6+1; //ang multi ####\n\ntmp =sin(trel/4*3.14); //sym rot\njmp = jmp + above(tmp,.5)*tmp/fps*8*sw2;\nq9 = jmp*equal(q14,1)*below(sdev,0.04)+time*above(sin(q17/23),.9);\nq18 = tmp*tmp/2 * bnot(q8) * sw3; //waber\n\nmonitor = avg;\nrot = .003;\nwarp = .0; \n//zoom = 1+(avg-log(sdev))/200+min(q26,1);\n//dx = tmp*.01*above(abs(tmp),.95);","pixel_eqs_eel":"zoom = 1.0+(q20-1.5)*.1*rad;","warp":"float xlat_mutablenoise;\nvec3 xlat_mutableret1;\nvec2 xlat_mutableuv1;\nvec2 xlat_mutableuv2;\nfloat xlat_mutablezv;\n shader_body { \n  vec2 tmpvar_1;\n  tmpvar_1.x = q15;\n  tmpvar_1.y = q16;\n  xlat_mutableuv1 = (uv - 0.5);\n  vec2 tmpvar_2;\n  tmpvar_2.x = (texture (sampler_main, (uv + vec2(0.002, 0.0))) - texture (sampler_main, (uv - vec2(0.002, 0.0)))).z;\n  tmpvar_2.y = (texture (sampler_main, (uv + vec2(0.0, 0.002))) - texture (sampler_main, (uv - vec2(0.0, 0.002)))).z;\n  xlat_mutablezv = (time * 0.1);\n  xlat_mutableuv2 = ((q11 * xlat_mutableuv1) + (0.04 * time));\n  vec3 tmpvar_3;\n  tmpvar_3.xy = xlat_mutableuv2;\n  tmpvar_3.z = xlat_mutablezv;\n  vec3 tmpvar_4;\n  tmpvar_4.xy = (xlat_mutableuv2 * vec2(2.0, 2.0));\n  tmpvar_4.z = (xlat_mutablezv * 2.0);\n  vec3 tmpvar_5;\n  tmpvar_5.xy = (xlat_mutableuv2 * vec2(4.0, 4.0));\n  tmpvar_5.z = (xlat_mutablezv * 3.0);\n  vec3 tmpvar_6;\n  tmpvar_6.xy = (xlat_mutableuv2 * vec2(8.0, 8.0));\n  tmpvar_6.z = (xlat_mutablezv * 7.0);\n  xlat_mutablenoise = (((\n    (texture (sampler_noisevol_hq, tmpvar_3).z + (texture (sampler_noisevol_hq, tmpvar_4).z / 2.0))\n   + \n    (texture (sampler_noisevol_hq, tmpvar_5).z / 4.0)\n  ) + (texture (sampler_noisevol_hq, tmpvar_6).z / 8.0)) - 0.5);\n  float tmpvar_7;\n  tmpvar_7 = pow (xlat_mutablenoise, q13);\n  xlat_mutablenoise = tmpvar_7;\n  xlat_mutableuv2 = ((xlat_mutableuv1 * (1.0 + \n    (0.5 * q2)\n  )) + (tmpvar_7 * 0.1));\n  float tmpvar_8;\n  tmpvar_8 = ((texture (sampler_blur1, vec2(0.5, 0.5)).xyz * scale1) + bias1).x;\n  vec2 x_9;\n  x_9 = (xlat_mutableuv2 - (tmpvar_1 * q19));\n  vec2 x_10;\n  x_10 = (xlat_mutableuv1 - (0.03 / q22));\n  xlat_mutableret1 = (((0.002 / \n    (sqrt(dot (x_9, x_9)) - (q10 / q22))\n  ) * (0.5 + \n    normalize(roam_cos)\n  ).xyz) + ((0.002 / \n    sqrt(dot (x_10, x_10))\n  ) * clamp (\n    (1.0 - (8.0 * tmpvar_8))\n  , 0.0, 1.0)));\n  xlat_mutableret1 = (((xlat_mutableret1 + \n    (texture (sampler_main, ((xlat_mutableuv1 + 0.5) + (q6 * tmpvar_2))) * 0.96)\n  .xyz) - 0.02) - (tmpvar_8 * 0.1));\n  vec4 tmpvar_11;\n  tmpvar_11.w = 1.0;\n  tmpvar_11.xyz = ((q12 * xlat_mutableret1) + ((1.0 - q12) * texture (sampler_main, uv).xyz));\n  ret = tmpvar_11.xyz;\n }","comp":"float xlat_mutableang2;\nfloat xlat_mutabledist;\nfloat xlat_mutableinten;\nvec3 xlat_mutableret1;\nfloat xlat_mutablesmask;\nfloat xlat_mutablestars;\nvec2 xlat_mutableuv0;\nvec2 xlat_mutableuv2;\nvec2 xlat_mutableuv4;\n shader_body { \n  n = 1;\n  anz = 4;\n  vec2 uv_1;\n  vec3 ret_3;\n  xlat_mutableuv0 = uv;\n  uv_1 = ((uv - 0.5) * aspect.xy);\n  vec2 tmpvar_4;\n  tmpvar_4.x = ((0.1 / rad) + (time * -0.05));\n  tmpvar_4.y = 0.0;\n  uv_1 = (uv_1 / (1.0 + (q8 * \n    sqrt(dot (uv_1, uv_1))\n  )));\n  uv_1 = (uv_1 * (1.0 - (\n    (float(mod (q28, 2.0)))\n   / 4.0)));\n  uv_1 = (uv_1 * (1.0 + (\n    ((texture (sampler_noise_mq, tmpvar_4) - 0.5) * rad)\n  .x * q5)));\n  xlat_mutableret1 = vec3(0.0, 0.0, 0.0);\n  while (true) {\n    if ((n > anz)) {\n      break;\n    };\n    xlat_mutablem = int((float(mod (float(n), 2.0))));\n    xlat_mutableang2 = (((\n      ((6.28 * float(n)) / float(anz))\n     * q14) + (\n      (q9 * q28)\n     / 8.0)) + ((q28 * 3.1416) / 4.0));\n    float tmpvar_5;\n    tmpvar_5 = cos(xlat_mutableang2);\n    float tmpvar_6;\n    tmpvar_6 = sin(xlat_mutableang2);\n    xlat_mutableuv2.x = ((uv_1.x * tmpvar_5) - (uv_1.y * tmpvar_6));\n    xlat_mutableuv2.y = ((uv_1.x * tmpvar_6) + (uv_1.y * tmpvar_5));\n    xlat_mutableuv2 = (xlat_mutableuv2 / (1.0 + (\n      (q26 * sqrt(dot (uv_1, uv_1)))\n     * \n      float(xlat_mutablem)\n    )));\n    xlat_mutableuv2 = (xlat_mutableuv2 * (1.0 + (\n      (float(xlat_mutablem) - 0.5)\n     * q18)));\n    if (((q3 * float(xlat_mutablem)) == 1.0)) {\n      xlat_mutableuv2 = xlat_mutableuv2.yx;\n    };\n    xlat_mutableret1 = max (xlat_mutableret1, texture (sampler_main, (xlat_mutableuv2 + 0.5)).xyz);\n    n++;\n  };\n  xlat_mutablestars = 0.0;\n  anz = 2;\n  for (int n_1_2 = 0; n_1_2 <= anz; n_1_2++) {\n    xlat_mutabledist = (1.0 - fract((\n      (float(n_1_2) / float(anz))\n     + \n      (time / 8.0)\n    )));\n    xlat_mutableinten = (1.0 - pow (xlat_mutabledist, 4.0));\n    xlat_mutableuv4 = (((64.0 * xlat_mutabledist) * (xlat_mutableuv0 - 0.5)) * aspect.xy);\n    xlat_mutablesmask = (texture (sampler_pw_noise_lq, (xlat_mutableuv4 / 256.0)).y - 0.9);\n    vec2 tmpvar_7;\n    tmpvar_7 = abs((fract(xlat_mutableuv4) - 0.5));\n    float tmpvar_8;\n    tmpvar_8 = max (xlat_mutablestars, clamp ((xlat_mutableinten * \n      ((0.4 / sqrt(dot (tmpvar_7, tmpvar_7))) * xlat_mutablesmask)\n    ), 0.0, 1.0));\n    xlat_mutablestars = (tmpvar_8 * tmpvar_8);\n  };\n  vec3 tmpvar_9;\n  tmpvar_9 = (((texture (sampler_blur2, \n    (((uv - 0.5) / 2.0) + 0.5)\n  ).xyz * scale2) + bias2) * clamp ((1.0 - \n    dot ((xlat_mutableret1 * 16.0), vec3(0.32, 0.49, 0.29))\n  ), 0.0, 1.0));\n  xlat_mutableret1 = (xlat_mutableret1 * ((1.0 - q7) + (\n    (q7 * q25)\n   / 2.0)));\n  ret_3 = (1.0 - exp((\n    -(xlat_mutableret1)\n   * 4.0)));\n  ret_3 = (pow (ret_3, vec3(1.8, 1.8, 1.8)) + tmpvar_9);\n  vec4 tmpvar_10;\n  tmpvar_10.w = 1.0;\n  tmpvar_10.xyz = ret_3;\n  ret = tmpvar_10.xyz;\n }","warp_hlsl":"float3 dx,dy,ret1;\nfloat2 zz,uv1,uv2;\nfloat  n1,n2,n3,n4,zv, noise, k1;\nstatic float2 sunpos = float2 (q15,q16)*q19 ;//##!\nstatic float3 suncol = .5+normalize(roam_cos);\n//static float2x2 ofs = float2x2 (texsize.z,0,0,texsize.w)*2;\nstatic float2x2 ofs = float2x2 (.002,0,0,.002);\n\nfloat3 cloud (float2 uv_in) {\nreturn (.002/(length(uv_in-sunpos)-q10/q22))*suncol;}\n\nshader_body {\nuv1 = (uv-.5);//*aspect.xy;\n\ndx = tex2D(sampler_main,uv+ofs[0]) - tex2D(sampler_main,uv-ofs[0]);\ndy = tex2D(sampler_main,uv+ofs[1]) - tex2D(sampler_main,uv-ofs[1]);\nzz = float2(dx.b,dy.b);\n\n//clouds\nzv = time*.1 ;\nuv2 = q11*uv1+ 0.04*time;\nn1 = tex3D(sampler_noisevol_hq,float3 (uv2.x,uv2.y,zv)).b;\nn2 = tex3D(sampler_noisevol_hq,float3 (uv2.x*2,uv2.y*2,zv*2)).b;\nn3 = tex3D(sampler_noisevol_hq,float3 (uv2.x*4,uv2.y*4,zv*3)).b;\nn4 = tex3D(sampler_noisevol_hq,float3 (uv2.x*8,uv2.y*8,zv*7)).b;\nnoise = n1 + n2/2 + n3/4 + n4/8 -.5;\n\nnoise = pow(noise,q13); \nuv2 = uv1*(1+.5*q2)+noise*.1; //q2 hier ? ## \n\n//*******************************\nfloat blur = GetBlur1(uv1/4*0+.5);\n\nret1 = cloud(uv2) + .002/length(uv1-.03/q22)*saturate(1-8*blur);\nret1 = ret1 + tex2D(sampler_main, uv1/1.0+.5+q6*zz)*.96-.02-blur*.1-.0*length(zz); \nfloat go = q12; \nret = go*ret1 + (1-go)*GetPixel(uv) ;\n}","comp_hlsl":"sampler sampler_pw_noise_lq;\nfloat3 ret1, neu;\nfloat2 uv0, uv1, uv2,uv4,rsk,dz1,Kugel1;\nfloat ang2, c, s,rad1,mask1,zoom,stars,smask,dist,inten;\nstatic int n = 1;\nstatic int anz = 4;\nint m;\n\nshader_body {\nuv0 = uv;\nuv = (uv-.5)*aspect.xy;    \n\nfloat2 rs = float2(.1/rad+time*-.05,ang*.0);\nfloat noise = (tex2D (sampler_noise_mq,rs)-.5)*rad;\n\n//noise = exp(-(1+1/q22)*pow((8/q22-rad*8),2));\n\n\nuv /= 1+ q8*length(uv); //zoom\nuv *= 1-q28%2/4;\nuv *= 1+noise*q5; \nret1 = 0;\nwhile (n <= anz) {\n    m = n%2;\n    ang2 = 6.28*n/anz*q14 + q9*q28/8 + q28*3.1416/4;//##\n    c = cos(ang2);\n    s = sin(ang2);\n    uv2.x =  uv.x*c - uv.y*s;\n    uv2.y =  uv.x*s + uv.y*c ;\n    uv2 /= 1+ q26*length(uv)*m; //flash zoom\n    uv2 *= 1+(m-.5)*q18; //waber\n    if (q3*m == 1) {uv2=uv2.yx;}\n    neu = tex2D(sampler_main, uv2 + 0.5); //#\n    ret1 = max(ret1,neu-.0);\n    n++;\n}\n\nstars = 0; anz = 2;\nfor (int n = 0; n<=anz; n++) {\n  dist = 1-frac(1.0*n/anz+ time/8);\n  inten = (1-pow(dist,4));\n  uv4 = 64*dist*(uv0-.5)*aspect.xy + 8*n*0;\n//  uv4 = mul(uv4,float2x2(.7,.7,-.7,.7));\n  smask = (tex2D (sampler_pw_noise_lq,uv4/256)).g-.9;\n  stars = max(stars,saturate(inten*(.4/length(abs(frac(uv4)-.5))*smask)));\n  stars *= stars;\n}\n\nfloat3 back = GetBlur2((uv0-.5)/2+.5) * saturate(1-lum(ret1*16));\nret1 *= ((1-q7)+q7*q25/2);\nret = 1-exp(-ret1*4);\nret = pow(ret,1.8) +back;\n//ret = GetPixel(uv+.5);//#\n}"}