{"version":2,"baseVals":{"rating":0,"gammaadj":1.42,"decay":1,"echo_zoom":1.007,"echo_orient":3,"wave_mode":3,"wave_dots":1,"wave_thick":1,"modwavealphabyvolume":1,"darken":1,"wave_a":0.998,"wave_scale":2.155,"wave_smoothing":0.9,"wave_mystery":-1,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpscale":1.331,"zoom":1.0095,"warp":0.01,"ob_r":0.01,"ob_a":0.5,"ib_size":0.015,"ib_a":0.5,"mv_x":64,"mv_y":1.248,"mv_l":5,"mv_b":0,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"enabled":1,"sides":10,"additive":1,"rad":0.24483},"init_eqs_str":"","frame_eqs_str":"a.x+=.2*Math.sin(.411*a.time);a.y+=.2*Math.cos(.423*a.time);","init_eqs_eel":"","frame_eqs_eel":"x=x+.2*sin(time*.411);\ny=y+.2*cos(time*.423);"},{"baseVals":{"enabled":1,"sides":10,"additive":1,"rad":0.24483},"init_eqs_str":"","frame_eqs_str":"a.x-=.2*Math.sin(.411*a.time);a.y-=.2*Math.cos(.423*a.time);","init_eqs_eel":"","frame_eqs_eel":"x=x-.2*sin(time*.411);\ny=y-.2*cos(time*.423);"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.bass_residual=0;a.old_treb_flop=0;a.redsine=0;a.bass_flop=0;a.bluesine=0;a.q6=0;a.greenif=0;a.q1=0;a.q5=0;a.treb_flop=0;a.q9=0;a.bass_thresh=0;a.old_bass_flop=0;a.treb_thresh=0;a.pulse=0;a.q11=0;a.q10=0;a.bass_changed=0;a.mid_thresh=0;a.q4=0;a.mid_changed=0;a.entropy=0;a.redif=0;a.blueif=0;a.old_mid_flop=0;a.mid_residual=0;a.b=0;a.r=0;a.xv=0;a.g=0;a.treb_residual=0;a.vol=0;a.chaos=0;a.greensine=0;a.mid_flop=0;a.q2=0;a.treb_changed=0;a.q3=0;a.q7=0;a.yv=0;a.q8=0;","frame_eqs_str":"a.old_bass_flop=a.bass_flop;a.old_treb_flop=a.treb_flop;a.old_mid_flop=a.mid_flop;a.chaos=.9+.1*Math.sin(a.pulse);a.entropy=.00001<Math.abs(equal(a.pulse,-20))?1+a.bass_flop+a.treb_flop+a.mid_flop+rand(2):a.entropy;a.bass_thresh=2*above(a.bass_att,a.bass_thresh)+(1-above(a.bass_att,a.bass_thresh))*((a.bass_thresh-1.3)*a.chaos+1.3);a.bass_flop=Math.abs(a.bass_flop-equal(a.bass_thresh,2));a.treb_thresh=2*above(a.treb_att,a.treb_thresh)+(1-above(a.treb_att,a.treb_thresh))*((a.treb_thresh-\n1.3)*a.chaos+1.3);a.treb_flop=Math.abs(a.treb_flop-equal(a.treb_thresh,2));a.mid_thresh=2*above(a.mid_att,a.mid_thresh)+(1-above(a.mid_att,a.mid_thresh))*((a.mid_thresh-1.3)*a.chaos+1.3);a.mid_flop=Math.abs(a.mid_flop-equal(a.mid_thresh,2));a.bass_changed=bnot(equal(a.old_bass_flop,a.bass_flop));a.mid_changed=bnot(equal(a.old_mid_flop,a.mid_flop));a.treb_changed=bnot(equal(a.old_treb_flop,a.treb_flop));a.bass_residual=a.bass_changed*Math.sin(.1*a.pulse*a.entropy)+bnot(a.bass_changed)*a.bass_residual;\na.treb_residual=a.treb_changed*Math.sin(.1*a.pulse*a.entropy)+bnot(a.treb_changed)*a.treb_residual;a.mid_residual=a.mid_changed*Math.sin(.1*a.pulse*a.entropy)+bnot(a.mid_changed)*a.mid_residual;a.pulse=.00001<Math.abs(above(Math.abs(a.pulse),20))?-20:a.pulse+.032*(a.bass_thresh+a.mid_thresh+a.treb_thresh);a.q1=a.mid_residual;a.q2=a.bass_residual;a.q3=a.treb_residual;a.q4=Math.sin(a.pulse);a.q5=Math.cos(div(a.pulse,2)+a.q1);a.q6=Math.sin(a.q3*a.q1+a.q7*a.q2);a.q7=above(a.q1,0)+above(a.q2,0)+above(a.q3,\n0)+above(a.q3,0)*a.treb_flop+above(a.q2,0)*a.bass_flop+above(a.q1,0)*a.mid_flop;a.q8=a.entropy;a.vol=.3333*(a.bass+a.mid+a.treb_att);a.redsine=.5+.15*a.bass*Math.sin(3*a.time);a.greensine=.5+.15*a.mid*Math.sin(2*a.time);a.bluesine=.5+.15*a.treb*Math.sin(a.time);a.redif=.00001<Math.abs(above(a.bass,1.2))?a.redsine:.00001<Math.abs(above(a.redif,.95))?0:.95*a.redif;a.greenif=.00001<Math.abs(above(a.mid,1.2))?a.greensine:.00001<Math.abs(above(a.greenif,.95))?0:.95*a.greenif;a.blueif=.00001<Math.abs(above(a.treb,\n1.2))?a.bluesine:.00001<Math.abs(above(a.blueif,.95))?0:.95*a.blueif;a.r=a.redif;a.g=a.greenif;a.b=a.blueif;a.q9=a.r;a.q10=a.g;a.q11=a.b;a.wave_r*=Math.sin(a.redif*Math.cos(a.b+a.g));a.wave_g*=Math.sin(a.greenif*Math.cos(a.r+a.b));a.wave_b*=Math.sin(a.blueif*Math.cos(a.r+a.g));a.ib_r=a.r;a.ib_g=a.g;a.ib_b=a.b;a.ob_r=a.wave_r*a.redif;a.ob_g=a.wave_g*a.greenif;a.ob_b=a.wave_b*a.blueif;","pixel_eqs_str":"a.xv=Math.sin(.333*a.time)*a.x-Math.cos(.667*a.time)*a.x;a.yv=Math.cos(.233*a.time)*a.y+Math.sin(.567*a.time)*a.y;a.x=a.xv;a.y=a.yv;a.sx+=.075*Math.sin(3*a.x+a.q7*a.x);a.sy+=.075*Math.sin(3.1*a.y+a.q7*a.y);a.dx+=.005*Math.cos(20*a.y+.1*Math.cos(.11*a.time)+a.q2*a.q6);a.dy+=.005*Math.sin(20*a.x+.1*Math.sin(.09*a.time)+a.q3*a.q6);","init_eqs_eel":"","frame_eqs_eel":"//Unchained's Beat Code\n\nold_bass_flop=bass_flop;\nold_treb_flop=treb_flop;\nold_mid_flop=mid_flop;\nchaos=.9+.1*sin(pulse);\nentropy=if(equal(pulse,-20),1+bass_flop+treb_flop+mid_flop+rand(2),entropy);\nbass_thresh = above(bass_att,bass_thresh)*2 + (1-above(bass_att,bass_thresh))*((bass_thresh-1.3)*chaos+1.3);\nbass_flop=abs(bass_flop-equal(bass_thresh,2));\ntreb_thresh=above(treb_att,treb_thresh)*2 + (1-above(treb_att,treb_thresh))*((treb_thresh-1.3)*chaos+1.3);\ntreb_flop=abs(treb_flop-equal(treb_thresh,2));\nmid_thresh=above(mid_att,mid_thresh)*2 + (1-above(mid_att,mid_thresh))*((mid_thresh-1.3)*chaos+1.3);\nmid_flop=abs(mid_flop-equal(mid_thresh,2));\nbass_changed=bnot(equal(old_bass_flop,bass_flop));\nmid_changed=bnot(equal(old_mid_flop,mid_flop));\ntreb_changed=bnot(equal(old_treb_flop,treb_flop));\nbass_residual = bass_changed*sin(pulse*.1*entropy) + bnot(bass_changed)*bass_residual;\ntreb_residual = treb_changed*sin(pulse*.1*entropy) + bnot(treb_changed)*treb_residual;\nmid_residual = mid_changed*sin(pulse*.1*entropy) + bnot(mid_changed)*mid_residual;\npulse=if(above(abs(pulse),20),-20,pulse+(bass_thresh+mid_thresh+treb_thresh)*.032);\nq1=mid_residual;\nq2=bass_residual;\nq3=treb_residual;\nq4=sin(pulse);\nq5=cos(pulse/2+q1);\n\nq6=sin(q3*q1+q7*q2);\nq7=above(q1,0)+above(q2,0)+above(q3,0)+above(q3,0)*treb_flop+above(q2,0)*bass_flop+above(q1,0)*mid_flop;\nq8=entropy;\n\nvol=(bass+mid+treb_att)*.3333;\n\nredsine=.5+.15*bass*sin(time*3);\ngreensine=.5+.15*mid*sin(time*2);\nbluesine=.5+.15*treb*sin(time);\n\nredif=if(above(bass,1.2),redsine,if(above(redif,.95),.0,redif*.95));\ngreenif=if(above(mid,1.2),greensine,if(above(greenif,.95),.0,greenif*.95));\nblueif=if(above(treb,1.2),bluesine,if(above(blueif,.95),.0,blueif*.95));\n\nr=redif;\ng=greenif;\nb=blueif;\n\nq9=r;\nq10=g;\nq11=b;\n\nwave_r=wave_r*(sin(redif*cos(b+g)));\nwave_g=wave_g*(sin(greenif*cos(r+b)));\nwave_b=wave_b*(sin(blueif*cos(r+g)));\n\nib_r=r;\nib_g=g;\nib_b=b;\n\nob_r=wave_r*redif;\nob_g=wave_g*greenif;\nob_b=wave_b*blueif;","pixel_eqs_eel":"//xy transform code\nxv = sin(time*.333)*x -cos(time*.667)*x;\nyv = cos(time*.233)*y +sin(time*.567)*y;\nx = xv; y = yv;\n//end x/y transform code\n\nsx=sx+.075*sin(x*3+q7*x);\nsy=sy+.075*sin(y*3.1+q7*y);\n\ndx=dx+.005*cos(y*20+.1*cos(time*.11)+(q2*q6));\ndy=dy+.005*sin(x*20+.1*sin(time*.09)+(q3*q6));","warp":" shader_body { \n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  tmpvar_1.xyz = texture (sampler_main, uv).xyz;\n  ret = tmpvar_1.xyz;\n }","comp":" shader_body { \n  vec2 uvv_1;\n  vec2 uvm_2;\n  uvm_2.x = ((0.5 * texture (sampler_noise_hq, uv.xx)) + (0.5 * texture (sampler_main, uv.xx))).x;\n  uvm_2.y = ((0.5 * texture (sampler_main, uv.yy)) + (0.5 * texture (sampler_noise_hq, uv.yy))).x;\n  uvv_1 = (uv * uvm_2);\n  vec3 tmpvar_3;\n  tmpvar_3 = (((texture (sampler_blur1, uv).xyz * scale1) + bias1) - ((texture (sampler_blur3, texture (sampler_noise_hq, \n    ((texture (sampler_blur3, uvv_1).xyz * scale3) + bias3)\n  .xy).xy).xyz * scale3) + bias3));\n  vec2 tmpvar_4;\n  tmpvar_4 = fract((tmpvar_3.xy + uvm_2));\n  vec4 tmpvar_5;\n  tmpvar_5.w = 1.0;\n  tmpvar_5.xyz = ((2.0 * tmpvar_3) * texture (sampler_main, (tmpvar_4 * (uvv_1 - tmpvar_4))).xyz);\n  ret = tmpvar_5.xyz;\n }","warp_hlsl":"shader_body\n{\n    // sample previous frame\n    ret = tex2D( sampler_main, uv ).xyz;\n    \n    // darken (decay) over time\n    ret *= 1.00; //or try: ret -= 0.004;\n}","comp_hlsl":"shader_body\n{\nfloat2 uvm=0;\nfloat2 uvv=0;\nfloat2 uvt=0;\n\nuvm.x=.5*tex2D(sampler_noise_hq , uv.x)+.5*tex2D(sampler_main, uv.x);\nuvm.y=.5*tex2D(sampler_main, uv.y)+.5*tex2D(sampler_noise_hq, uv.y);\n\nuvv=uv*uvm;\n\nret = tex2D(sampler_main, (uv)).xyz;\n\nfloat3 bl = GetBlur1(uv)-GetBlur3(tex2D(sampler_noise_hq, (GetBlur3(uvv))));\nfloat2 texm = frac(bl+uvm);\n\nuvt=uvv-texm;\n\nret =2*bl*tex2D(sampler_main, texm*uvt);\n}"}