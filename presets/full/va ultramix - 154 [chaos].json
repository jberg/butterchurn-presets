{"version":2,"baseVals":{"rating":2,"gammaadj":1,"decay":1,"echo_zoom":1,"wave_mode":7,"wave_thick":1,"wave_brighten":0,"wrap":0,"wave_a":0.001,"wave_scale":0.01,"wave_smoothing":0.9,"wave_mystery":1,"modwavealphastart":0.5,"modwavealphaend":1,"warpanimspeed":0.01,"warpscale":1.766,"zoomexp":1.00016,"dx":0.00001,"dy":0.00001,"warp":0.01,"wave_r":0.5,"wave_g":0.5,"wave_b":0.5,"wave_y":0.6,"ob_size":0,"ob_a":1,"ib_size":0,"ib_r":0,"ib_g":0,"ib_b":0,"ib_a":0.1,"mv_x":64,"mv_y":48,"mv_l":1.5,"mv_r":0,"mv_g":0,"mv_b":0,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"textured":1,"y":1.8},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":1,"textured":1,"y":1.8},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":1,"textured":1,"y":1.8},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.gkrt=0;a.jzm=0;a.gksx=0;a.kdx=0;a.gjwp=0;a.w=0;a.gjsx=0;a.crs=0;a.crx=0;a.cb=0;a.gjcx=0;a.ci=0;a.jcy=0;a.gkdx=0;a.gjzm=0;a.kzm=0;a.jdx=0;a.jwp=0;a.kwp=0;a.cr2=0;a.gkwp=0;a.jrt=0;a.cr=0;a.gjdx=0;a.jdy=0;a.gkcx=0;a.jsx=0;a.gjrt=0;a.ksy=0;a.kcy=0;a.ksx=0;a.gjsy=0;a.gkcy=0;a.jsy=0;a.gjdy=0;a.gkdy=0;a.kcx=0;a.jcx=0;a.gjcy=0;a.crr=0;a.cqr=0;a.kx1=0;a.cr1=0;a.gkzm=0;a.jx1=0;a.kdy=0;a.cc=0;a.gksy=0;a.q8=0;a.krt=0;","frame_eqs_str":"a.wave_r=a.wave_r+.35*Math.sin(1.14*a.time)+.16*Math.sin(1.5*a.time);a.wave_g=a.wave_g+.36*Math.sin(1.27*a.time)+.15*Math.sin(1.11*a.time);a.wave_b=a.wave_b+.37*Math.sin(1.284*a.time)+.15*Math.sin(1.3*a.time);a.warp=0;a.ob_r=a.wave_g;a.ob_b=a.wave_r;a.ob_g=a.wave_b;a.ib_r=a.wave_r;a.ib_b=a.wave_g;a.ib_g=a.wave_r;","pixel_eqs_str":"a.sx=.99;a.rot=.02;a.kdx=a.dx;a.kdy=a.dy;a.ksx=a.sx;a.ksy=a.sy;a.krt=a.rot;a.kzm=a.zoom;a.kcx=a.cx;a.kcy=a.cy;a.kwp=a.warp;a.dx=0;a.dy=0;a.sx=1;a.sy=1;a.rot=0;a.zoom=1;a.cx=.5;a.cy=.5;a.warp=0;a.dx=.01*Math.sin(100*a.y+div(a.q8,a.y));a.dy=.01*Math.sin(100*a.x+div(a.q8,a.x));a.cr1=0;a.cr2=.99;a.crx=a.cr2-a.cr1;a.ci=a.rad;a.ci=4*a.x-1+6*Math.sin(div(a.time,3));a.crs=2;a.cr=pow(div(Math.sin(6.3*a.ci-6.3*a.cb),2)+.5,a.crs)*a.crx+a.cr1;a.cqr=.00001<Math.abs(above(a.ci,.25+a.cb))?\na.cr:a.crx+a.cr1;a.crr=.00001<Math.abs(below(a.ci,1.5))?a.cqr:a.crx+a.cr1;a.kx1=a.crr;a.jx1=1-a.crr;a.jdx=a.dx;a.jdy=a.dy;a.jsx=a.sx;a.jsy=a.sy;a.jrt=a.rot;a.jzm=a.zoom;a.jcx=a.cx;a.jcy=a.cy;a.jwp=a.warp;a.dx=a.jx1*a.jdx+a.kx1*a.kdx;a.dy=a.jx1*a.jdy+a.kx1*a.kdy;a.sx=a.jx1*a.jsx+a.kx1*a.ksx;a.sy=a.jx1*a.jsy+a.kx1*a.ksy;a.rot=a.jx1*a.jrt+a.kx1*a.krt;a.zoom=a.jx1*a.jzm+a.kx1*a.kzm;a.cx=a.jx1*a.jcx+a.kx1*a.kcx;a.cy=a.jx1*a.jcy+a.kx1*a.kcy;a.warp=a.jx1*a.jwp+a.kx1*a.kwp;a.gkdx=a.dx;a.gkdy=a.dy;a.gksx=\na.sx;a.gksy=a.sy;a.gkrt=a.rot;a.gkzm=a.zoom;a.gkcx=a.cx;a.gkcy=a.cy;a.gkwp=a.warp;a.dx=0;a.dy=0;a.sx=1;a.sy=1;a.rot=0;a.zoom=1;a.cx=.5;a.cy=.5;a.warp=0;a.w=div(Math.sin(22*a.ang+Math.sin(div(a.time,8))),2)+.5;a.cc=a.w*a.w*a.w*a.w*a.w*a.w*a.w*a.w*a.w*a.w*a.w*a.w;a.zoom=div(a.cc,22)+1;a.cr1=Math.floor(div(Math.sin(2*a.time),2)+.5+.2);a.cr2=a.cr1;a.crx=a.cr2-a.cr1;a.ci=a.rad;a.cb=.25;a.crs=2;a.cr=pow(div(Math.sin(6.3*a.ci-6.3*a.cb),2)+.5,a.crs)*a.crx+a.cr1;a.cqr=.00001<Math.abs(above(a.ci,.25+a.cb))?\na.cr:a.crx+a.cr1;a.crr=.00001<Math.abs(below(a.ci,1.5))?a.cqr:a.crx+a.cr1;a.jx1=a.crr;a.kx1=1-a.crr;a.gjdx=a.dx;a.gjdy=a.dy;a.gjsx=a.sx;a.gjsy=a.sy;a.gjrt=a.rot;a.gjzm=a.zoom;a.gjcx=a.cx;a.gjcy=a.cy;a.gjwp=a.warp;a.dx=a.jx1*a.gjdx+a.kx1*a.gkdx;a.dy=a.jx1*a.gjdy+a.kx1*a.gkdy;a.sx=a.jx1*a.gjsx+a.kx1*a.gksx;a.sy=a.jx1*a.gjsy+a.kx1*a.gksy;a.rot=a.jx1*a.gjrt+a.kx1*a.gkrt;a.zoom=a.jx1*a.gjzm+a.kx1*a.gkzm;a.cx=a.jx1*a.gjcx+a.kx1*a.gkcx;a.cy=a.jx1*a.gjcy+a.kx1*a.gkcy;a.warp=a.jx1*a.gjwp+a.kx1*a.gkwp;","init_eqs_eel":"","frame_eqs_eel":"wave_r = wave_r + 0.35*sin(1.14*time) + 0.16*sin(1.5*time);\nwave_g = wave_g + 0.36*sin(1.27*time) + 0.15*sin(1.11*time);\nwave_b = wave_b + 0.37*sin(1.284*time) + 0.15*sin(1.3*time);\nwarp = 0;\n\nob_r = wave_g;\nob_b = wave_r;\nob_g = wave_b;\nib_r = wave_r;\nib_b = wave_g;\nib_g = wave_r;","pixel_eqs_eel":"sx=1- .01;\nrot=.02;\nkdx=dx;\nkdy=dy;\nksx=sx;\nksy=sy;\nkrt=rot;\nkzm=zoom;\nkcx=cx;\nkcy=cy;\nkwp=warp;\n\ndx=0;\ndy=0;\nsx=1;\nsy=1;\nrot=0;\nzoom=1;\ncx=.5;\ncy=.5;\nwarp=0;\n\ndx = 0.01*sin(100*y+q8/y);\ndy = 0.01*sin(100*x+q8/x);\ncr1=0*.01;\ncr2=99*.01;;\ncrx=cr2-cr1;\nci=rad;\nci=x*4-1+sin(time/3)*6  ;\ncrs=2;\ncr=pow(sin(ci*6.3-(cb*6.3))/2+.5,crs)*crx+cr1;\ncqr=if( above (ci,.25+cb),cr,crx+cr1);crr=if( below(ci,1.5),cqr,crx+cr1);\nkx1=crr;\njx1=1-crr;\n\njdx=dx;\njdy=dy;\njsx=sx;\njsy=sy;\njrt=rot;\njzm=zoom;\njcx=cx;\njcy=cy;\njwp=warp;\n\ndx=(jx1*jdx+kx1*kdx);\ndy=(jx1*jdy+kx1*kdy);\nsx=(jx1*jsx+kx1*ksx);\nsy=(jx1*jsy+kx1*ksy);\nrot=(jx1*jrt+kx1*krt);\nzoom=(jx1*jzm+kx1*kzm);\ncx=(jx1*jcx+kx1*kcx);\ncy=(jx1*jcy+kx1*kcy);\nwarp=(jx1*jwp+kx1*kwp);\n\ngkdx=dx;//////////////////////////////////////////\ngkdy=dy;\ngksx=sx;\ngksy=sy;\ngkrt=rot;\ngkzm=zoom;\ngkcx=cx;\ngkcy=cy;\ngkwp=warp;\n\ndx=0;\ndy=0;\nsx=1;\nsy=1;\nrot=0;\nzoom=1;\ncx=.5;\ncy=.5;\nwarp=0;/////////////////////////////////////////////////////\n\nw=sin(ang*22+sin(time/8) )/2+.5;\ncc=w*w*w*w*w*w*w*w*w*w*w*w;\nzoom=cc/22+1;\n///////////////////////////////////////\ncr1=(int(sin(time*2)/2+.5+.2));\ncr2=cr1;\ncrx=cr2-cr1;\nci=rad;\ncb=.25  ;\ncrs=2;\ncr=pow(sin(ci*6.3-(cb*6.3))/2+.5,crs)*crx+cr1;\ncqr=if( above (ci,.25+cb),cr,crx+cr1);crr=if( below(ci,1.5),cqr,crx+cr1);\njx1=crr;\nkx1=1-crr;\n\ngjdx=dx;\ngjdy=dy;\ngjsx=sx;\ngjsy=sy;\ngjrt=rot;\ngjzm=zoom;\ngjcx=cx;\ngjcy=cy;\ngjwp=warp;\n\ndx=(jx1*gjdx+kx1*gkdx);\ndy=(jx1*gjdy+kx1*gkdy);\nsx=(jx1*gjsx+kx1*gksx);\nsy=(jx1*gjsy+kx1*gksy);\nrot=(jx1*gjrt+kx1*gkrt);\nzoom=(jx1*gjzm+kx1*gkzm);\ncx=(jx1*gjcx+kx1*gkcx);\ncy=(jx1*gjcy+kx1*gkcy);\nwarp=(jx1*gjwp+kx1*gkwp);////////////////////////////////////////////////////","warp":" shader_body { \n  vec3 ret_1;\n  vec2 tmpvar_2;\n  tmpvar_2 = (texsize.zw * 12.0);\n  vec2 tmpvar_3;\n  tmpvar_3.x = (((texture (sampler_blur3, \n    (uv + (vec2(1.0, 0.0) * tmpvar_2))\n  ).xyz * scale3) + bias3) - ((texture (sampler_blur3, \n    (uv - (vec2(1.0, 0.0) * tmpvar_2))\n  ).xyz * scale3) + bias3)).y;\n  tmpvar_3.y = (((texture (sampler_blur3, \n    (uv + (vec2(0.0, 1.0) * tmpvar_2))\n  ).xyz * scale3) + bias3) - ((texture (sampler_blur3, \n    (uv - (vec2(0.0, 1.0) * tmpvar_2))\n  ).xyz * scale3) + bias3)).y;\n  ret_1.y = texture (sampler_fw_main, fract((uv + (\n    (tmpvar_3 * texsize.zw)\n   * 48.0)))).y;\n  ret_1.y = (ret_1.y + ((\n    (ret_1 - ((texture (sampler_blur3, (uv - \n      floor(uv)\n    )).xyz * scale3) + bias3))\n  .y * 0.01) - 0.004));\n  ret_1.y = (ret_1.y + ((texture (sampler_noise_lq, \n    (((uv_orig * texsize.xy) * (texsize_noise_lq.zw * 0.25)) + rand_frame.xy)\n  ).y - 0.5) * 0.06));\n  ret_1.x = texture (sampler_main, uv).x;\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = ret_1;\n  ret = tmpvar_4.xyz;\n }","comp":" shader_body { \n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  tmpvar_1.xyz = texture (sampler_main, uv).yyy;\n  ret = tmpvar_1.xyz;\n }","warp_hlsl":"sampler sampler_cells;\n \nshader_body\n{\n\nfloat2 uv_y = lerp(uv_orig,uv,1);\n    float2 d = texsize.zw*12;\n    float1 dx = ( GetBlur3(uv_y + float2(1,0)*d) - GetBlur3(uv_y-float2(1,0)*d) ).y;\n    float1 dy = ( GetBlur3(uv_y + float2(0,1)*d) - GetBlur3(uv_y-float2(0,1)*d) ).y;\n    float2 my_uv = uv_y + float2(dx,dy)*texsize.zw*48;\n\n\n\n    ret.y = tex2D( sampler_fw_main, frac(my_uv)).y;\n\n    \n      ret.y += (ret - GetBlur3(uv_y-floor(uv_y))).y*0.01 - 0.004;\n\n      // add noise:\n      float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw * 0.25 + rand_frame.xy;\n      ret.y += (tex2D(sampler_noise_lq, dither_uv).y-0.5)*0.06;\n\nret.x = GetPixel(uv).x;\n\n}","comp_hlsl":"shader_body\n{\n    ret = tex2D(sampler_main, uv).y;\n}"}