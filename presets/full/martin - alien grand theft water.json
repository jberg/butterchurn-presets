{"version":2,"baseVals":{"rating":3,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":6,"additivewave":1,"wave_thick":1,"modwavealphabyvolume":1,"wave_brighten":0,"darken":1,"wave_a":0.002,"wave_scale":2.103,"wave_smoothing":0.54,"wave_mystery":0.38,"modwavealphastart":0.81,"modwavealphaend":1.4,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0,"wave_g":0,"wave_b":0,"ob_size":0,"ob_b":0.2,"ob_a":1,"ib_size":0,"ib_r":0,"ib_g":0,"ib_a":1,"mv_x":32,"mv_y":24,"mv_l":0.2,"mv_r":0.6,"mv_g":0.2,"mv_b":0.7,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"sides":32,"num_inst":155,"x":0.37,"rad":0.17915,"tex_zoom":1.25943,"r":0,"g":0.1,"b":0.6,"a":0.8,"g2":0,"border_b":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":1,"sides":34,"num_inst":100,"x":0.6,"rad":0.02217,"tex_zoom":60.80383,"r":0,"g":1,"b":1,"a":0.9,"g2":0,"border_r":0,"border_g":0,"border_b":0,"border_a":0},"init_eqs_str":"a.trig2=0;a.fov=0;a.t01=0;a.q22=0;a.q6=0;a.posx=0;a.q5=0;a.dick=0;a.q23=0;a.k1=0;a.q24=0;a.posy=0;a.t02=0;a.lit1=0;a.trel2=0;a.trig1=0;a.q27=0;a.dist=0;a.trel1=0;a.lit2=0;a.rad0=0;a.lit=0;","frame_eqs_str":"a.k1=1-div(a.instance,a.num_inst);a.dist=a.k1+.15;a.fov=.1;a.posx=div(a.fov,a.dist)*Math.sin(18.84*a.dist*a.q5+div(a.time,2))*a.k1;a.posy=a.fov*Math.cos(6.28*a.dist*5*a.q6+div(a.time,3));a.x=.55+(a.posx+div(-a.k1,2)+div(a.q5,2)*a.k1)+.1*a.q5;a.y=.65-div(a.k1,1.8)+div(.001,a.k1)+a.posy*a.k1;a.rad0=div(.05,a.dist);a.trig1=a.q24*bnot(mod(a.q27,4));a.trel1=.66*a.time;a.t01=a.t01*bnot(a.trig1)+a.trig1*a.trel1;a.lit1=(1-a.trel1+a.t01)*a.num_inst;a.trig2=a.q24*bnot(mod(a.q27+2,4));\na.trel2=2*a.time;a.t02=a.t02*bnot(a.trig2)+a.trig2*a.trel2;a.lit2=(a.trel2-a.t02)*a.num_inst;a.b=Math.min(1,div(2*a.dist*a.q23,Math.abs(a.instance-a.lit1)));a.b2=div(a.b,4);a.g=Math.min(1,div(2*a.q23,Math.abs(a.instance-a.lit2)));a.g2=div(a.g,4);a.dick=Math.min(1,div(1,Math.abs(a.instance-a.lit1)));a.r=.8;a.a=0;a.a2=1;a.rad=a.rad0+.04*a.dick*(1+div(a.q22,4));","init_eqs_eel":"lit = 0;","frame_eqs_eel":"k1 = 1-instance/num_inst;\ndist = k1+.15;\n\n\nfov = .1;\nposx = fov/dist * sin(dist*6.28*3*q5+time/2)*k1;\nposy = fov * cos(dist*6.28*5*q6+time/3);\n\nx = .55 + (posx + -k1/2 + q5/2*k1) + .1*q5;\ny = .65 - k1/1.8 + .001/k1 +posy*k1;\n\nrad0 = .05/dist;\n\ntrig1 = q24 * bnot(q27%4);\ntrel1 = time*.66;\nt01 = t01 * bnot(trig1) + trig1*trel1;\nlit1 = (1-trel1+t01)*num_inst;\n\ntrig2 = q24 * bnot((q27+2)%4);\ntrel2 = time*2;\nt02 = t02 * bnot(trig2) + trig2*trel2;\nlit2 = (trel2-t02)*num_inst;\n\nb = min(1,dist*2*q23/abs(instance-lit1)); b2 = b/4;\ng = min(1,2*q23/abs(instance-lit2)); g2 = g/4;\ndick = min(1,1/abs(instance-lit1));\nr = .8; \na = .0;\na2 = 1;\n\nrad = rad0 + dick*.04*(1+q22/4) ;"},{"baseVals":{"sides":63,"x":0.123,"y":0,"rad":0.27319,"tex_zoom":0.49981,"g":1,"b":1,"r2":1,"b2":1,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"y":0.51,"rad":0.19869,"tex_ang":1.00531,"tex_zoom":0.49981,"g":0.4,"a":0.7,"r2":1,"b2":1,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"samples":128,"usedots":1,"additive":1,"scaling":0.89152,"smoothing":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"x = sample; y = .4;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"x = sample; y = .4;"},{"baseVals":{"samples":100,"usedots":1,"thick":1,"scaling":0.89152,"smoothing":0,"a":0.1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"thick":1,"scaling":0.89152,"smoothing":0.82,"a":0.1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"usedots":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.index2=0;a.index=0;a.q12=0;a.q22=0;a.q21=0;a.q13=0;a.q29=0;a.q6=0;a.q1=0;a.dec_med=0;a.q5=0;a.trely=0;a.rott=0;a.is_beat=0;a.q23=0;a.k1=0;a.q24=0;a.dec_slow=0;a.q11=0;a.sb=0;a.q4=0;a.q26=0;a.p2=0;a.trelx_0=0;a.avg=0;a.puls=0;a.beat=0;a.trel2=0;a.p1=0;a.peak=0;a.q2=0;a.q27=0;a.trel1=0;a.p3=0;a.q3=0;a.t0=0;a.q28=0;a.trelx=0;a.q20=0;","frame_eqs_str":"a.dec_med=pow(.5,div(30,a.fps));a.dec_slow=pow(.94,div(30,a.fps));a.beat=Math.max(Math.max(a.bass,a.mid),a.treb);a.avg=a.avg*a.dec_slow+a.beat*(1-a.dec_slow);a.is_beat=above(a.beat,a.avg+a.peak)*above(a.time,a.t0+.2);a.t0=a.is_beat*a.time+(1-a.is_beat)*a.t0;a.peak=a.is_beat*a.beat+(1-a.is_beat)*a.peak*a.dec_med;a.index=mod(a.index+a.is_beat,16);a.index2=mod(a.index2+a.is_beat*bnot(a.index),4);a.monitor=a.index2;a.q20=a.avg;a.q21=a.beat;a.q22=a.peak;a.q23=a.index;a.q24=a.is_beat;\na.q26=a.bass+a.mid+a.treb;a.q27=a.index;a.q28=a.index2;a.sb=a.sb*a.dec_med+a.q21*(1-a.dec_med);a.q29=a.sb;a.puls=a.puls*a.dec_slow+(1-a.dec_slow)*a.q22*2;a.q23=a.puls;a.k1=a.is_beat*bnot(mod(a.index,4));a.p1+=a.k1;a.p2=a.dec_slow*a.p2+(1-a.dec_slow)*a.p1;a.p3=a.dec_slow*a.p3+(1-a.dec_slow)*a.p2;a.rott=div(3.14*a.p3,2);a.q1=Math.cos(a.rott);a.q2=Math.sin(a.rott);a.q3=-a.q2;a.q4=a.q1;a.trel1+=div(.2,a.fps)*(1+a.q23);a.trel2+=div(.12,a.fps)*(1+a.q23*a.q1);a.q5=Math.cos(a.trel1);a.q6=Math.sin(a.trel2);\na.trelx=.5+.5*Math.sin(div(a.time,11));a.q13=a.trelx-a.trelx_0;a.trelx_0=a.trelx;a.trely=.5+.5*Math.sin(div(a.time,8));a.q11=a.trelx;a.q12=a.trely;a.zoom=1;","pixel_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"dec_med = pow (0.5, 30/fps);\ndec_slow = pow (0.94, 30/fps);\nbeat = max (max (bass, mid), treb); \navg = avg*dec_slow + beat*(1-dec_slow);\nis_beat = above(beat, avg+peak) * above (time, t0+.2);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\nindex = (index + is_beat) %16;\nindex2 = (index2 + is_beat*bnot(index))%4;\nmonitor = index2;\n\nq20 = avg;\nq21 = beat;\nq22 = peak;\nq23 = index;\nq24 = is_beat;\nq26 = bass + mid + treb;\nq27 = index;\nq28 = index2;\nsb = sb*dec_med + q21*(1-dec_med);\nq29 = sb;\n\npuls = puls*dec_slow + (1-dec_slow)*q22*2;\nq23 = puls;\n\nk1 =  is_beat*bnot(index%4);\np1 =  p1+k1;\n\np2 = dec_slow * p2+ (1-dec_slow)*p1;\np3 = dec_slow * p3+ (1-dec_slow)*p2;\nrott = p3*3.14/2;\nq1 = cos(rott);\nq2 = sin(rott);\nq3 = -q2;\nq4 = q1;\n\n\ntrel1 = trel1 + .2/fps*(1+q23);\ntrel2 = trel2 + .12/fps*(1+q23*q1);\nq5 = cos(trel1);\nq6 = sin(trel2);\n\n\ntrelx = .5 + .5*sin(time/11);\nq13 = trelx-trelx_0;\ntrelx_0 = trelx;\ntrely = .5 + .5*sin(time/8);\nq11 = trelx;\nq12 = trely;\n\n\n\nzoom = 1;","pixel_eqs_eel":"","warp":"vec2 xlat_mutablers;\nvec2 xlat_mutablersufo;\nvec2 xlat_mutableuv1;\n shader_body { \n  vec3 ufo_1;\n  vec3 ret_2;\n  xlat_mutableuv1 = (uv_orig - vec2(0.5, 0.1));\n  xlat_mutablers.x = xlat_mutableuv1.x;\n  xlat_mutablers.y = (1.0/(xlat_mutableuv1.y));\n  vec2 tmpvar_3;\n  tmpvar_3.x = (1.0 - (2.0 * q11));\n  tmpvar_3.y = (2.0 - q12);\n  xlat_mutablersufo = (((xlat_mutablers - tmpvar_3) * (16.0 + \n    (64.0 * rand_preset.x)\n  )) * (2.0 - trelx));\n  float tmpvar_4;\n  tmpvar_4 = clamp (inversesqrt(dot (xlat_mutablersufo, xlat_mutablersufo)), 0.0, 1.0);\n  ufo_1 = (vec3(tmpvar_4) * vec3(tmpvar_4));\n  ufo_1 = (ufo_1 * float((\n    dot (ufo_1, vec3(0.32, 0.49, 0.29))\n   >= 0.05)));\n  vec2 tmpvar_5;\n  tmpvar_5 = normalize(xlat_mutablersufo);\n  float tmpvar_6;\n  float tmpvar_7;\n  tmpvar_7 = (min (abs(\n    (tmpvar_5.x / tmpvar_5.y)\n  ), 1.0) / max (abs(\n    (tmpvar_5.x / tmpvar_5.y)\n  ), 1.0));\n  float tmpvar_8;\n  tmpvar_8 = (tmpvar_7 * tmpvar_7);\n  tmpvar_8 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_8) + 0.05368138) * tmpvar_8) - 0.1173503)\n     * tmpvar_8) + 0.1938925) * tmpvar_8) - 0.3326756)\n   * tmpvar_8) + 0.9999793) * tmpvar_7);\n  tmpvar_8 = (tmpvar_8 + (float(\n    (abs((tmpvar_5.x / tmpvar_5.y)) > 1.0)\n  ) * (\n    (tmpvar_8 * -2.0)\n   + 1.570796)));\n  tmpvar_6 = (tmpvar_8 * sign((tmpvar_5.x / tmpvar_5.y)));\n  if ((abs(tmpvar_5.y) > (1e-08 * abs(tmpvar_5.x)))) {\n    if ((tmpvar_5.y < 0.0)) {\n      if ((tmpvar_5.x >= 0.0)) {\n        tmpvar_6 += 3.141593;\n      } else {\n        tmpvar_6 = (tmpvar_6 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_6 = (sign(tmpvar_5.x) * 1.570796);\n  };\n  float tmpvar_9;\n  tmpvar_9 = (sqrt(dot (xlat_mutablersufo, xlat_mutablersufo)) - 4.0);\n  ret_2 = ((ufo_1 * vec3(0.21, 0.4, 0.8)) + ((\n    clamp ((0.002 / (tmpvar_9 * tmpvar_9)), 0.0, 1.0)\n   * \n    sin(((tmpvar_6 * 16.0) + (time * 12.0)))\n  ) * (0.1 + \n    (q22 / 4.0)\n  )));\n  vec2 tmpvar_10;\n  tmpvar_10.y = -0.0035;\n  tmpvar_10.x = -(q13);\n  vec4 tmpvar_11;\n  tmpvar_11 = texture (sampler_main, (uv_orig - tmpvar_10));\n  ret_2 = (ret_2 + ((\n    (vec3(0.0, 0.4, 0.4) * (1.0 + dot (tmpvar_11.xyz, vec3(0.32, 0.49, 0.29))))\n   * tmpvar_11.xyz) - 0.01));\n  vec4 tmpvar_12;\n  tmpvar_12.w = 1.0;\n  tmpvar_12.xyz = ret_2;\n  ret = tmpvar_12.xyz;\n }","comp":"vec3 xlat_mutableclouds;\nvec2 xlat_mutablers;\nvec2 xlat_mutablers0;\nvec2 xlat_mutableuv1;\nvec2 xlat_mutableuv5;\nvec2 xlat_mutableuv_wat;\nvec3 xlat_mutablewater;\nfloat xlat_mutablez;\n shader_body { \n  vec2 tmpvar_1;\n  tmpvar_1.x = (rand_preset.x - 0.5);\n  tmpvar_1.y = (rand_preset.y * 0.2);\n  vec3 ret_2;\n  xlat_mutableuv1 = ((uv - vec2(0.5, 0.4)) * aspect.xy);\n  float tmpvar_3;\n  tmpvar_3 = clamp ((128.0 * xlat_mutableuv1.y), 0.0, 1.0);\n  xlat_mutablez = (0.5 / xlat_mutableuv1.y);\n  xlat_mutablers0.x = (xlat_mutableuv1.x * xlat_mutablez);\n  xlat_mutablers0.y = xlat_mutablez;\n  vec2 tmpvar_4;\n  tmpvar_4.y = 2.7;\n  tmpvar_4.x = (0.15 + (0.3 * q5));\n  vec2 x_5;\n  x_5 = (xlat_mutablers0 - tmpvar_4);\n  float tmpvar_6;\n  tmpvar_6 = (2.0 * sqrt(dot (x_5, x_5)));\n  xlat_mutablers0 = (xlat_mutablers0 - tmpvar_6);\n  vec2 tmpvar_7;\n  tmpvar_7.x = (xlat_mutablers0.x + (time / -2.0));\n  tmpvar_7.y = (xlat_mutablers0.y + (time / 2.0));\n  xlat_mutablers = (tmpvar_7 * tmpvar_3);\n  xlat_mutablewater = ((texture (sampler_noise_hq, xlat_mutablers) + texture (sampler_noise_hq, (\n    (xlat_mutablers / 4.0)\n   + \n    (time / -8.0)\n  ))).xyz - 1.0);\n  vec2 tmpvar_8;\n  tmpvar_8.x = xlat_mutableuv1.x;\n  tmpvar_8.y = abs(xlat_mutableuv1.y);\n  xlat_mutableuv_wat = (tmpvar_8 - ((\n    (xlat_mutablewater / xlat_mutablez)\n   * 0.1) * tmpvar_3).xy);\n  vec2 tmpvar_9;\n  tmpvar_9.x = xlat_mutableuv1.x;\n  tmpvar_9.y = abs((xlat_mutableuv1.y - 0.45));\n  vec2 tmpvar_10;\n  tmpvar_10.x = xlat_mutableuv1.x;\n  tmpvar_10.y = abs(xlat_mutableuv1.y);\n  vec2 x_11;\n  x_11 = (xlat_mutableuv_wat - tmpvar_1);\n  vec3 tmpvar_12;\n  tmpvar_12 = clamp (vec3((0.013 / sqrt(\n    dot (x_11, x_11)\n  ))), 0.0, 1.0);\n  vec2 tmpvar_13;\n  tmpvar_13 = fract(((\n    (aspect.yx * tmpvar_9)\n   - \n    (((xlat_mutablewater / xlat_mutablez) * 0.1) * clamp ((16.0 * (xlat_mutableuv1.y - 0.18)), 0.0, 1.0))\n  .xy) + vec2(0.5, 0.0)));\n  xlat_mutableclouds = ((texture (sampler_main, tmpvar_13) * 2.0).xyz + ((texture (sampler_blur1, tmpvar_13).xyz * scale1) + bias1));\n  vec2 tmpvar_14;\n  tmpvar_14.x = 0.0;\n  tmpvar_14.y = (time * 1e-05);\n  xlat_mutableuv5 = ((xlat_mutableuv_wat / 6.0) + tmpvar_14);\n  vec2 tmpvar_15;\n  tmpvar_15.y = 0.0;\n  tmpvar_15.x = (xlat_mutableuv5.x / 4.0);\n  vec2 tmpvar_16;\n  tmpvar_16.x = (xlat_mutableuv5.x * 4.0);\n  tmpvar_16.y = (xlat_mutableuv5.y * 64.0);\n  vec3 tmpvar_17;\n  tmpvar_17 = clamp ((1.0 - vec3((\n    ((((\n      abs(xlat_mutableuv_wat.y)\n     * 8.0) / abs(\n      (4.0 - (4.0 * (uv.x + rand_preset)))\n    ).x) * (1.0 + texture (sampler_noise_lq, vec2((xlat_mutableuv5.x / 4.0))).x)) * (1.0 + (0.5 * texture (sampler_noise_lq, (tmpvar_15 * 18.0)).x)))\n   * \n    (1.0 + (0.5 * texture (sampler_noise_lq, (tmpvar_16 * 4.0)).x))\n  ))), 0.0, 1.0);\n  vec2 tmpvar_18;\n  tmpvar_18 = ((64.0 * (\n    ((tmpvar_10 - ((\n      (xlat_mutablewater / xlat_mutablez)\n     * 0.02) * tmpvar_3).xy) * aspect.xy)\n   * mat2(0.7, -0.7, 0.7, 0.7))) + (time * 0.25));\n  vec2 tmpvar_19;\n  tmpvar_19 = abs((fract(tmpvar_18) - 0.5));\n  vec3 tmpvar_20;\n  tmpvar_20 = clamp (((0.3 / \n    sqrt(dot (tmpvar_19, tmpvar_19))\n  ) * vec3((texture (sampler_pw_noise_lq, \n    (tmpvar_18 / 256.0)\n  ).y - 0.9))), 0.0, 1.0);\n  vec2 x_21;\n  x_21 = (sin((\n    (2.0 * xlat_mutablers)\n   - \n    (2.0 * time)\n  )) - 0.21);\n  float tmpvar_22;\n  tmpvar_22 = clamp ((1.0 - dot (vec3(\n    (xlat_mutableclouds.x * 16.0)\n  ), vec3(0.32, 0.49, 0.29))), 0.0, 1.0);\n  ret_2 = (((\n    clamp (((clamp (\n      (vec3(0.0408, 0.0816, 0.204) * (1.0 - xlat_mutableuv_wat.y))\n    , 0.0, 1.0) - (xlat_mutableclouds * 2.0)) + tmpvar_12), 0.0, 1.0)\n   * \n    clamp (1.0, 0.0, 1.0)\n  ) + (\n    (tmpvar_20.x * tmpvar_20.x)\n   * \n    (1.0 - (0.5 * tmpvar_3))\n  )) + (clamp (\n    ((0.1 / sqrt(dot (x_21, x_21))) * vec3(0.1, 0.2, 0.0))\n  , 0.0, 1.0) * tmpvar_3));\n  vec3 tmpvar_23;\n  tmpvar_23.x = (xlat_mutableclouds.x * 0.3);\n  tmpvar_23.yz = xlat_mutableclouds.yz;\n  ret_2 = (((\n    (max ((ret_2 * clamp (\n      (1.0 - (tmpvar_17 * 4.0))\n    , 0.0, 1.0)), clamp ((\n      ((vec3(4.0, 8.0, 4.8) * (1.0 - tmpvar_17)) * ((abs(\n        dFdx(tmpvar_17)\n      ) + abs(\n        dFdy(tmpvar_17)\n      )) * sqrt(tmpvar_12)))\n     * \n      (1.0 - (tmpvar_3 * 0.7))\n    ), 0.0, 1.0)) * tmpvar_22)\n   + tmpvar_23) + (\n    (vec3(0.0, 4.0, 4.0) * ((clamp (\n      (1.0 - sqrt((tmpvar_6 / 2.0)))\n    , 0.0, 1.0) * tmpvar_3) * texture (sampler_main, vec2(0.7, 0.3)).xyz))\n   * tmpvar_22)) + ((\n    clamp ((1.0 - sqrt((tmpvar_6 / 3.0))), 0.0, 1.0)\n   * tmpvar_22) * 0.2));\n  vec4 tmpvar_24;\n  tmpvar_24.w = 1.0;\n  tmpvar_24.xyz = ret_2;\n  ret = tmpvar_24.xyz;\n }","warp_hlsl":"float2 rs, uv1, rsufo;\nfloat z, trelx, trely, trelx_0, dx;\nshader_body {\n\nuv1 = uv_orig - float2(.5,.1);\nz = 1/uv1.y;\nrs.x = uv1.x;\nrs.y = z;\n\nrsufo = (rs-float2(1-2*q11, 2-q12))*(16+64*rand_preset.x)*(2-trelx);\nfloat3 ufo = saturate(1/length(rsufo));;\nufo = ufo*ufo;\nufo *= (lum(ufo) >=.05);\nfloat2 dz = normalize(rsufo);\nfloat angle = atan2(dz.x,dz.y);\nfloat dots = saturate(.002/pow(length(rsufo)-4,2)) * sin(angle*16+time*12);\n\nret = .0*tex2D (sampler_noise_lq,rs)\n+ ufo*float3(.21,.4,.8) + dots * (.1+q22/4);;\n\nfloat3 fb = GetPixel(uv_orig - float2(-q13,-.0035));\nret +=  float3(0,1,1)*fb*(1+lum(fb))*.4-.01 ;\n\n}","comp_hlsl":"sampler sampler_pw_noise_lq;\nfloat z,mask,mask2;\nfloat2 rs0, rs, uv0, uv1, uv2, uv3, uv4, uv5, uv_wat, uv_wat2, \n       uv_stars, uv_clouds;\nfloat3 water, noise, ret1, ret2, rets, sky1, horiz, clouds, ray, \n       sun, sunshine, forest;\n\nstatic float3 suncol = float3 (1,1,1);\nstatic float3 treecol = float3 (.5,1,.6)*suncol;\nstatic float2 sunpos = float2(rand_preset.x-.5,rand_preset.y*.2);\n\nshader_body {\nuv0 = uv;\nfloat2 center = float2 (.5,.4); \nuv1 = (uv-center)*aspect.xy;\nmask = saturate(128*uv1.y);\nmask2= saturate(16*(uv1.y-.18));\nz = .5/(uv1.y);\nrs0.x = uv1.x * z; rs0.y = z ;\n\nfloat isle = (2*length(rs0-float2(.15+.3*q5,2.7)));\nrs0 = rs0-isle;\nrs    = float2 (rs0.x+time/-2, rs0.y+time/2)*mask;\nwater = tex2D(sampler_noise_hq,rs) + tex2D(sampler_noise_hq,rs/4+time/-8);\n//water *= (water >= .0);\nwater -= 1;\n\nuv_wat = float2(uv1.x, abs(uv1.y))-water/z*.1* mask;//: mehr nahreflekt.\nuv_wat2 = aspect.yx*float2(uv1.x, abs(uv1.y-.45))-water/z*.1* mask2;\nuv_stars = float2(uv1.x, abs(uv1.y))-water/z*.02* mask;\n\nsky1 = saturate(.51*(1-uv_wat.y)*float3 (.2,.4,1)*.4);\nsunshine = (.013/length(uv_wat-sunpos))*suncol;\nsun = saturate (sunshine);\n\nfloat2 cofs = float2(0.5,-0);\nuv_clouds = frac(uv_wat2+cofs);\nclouds = tex2D (sampler_main, uv_clouds)*2 + GetBlur1(uv_clouds);\nsky1 = saturate (sky1 - clouds*2 + sun);\n\n\n//forest\nfloat size = abs(4-4*(uv.x+rand_preset)); \nuv5 = uv_wat/6 + float2(0,time*.00001);\nforest = (abs(uv_wat.y)*8)/size\n*(1+tex2D (sampler_noise_lq,uv5.x/4).x)\n*(1+.5*tex2D (sampler_noise_lq,float2(uv5.x/4,0)*18).r)\n*(1+.5*tex2D (sampler_noise_lq,float2(uv5.x*4,uv5.y*64)*4).r);\nforest = saturate(1-forest) ;\nfloat3 forest_col= saturate(fwidth(forest)*sqrt(sun)*8*(1-forest)\n*treecol*(1-mask*.7));\n\n//stars\nfloat2 uv2 = 64*(mul(uv_stars*aspect.xy,float2x2(.7,.7,-.7,.7)))+time*.25;\nfloat3 smask = (tex2D (sampler_pw_noise_lq,uv2/256)).g-.9;\nfloat stars = saturate(.3/length(abs(frac(uv2)-.5))*smask);\n\n\nfloat3 dots = saturate(.1/length(sin(2*rs-2*time)-.21) * float3(.1,.2,0));\n\n\nfloat cmask = saturate(1-lum(clouds.r*16));\nret = sky1*(saturate(1-.0*mask)) +stars*stars*(1-.5*mask) + dots*mask;\nret = max(ret * saturate(1-forest*4), forest_col);\nret = ret * cmask\n+ float3(clouds.r*.3,clouds.g,clouds.b) + \nsaturate(1-sqrt(isle/2))*mask*GetPixel(float2(.7,.3))\n*float3(0,1,1)*4*cmask + saturate(1-sqrt(isle/3))*cmask*.2;\n\n\n//ret = GetPixel(uv0)*12;\n}"}