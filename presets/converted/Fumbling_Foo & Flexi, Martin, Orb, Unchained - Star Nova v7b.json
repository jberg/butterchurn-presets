{"version":2,"baseVals":{"rating":5,"decay":1,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"invert":1,"wave_a":0.001,"warpanimspeed":100,"warpscale":0.01,"zoomexp":1.14947,"warp":0,"sx":0.9901,"sy":0.9901,"wave_r":0,"wave_g":0,"wave_b":0,"ob_size":0,"ob_r":1,"ob_g":1,"ob_b":1,"ib_r":1,"ib_g":1,"ib_b":1,"mv_a":0},"shapes":[{"baseVals":{"sides":30,"textured":1,"x":0.89,"y":0.86,"rad":0.92324,"tex_ang":1.19381,"tex_zoom":0.2274,"g":1,"b":1,"a":0.5,"r2":1,"b2":1,"border_r":0,"border_g":0,"border_a":0,"enabled":0},"init_eqs_eel":"tex_saw = 0.4;","frame_eqs_eel":""},{"baseVals":{"sides":30,"textured":1,"x":0.16,"y":0.73,"rad":0.9998,"tex_zoom":0.21006,"g":1,"b":1,"r2":1,"b2":1,"border_r":0,"border_g":0,"border_a":0,"enabled":0},"init_eqs_eel":"tex_saw = 0.4;","frame_eqs_eel":""},{"baseVals":{"sides":100,"rad":0.22167,"border_a":1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":1,"sides":100,"g":1,"b":1,"r2":1,"b2":1,"border_a":0},"init_eqs_eel":"","frame_eqs_eel":"a = above(q4,1000 - 9000/fps) && above(q3, 1.5);\na2 = above(q4,1000) && above(q3, 1.5);\n\nxx = if(above(q4,1000 - 3/fps), rand(100)*0.01, rand(100)*0.01);\nyy = if(above(q4,1000 - 3/fps), rand(100)*0.01, rand(70)*0.01 + .15);\nradi = if(above(q4, 1000 - 3/fps), sqrt(q3)*.333 + .15, sqrt(q3)*.4);\n\nrad = radi;\n\nx = xx;\ny = yy;\n\n\nr = 0.5 + 0.5*sin(q1*1.22) + 0.1;\ng = 0.45 + 0.45*sin(q1*1.307);\nb = 0.45 + 0.45*sin(q1*1.959);\n\n\nr2 = 0.5 + 0.5*sin(q1*1.622) + 0.1;\ng2 = 0.45 + 0.45*sin(q1*1.507);\nb2 = 0.45 + 0.45*sin(q1*1.6559);"}],"waves":[{"baseVals":{"enabled":1,"spectrum":1,"thick":1,"a":0.42},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"//init\nzs = if(below(zs,-9.42478),0,zs);\n\nzs = if(above(zs, 9.42478),0, zs);\n\nspeed = .0025*floor(tan(pow(q3, .667)))*(1.5708*atan(bass) + 1.5708*atan(mid) + 1.5708*atan(treb)); //pattern source?\n\n//sum\nzs += speed; //resonant beat detection\n\n//project position and radius and pattern speed & beat detection\nx = 0.5 + (0.18 + pow(q3, 1.25)*.005)*cos(zs*asin(1)*100);\ny = 0.5 + (0.18 + pow(q3, 1.25)*.005)*sin(zs*asin(1)*100);\n\n\n// color waveform to bass / mid / treble\nif(above(mid + treb, bass*2), r = .3 - abs(.33*sin(1 - q29*bass*bass)), r = .7 + abs(.33*sin(1 - q29*bass*bass)));\nif(above(bass + treb, mid*2), g = .3 - abs(.33*sin(1 - q30*mid*mid)), g = .7 + abs(.33*sin(1 - q30*mid*mid)));\nif(below(mid + bass, treb*2), b = .3 - abs(.33*sin(1 - q3*treb*treb)), b = .7 + abs(.33*sin(1 - q3*treb*treb)));\n\n//match opacity to nearness of central beat\na = .175 + q4*.0007;"},{"baseVals":{"samples":64,"spectrum":1,"thick":1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"thick":1,"a":0.42,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"thick":1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"index = 0;\nloop (200000,\n  megabuf(index) = 0;\n  gmegabuf(index) = 0;\n  index = index + 1;\n);\n\ntstart = time;\n\nbd_recsz   = 8;\nbd_oct     = 4; //Oktaven\nbd_spo     = 30;//Res. pro Oktave\nbd_finc    = pow(2.0,1/bd_spo); //Freq. Incr. \nbd_nres    = bd_oct * bd_spo;\nbd_minbpm  = 20;\nbd_maxbpm  = pow(2,bd_oct)*bd_minbpm;\n\n//mem spaces\nbd_dat0    = 100000;\nbd_tab0     = bd_dat0 + bd_nres * bd_recsz * 3;\n\n\n//Fill BPM Tab\n//n = bd_dat0;\n//BPM = bd_minbpm;\n//loop (bd_nres,gmegabuf (n) = BPM; BPM *=  bd_finc; n += bd_recsz;);\n\n\n//##### nur fuer Darstellung\nreg00 = bd_minbpm;\nreg01 = bd_maxbpm;\nreg02 = bd_recsz;\nreg03 = bd_nres;\nreg05 = bd_finc;\n\nreg06 = bd_dat0;\nreg07 = bd_mp0;\n\ntime_st = 0;\ntimediff = 1;","frame_eqs_eel":"//############## THIS IS A CONSTRUCTION SITE #########\n\ndt = min (1/fps,0.1) ; //Stability !\ndec_m = 1-dt*4; dec_s = 1 - dt; dec_xs = 1-dt/6;\nt0 = time - tstart;\n\nbd_b =  bass; bd_bass_ = bd_bass_*dec_m + (1-dec_m)*bd_b; bd_bass = bd_b-bd_bass_;\nbd_m =  mid ; bd_mid_  = bd_mid_ *dec_m + (1-dec_m)*bd_m; bd_mid =  bd_m -bd_mid_;\nbd_t =  treb; bd_treb_ = bd_treb_*dec_m + (1-dec_m)*bd_t; bd_treb = bd_t-bd_treb_;\n\nn = 0; BPM = bd_minbpm; \nloop (bd_nres, \n  gmegabuf(50000+n*bd_recsz) = 0; \n  bd_arg = BPM/60*t0*6.283; \n  gmegabuf (bd_tab0+n*bd_recsz) = BPM; \n  BPM *= bd_finc;\nn+=1);\n\nbd_src=0;\nloop (3, bd_exc = bd_bass*(bd_src==0) + bd_mid*(bd_src==1) + bd_treb*(bd_src==2);\n  oct = 0;\n  loop (bd_oct,\n    bd_slot = 0;\n    bd_pk = 0; bd_mean = 0.0;\n    loop (bd_spo,\n      bd_tabptr = bd_tab0 +                 (oct*bd_spo+ bd_slot)*bd_recsz;\n      n        =  bd_dat0 + (bd_nres*bd_src +oct*bd_spo+ bd_slot)*bd_recsz;\n      BPM = gmegabuf(bd_tabptr); bd_omega = BPM/60*6.283;\n      Feder = sqr(bd_omega); //Res.f = sqrt (Feder)/2pi (Hz)\n      gmegabuf (n+4) = gmegabuf(n+2); //alte pos\n      gmegabuf (n+1) *= 1-.5*dt * sqrt (BPM/300); //damping\n\n      EC_Steps = int (1 + BPM/50)*2;\n      loop (EC_Steps, // Euler-Cauchy steps\n        Kraft = bd_exc - Feder*gmegabuf(n + 2) ;\n        gmegabuf (n+1) += Kraft         * dt/EC_Steps;\n        gmegabuf (n+2) += gmegabuf(n+1) * dt/EC_Steps;  \n      );\n      beatcos = gmegabuf(n+1);  beatsin = gmegabuf(n+2)*bd_omega;\n      quad = sqrt (pow(beatsin,2) + pow(beatcos,2));\n      gmegabuf (n) = gmegabuf(n)*0.8 + 0.2*quad;\n      bd_ampl = gmegabuf(n);\n      bd_mean += bd_ampl;\n      if (bd_ampl > bd_pk, bd_pk=bd_ampl, 0);\n    bd_slot +=1;);\n // Komb. bass,mid,treb\n    bd_slot = 0;    \n    bd_qual = pow(bd_pk/bd_mean*bd_spo-1,1);\n    gmegabuf((bd_src*bd_oct+oct)*2) = bd_qual;\n    loop (bd_spo,\n      m =  50000 + (bd_slot + 0*oct*bd_spo)*bd_recsz;\n      n =  bd_dat0 + (bd_nres*bd_src +oct*bd_spo+ bd_slot)*bd_recsz; //#2x berechnet\n      gmegabuf(m) += (bd_qual)*gmegabuf (n)/12;\n    bd_slot +=1;);\n  oct += 1;);\nbd_src +=1;);\n\n\n//Get maxind\nbd_slot = 0; maxind = 0; bd_pk = 0; bd_mean = 0;\nloop (bd_spo,\n   m =  50000 + bd_slot*bd_recsz;\n   gmegabuf(m) = pow(gmegabuf(m),1);\n   bd_mean += gmegabuf(m);\n   if (gmegabuf(m) > bd_pk, bd_pk = gmegabuf(m); maxind = bd_slot, 0);\nbd_slot += 1);\nquali = bd_pk/bd_mean*bd_spo-1;\n\nn = 0; loop (150, gmegabuf(50+n) *= 0; n+=1);\n\n//KREISE\nbd_src = 0; tsin = 0; tcos = 0;\nloop (3,\n  oct = 0;  \n  loop (bd_oct,\n    n         =  bd_dat0 + (bd_nres*bd_src +oct*bd_spo+ maxind)*bd_recsz;\n    bd_tabptr = bd_tab0  +                 (oct*bd_spo+ maxind)*bd_recsz;\n    BPM = gmegabuf(bd_tabptr); \n\n    im =  gmegabuf(n+1);\n    re =  gmegabuf(n+2) * BPM/60*6.283;\n    bd_cos =  cos (BPM/60*6.28*time);\n    bd_sin = -sin (BPM/60*6.28*time);\n\n//Winkel zurueckdrehen. Das sind nun die Winkel relativ zu cos(oct*time).\n    re0 =  re*bd_cos + im*bd_sin;\n    im0 = -re*bd_sin + im*bd_cos;\n    bd_qual = gmegabuf((bd_src*bd_oct+oct)*2);\n    gmegabuf (50+oct*4)   +=  bd_qual * (im0)*1;\n    gmegabuf (50+oct*4+1) +=  bd_qual * (re0)*1;\n    gmegabuf (50+oct*4+2) +=  bd_qual;\n\n//Summe der besten Beitraege. Das ist der Referenzwinkel.\n    gmegabuf (100+0)  +=  bd_qual * im0;\n    gmegabuf (100+1)  +=  bd_qual * re0;\n\n//Nun sollten wir die Differenzwinkel zur Ref berechnen. Und was damit ? Dann kann ich die\n//Einzelwinkel auf Ref bringen - bringt doch nichts !\n//Ich kann alle auf Null drehen, daraus sinusse erzeuge und addieren ->besserer Takt ?\n    re =  (bd_cos*re0 + bd_sin*im0);\n    im =  (-bd_cos*im0 + bd_sin*re0);\ntsin += im*5;\n\n  oct += 1);\nbd_src +=1);\nq30 = tsin;\n\nvol = bass_att + mid_att + treb_att;\nvol_ = vol_*0.95 + 0.05*vol;\nq29 = vol-vol_;\n\n//Welche Oktave ???\nbd_src = 0; maxo = 0; maxs = 0; maxa = 0;\nloop (3,\n  oct = 1;  \n  loop (bd_oct-1,\n    n =  bd_dat0 + (bd_nres*bd_src +oct*bd_spo+ maxind)*bd_recsz;\n    bd_qual = gmegabuf((bd_src*bd_oct+oct)*2);\n\n    ampl = bd_qual / (1+oct*(maxind/bd_oct)*0);\n    if (ampl>maxa, maxa = ampl; maxs = bd_src; maxo = oct;, 0);\n  oct += 1);\nbd_src +=1);\n\nq28 = pow(4*bd_qual,1.5);\nq31 = q28;\nif(above(q28,50),q28 = pow(5*sin(.5*bd_qual), 2), 0);\n\n//monitor = q31;\n\n\n//Beat-Flash\ntesti = bd_nres*maxs +bd_spo*maxo + maxind;\nif (bor (beat && (prog==0), abs(testi-test0)<2),test0 = testi,0);\nn =  bd_dat0 + (test0)*bd_recsz;\ncreep = gmegabuf(n+1);\nbeat =  (creep>0) * (creepo <0);\nbeatct = if (change, 0, beatct+beat);\nprog = (prog+beat)%8;\ncreepo = creep;\nshow = if (beat, 1, show*0.5);\nq4 = (gmegabuf(n+1)/gmegabuf(n)*1000);\nq2 = prog;\n\n\nif(beat, timediff = time - time_st; time_st = time, timediff = timediff); \nif(below(timediff, .0625), timediff = .0625, timediff = timediff);\nq8 = timediff;\n//avgtime = avgtime*.975 + timediff*.0225;\n//q9 = avgtime;\n\nmonitor = q8;\n\n//Selbst bei Barbie Girl fehlt manchmal der Rhythmus in Band 2,\n//obwohl das der gefuehlte Takt ist - >Problem mit Phasenkorrektur !\n//stehen Phasen bei doppelter Frequenz in Relation ? NEIN.\n\n\n\n\n\n//Problem: Fats Domino (1992) hat 55BPM -> Problem mit 110\n//Problem: 1991 London Beat I been thinking about you - geht nicht - solved\n//Problem: U96 - Love religion (1995) beginnt mit BPM < 20\n//Porblem: adiemus (1995)\n//Konflikt-Beat siehe Michale jackson b&W (1991)\n\n\nq24 = bd_maxbpm;\n//q32 = aspecty;\n\n\nold_bass_flop=bass_flop;\nold_treb_flop=treb_flop;\nold_mid_flop=mid_flop;\nchaos=.9+.1*sin(pulse);\nentropy=if(equal(pulse,-20),1+bass_flop+treb_flop+mid_flop+q4*.002,entropy);\nbass_thresh = above(bass_att,bass_thresh)*2 + (1-above(bass_att,bass_thresh))*((bass_thresh-1.6)*chaos+1.6);\nbass_flop=abs(bass_flop-equal(bass_thresh,2));\ntreb_thresh=above(treb_att,treb_thresh)*2 + (1-above(treb_att,treb_thresh))*((treb_thresh-1.6)*chaos+1.6);\ntreb_flop=abs(treb_flop-equal(treb_thresh,2));\nmid_thresh=above(mid_att,mid_thresh)*2 + (1-above(mid_att,mid_thresh))*((mid_thresh-1.6)*chaos+1.6);\nmid_flop=abs(mid_flop-equal(mid_thresh,2));\nbass_changed=bnot(equal(old_bass_flop,bass_flop));\nmid_changed=bnot(equal(old_mid_flop,mid_flop));\ntreb_changed=bnot(equal(old_treb_flop,treb_flop));\nbass_residual = bass_changed*sin(pulse*1.5) + bnot(bass_changed)*bass_residual;\ntreb_residual = treb_changed*sin(pulse*1.5) + bnot(treb_changed)*treb_residual;\nmid_residual = mid_changed*sin(pulse*1.5) + bnot(mid_changed)*mid_residual;\npulse=if(above(abs(pulse),20),-20,pulse+(bass_thresh+mid_thresh+treb_thresh)*.018);\nq11=mid_residual;\nq12=bass_residual;\nq13=treb_residual;\nq14=sin(pulse);\nq15=cos(pulse*(.5+.1*entropy));\nq16=sin(pulse*(.5+pow(.25,entropy)));\nob_r=sin(time*1.0785+q16);\nob_b=sin(time*0.8445+q15);\nob_g=sin(time*.413+q14);\nib_r=cos(time*0.6+q11*.1);\nib_b=cos(time*1.4055+q12*.1);\nib_g=cos(time*0.833+q13*.1);\nib_size=.05+.03*q12;\nob_size=.03+.02*sin(time*2.321+q12*.2);\nob_a=.6+.4*q13;\nib_a=.9+.1*sin(q12*.3+q14+q11*.5);\nrot=0;\n\n//monitor = q13;\n\n\nbasstime += q29*.1*30/fps;\nq1 = basstime;\n\n//start in most active range\nbasstime = if(below(basstime, -10000), 0, basstime);\nbasstime = if(above(basstime, 10000), 0, basstime);\n\nbasstime += bass_att*0.025 * 30/fps;\nvol2 = pow(bass+mid+treb,2);\nbasssum = vol2;\n\nstickybit = time%2;\n\n//avg vol\n//buffer 1\nvolAvg = volAvg + vol2*equal(stickybit,1);\n//number of samples 1 or framerate\nsample1 = sample1 + equal(stickybit,1);\n//buffer 2\nvolAvg2 = volAvg2 + vol2*equal(stickybit,0);\n//number of samples 2\nsample2 = sample2 + equal(stickybit,0);\n\n//transision\nedge = bnot(equal(bit2,stickybit));\n\nvolAvg = volAvg - volAvg*edge*stickybit;\nvolAvg2 = volAvg2 - volAvg2*edge*equal(stickybit,0);\n\nsample1 = sample1  - sample1*edge*stickybit;\nsample2 = sample2  - sample2*edge*equal(stickybit,0);\n\n//test vol against avg buffer lvl\ndiff = if(equal(stickybit,1), (basssum/(volAvg2/sample2)) , 0);\ndiff = if(equal(stickybit,0), (basssum/(volAvg/sample1)), diff);\n\nq3 = diff;\n//pv_beat = pv_beat*0.2*sqrt(fps/30) + 0.1*(bass_att*bass + mid_att*mid + treb_att*treb)*sqrt(q3);\npv_beat = pv_beat*0.2*sqrt(fps/30) + 0.1*(bass_att*bass_att + mid_att*mid_att + treb_att*treb_att)*(.001*q4)/sqrt(q8);\nq32 = pv_beat;\nmonitor = q32;\n\nbit2 = time%2;\n\ndifftime = difftime + diff*0.03;\nq2 = difftime;\n\nwarp = (bass*bass + mid*mid + treb*treb)*.005;\n\nfoo_r = sin(q1*0.34313);\nfoo_g = sin(q1*0.3675);\nfoo_b = sin(q1*0.55095);\n\nif(above(foo_r, foo_g) && above(foo_r, foo_b), q23 = 1, q23 = 0);\nif(above(foo_g, foo_r) && above(foo_g, foo_b), q21 = 1, q21 = 0);\nif(above(foo_b, foo_r) && above(foo_b, foo_g), q22 = 1, q22 = 0);\nif(equal(q11+q12+q13,0), q22 = 1, 0);\n\nq5 = 30/fps;\n\nq19 = 50;\nq20 = 1;\n\nif(above(q31, 14), q19 = 100, q19 = q19);\n\nif(above(q31, 50), q19 = 500, q19 = q19);\n\n//if(above(q31, 55), \n//     if(above(q3, 3.5), foo = 1.0 + .333/(bass_att*bass_att*bass_att); q20 = 30000, foo = foo);\n//     if(above(bass_att + mid_att + treb_att, 2.5), q19 = foo; q20 = 30000, q19 = q19),\n//     q19 = q19);\n\n\n\n//if(below(bass_att + mid_att + treb_att, 1), q19 = 0, q19 = q19);\n\n\nif(above(q3, 2), q19 = .5 + 10*q8, q19 = q19);","pixel_eqs_eel":"if(q32>1.2*sqrt(bass_att), \n    rot=if(above(q14,0),rad*.2*q15,tan(rad*(.001*q4)));\n    zoom=if(above(q12,1.5),zoom+(1-zoom)*rot*cos(rad*3.14*q12),if(above(q13,2)*above(x,.5+.5*q15),zoom+(1-zoom)*sin(q11*rot*3.14),zoom+(1-zoom)*cos(rad*3*q16)));\n    dx=above(q11,0)*sin(rad*.5*q12);\n    dy=above(q13,0)*sin(rad*.5*q13),\n\n    zoom = q19;\n    zoomexp = q20;\n    rot = 0);","warp":" shader_body { \n  vec3 ret_1;\n  vec4 tmpvar_2;\n  tmpvar_2 = texture (sampler_pw_main, uv_orig);\n  ret_1 = ((texture (sampler_blur1, tmpvar_2.xy).xyz * scale1) + bias1);\n  vec3 tmpvar_3;\n  tmpvar_3 = vec3((((1.0 - ret_1.x) * (1.0 - ret_1.y)) * (1.0 - ret_1.z)));\n  vec2 tmpvar_4;\n  tmpvar_4 = (((texsize.zw * q5) * -3.0) * ((\n    pow (tmpvar_3, vec3(0.333, 0.333, 0.333))\n   + \n    ((((0.5 * tmpvar_3) * (\n      (texture (sampler_blur2, ret_1.xx).xyz * scale2)\n     + bias2)) * ((texture (sampler_blur2, ret_1.yy).xyz * scale2) + bias2)) * ((texture (sampler_blur2, ret_1.zz).xyz * scale2) + bias2))\n  ) + (\n    ((0.25 * ((texture (sampler_blur3, ret_1.xx).xyz * scale3) + bias3)) * ((texture (sampler_blur3, ret_1.yy).xyz * scale3) + bias3))\n   * \n    ((texture (sampler_blur3, ret_1.xx).xyz * scale3) + bias3)\n  )).xy);\n  vec3 tmpvar_5;\n  tmpvar_5 = (((texture (sampler_blur1, \n    (uv_orig + (vec2(1.0, 0.0) * tmpvar_4))\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \n    (uv_orig - (vec2(1.0, 0.0) * tmpvar_4))\n  ).xyz * scale1) + bias1));\n  vec3 tmpvar_6;\n  tmpvar_6 = (((texture (sampler_blur1, \n    (uv_orig + (vec2(0.0, 1.0) * tmpvar_4))\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \n    (uv_orig - (vec2(0.0, 1.0) * tmpvar_4))\n  ).xyz * scale1) + bias1));\n  vec2 tmpvar_7;\n  tmpvar_7.x = tmpvar_5.x;\n  tmpvar_7.y = tmpvar_6.x;\n  vec2 tmpvar_8;\n  tmpvar_8.x = tmpvar_5.y;\n  tmpvar_8.y = tmpvar_6.y;\n  vec2 tmpvar_9;\n  tmpvar_9.x = tmpvar_5.z;\n  tmpvar_9.y = tmpvar_6.z;\n  vec2 tmpvar_10;\n  tmpvar_10 = (uv_orig + ((\n    (((tmpvar_7 * q21) + (tmpvar_8 * q22)) + (tmpvar_9 * q23))\n   * texsize.zw) * 6.0));\n  ret_1 = ((texture (sampler_main, tmpvar_10).xyz + (\n    (texture (sampler_main, uv).xyz - ((texture (sampler_blur1, uv).xyz * scale1) + bias1))\n   * 0.1)) - ((0.00015 * q28) * (\n    ((((\n      (texture (sampler_main, tmpvar_10).x * texture (sampler_main, tmpvar_10).y)\n     * texture (sampler_main, tmpvar_10).z) / (2.0 * q8)) + ((\n      sqrt(treb)\n     * texture (sampler_main, tmpvar_10).x) * texture (sampler_main, tmpvar_10).y)) + ((sqrt(mid) * texture (sampler_main, tmpvar_10).x) * texture (sampler_main, tmpvar_10).z))\n   + \n    ((sqrt(bass) * texture (sampler_main, tmpvar_10).y) * texture (sampler_main, tmpvar_10).z)\n  )));\n  ret_1.x = mix (ret_1.x, (1.01 * texture (sampler_pc_main, tmpvar_10).x), (bass_att * 0.05));\n  ret_1.y = mix (ret_1.y, (1.01 * texture (sampler_pc_main, tmpvar_10).y), (mid_att * 0.05));\n  ret_1.z = mix (ret_1.z, (1.01 * texture (sampler_pc_main, tmpvar_10).z), (treb_att * 0.05));\n  ret_1 = (ret_1 + ((\n    (pow (q3, 1.2) - 0.25)\n   * 0.00667) * tmpvar_2).xyz);\n  vec4 tmpvar_11;\n  tmpvar_11.w = 0.0;\n  tmpvar_11.xyz = ret_1;\n  vec3 tmpvar_12;\n  tmpvar_12 = mix (tmpvar_11, texture (sampler_pc_main, uv), vec4(float((\n    (q32 * sqrt(((\n      ((1.0 - ret_1.x) * (1.0 - ret_1.y))\n     + \n      ((1.0 - ret_1.x) * (1.0 - ret_1.z))\n    ) + (\n      (1.0 - ret_1.y)\n     * \n      (1.0 - ret_1.z)\n    ))))\n   > 1.333)))).xyz;\n  ret_1 = tmpvar_12;\n  vec4 tmpvar_13;\n  tmpvar_13.w = 1.0;\n  tmpvar_13.xyz = tmpvar_12;\n  ret = tmpvar_13.xyz;\n }","comp":" shader_body { \n  vec3 ret_1;\n  ret_1 = mix (texture (sampler_main, uv).xyz, texture (sampler_main, ((0.5 - uv) + 0.5)).xyz, vec3(0.5, 0.5, 0.5));\n  ret_1 = (1.0 - ((ret_1 * \n    (1.0 - ret_1)\n  ) * 4.0));\n  vec4 tmpvar_2;\n  tmpvar_2.w = 1.0;\n  tmpvar_2.xyz = ret_1;\n  ret = tmpvar_2.xyz;\n }"}