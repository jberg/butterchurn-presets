{"version":2,"baseVals":{"rating":4,"gammaadj":1.88,"decay":0.5,"echo_zoom":0.952,"echo_alpha":0.5,"wave_mode":6,"modwavealphabyvolume":1,"wave_brighten":0,"darken":1,"wave_a":0,"wave_scale":1.211,"wave_smoothing":0.09,"wave_mystery":0.4,"modwavealphastart":1.42,"modwavealphaend":2,"warpanimspeed":1.459,"warpscale":2.007,"zoom":1.0099,"warp":0.01,"sx":0.9999,"wave_r":0,"wave_x":1,"ob_size":0,"ob_r":0.1,"ob_b":0.3,"ib_size":0.15,"ib_r":0.6,"ib_g":0.5,"ib_b":0.4,"mv_l":0,"mv_a":0,"b1x":0.6,"b2x":0.6,"b1ed":0},"shapes":[{"baseVals":{"enabled":1,"sides":25,"thickoutline":1,"textured":1,"rad":0.5703,"g":1,"b":1,"a":0,"r2":1,"b2":1,"a2":0.5,"border_a":0},"init_eqs_eel":"bob = 1.5;\nro = 0;\nred = rand(20);","frame_eqs_eel":"rad = 0.57 + 0.1*sin(q1*1.24);\n\ntex_zoom = 1.2+0.4*sin(q3);\ntex_ang = sin(q4*3.29);\n\nborder_a = q24/4;\n\nx = 0.5 + 0.10*sin(q2*0.62);\ny = 0.5 + 0.10*sin(q3*0.73);\na = 0.5 + 0.5*sin(q4*0.452);\n\na2 = min(0.8,1+sin(q4*1.6));\na = 1-a2;"},{"baseVals":{"enabled":1,"sides":15,"thickoutline":1,"num_inst":4,"g":1,"b":1,"g2":0,"a2":0.5,"border_r":0,"border_a":0},"init_eqs_eel":"","frame_eqs_eel":"arg = (q10/num_inst + instance/num_inst)*6.283;\n\nrad1 = 0.25 ;\n\nccx = 0.5 + 0.1*sin(q4*2.7);\nccy = 0.5 + 0.1*sin(q1*4.8);\n\nx = ccx + rad1*cos(arg * q11-q1*0.31)/q11;\ny = ccy + rad1*sin(arg)*q32;\n\nrad = min(0.3,(bass_att+mid_att)*0.04);\n\n//rad *= 0.5+pow(sin(cos(q1)),4)*3;\n\nr = 0.5 + 0.4*sin(frame/4);\nb = 0.5 + 0.4*sin(frame/4 + 2.1);\ng = 0.5 + 0.4*sin(frame/4 + 4.2);\nfac = 0.5;\nr2 = r*fac; b2=b*fac; g2=g*fac;\na = 1 ; a2 = q11/2;\n\nborder_a = (q27<3);"},{"baseVals":{"textured":1,"num_inst":4,"rad":0.40272,"tex_ang":2.51327,"tex_zoom":0.55045,"g":0.95,"b":1,"r2":1,"b2":1,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"tex_ang = q3;\nk1 = instance/num_inst*6.28+3.14/4;\nx = 0.5 + 0.5*cos(k1);\ny = 0.5 + 0.5*sin(k1);\n\n//border_a = q24;"},{"baseVals":{"enabled":1,"sides":5,"num_inst":25,"rad":0.08195,"tex_zoom":0.90529,"g":1,"b":1,"a":0.2,"r2":0.3,"g2":0.3,"b2":0.3,"a2":0.2,"border_a":0},"init_eqs_eel":"","frame_eqs_eel":"if (instance==0,k1=0,k1 += 0.05*bass_att);\n\nk2 = k1+q10*6.283;\nccx = 0.2*sin(q4*.96);\nccy = 0.2*-sin(q3*.296);\n\nx = 0.5 + ccx + 0.3*cos(k2+sin(q2*2.29));\ny = 0.5 + ccy + 0.3*sin(k2)*q32;\n\nang = k2;\nrad = min(0.1,0.035*treb_att);\n\n//rad = 0.4; a=1; textured = 1;"}],"waves":[{"baseVals":{"additive":1,"a":0.1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"n = -5000; loop (20000, megabuf(n)=0; gmegabuf(n)=0; n +=1; );\n\nMINBPM = 50; MAXBPM = 180; num_res = 80; num_sig=3;\nblocksize = num_res*12+12; \nreg04 = blocksize;\n\nsig = 0;\nloop (num_sig,\n  index = 0;\n  loop (num_res,\n    n = blocksize*sig + 12*index;\n    BPM      = minbpm * pow(maxbpm/minbpm,index/num_res);\n    gmegabuf(n) = BPM;\n    index += 1;\n  );\nsig+=1);\n\npi = 3.1416;\nOCTAVE = (num_res) * log(2) / log (MAXBPM / MINBPM);\n\nprog = 0;\nbindex = int (rand(8));\ncount5 = int (rand(8));","frame_eqs_eel":"dt = min (1/fps,0.1) ; //Stability !\ndec_f = 0.8; dec_m = 1 - 4*dt; dec_s = 1 - dt;\n\nbeat = max (max (bass, mid), treb); \navg = avg*dec_s + beat*(1-dec_s);\nis_beat = above(beat, .5+avg+peak) * above (time, t0+.25);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_m;\nbindex = (bindex + is_beat) %16;\nq24 = is_beat;\nq27 = bindex;\n\nsig=0; \nloop (num_sig,\n  excite = if (sig==0, bass-bass_att, if (sig==1, mid-mid_att, treb-treb_att));\n  index = 0; maxquad = 0;\n  m = sig*blocksize+num_res*12; // Start Infoblock;\n  gmegabuf(m+2) = 0.001; //lok. MW\n  gmegabuf(m+3) = 0; //lok. MAX\n  loop (num_res, \n    n = sig*blocksize+index*12;  omega=gmegabuf(n) * 6.283/60;\n    gmegabuf (n+1) *= 1- 0.22*dt; \n    EC_Steps = int (10*dt*omega)+1; dt1 = dt/EC_Steps;\n    ex = excite / sqrt(omega);\n    loop (EC_Steps, // Euler-Cauchy \n      gmegabuf (n+1) += (ex - sqr(omega)*gmegabuf(n+2)) * dt1;\n      gmegabuf (n+2) += gmegabuf(n+1) * dt1);\n    beatcos  = gmegabuf(n+1);  beatsin = gmegabuf(n+2)*omega;\n    quad     = sqrt (pow(beatsin,2) + pow(beatcos,2)) ;\n    gmegabuf (m+4) += abs (gmegabuf(n+3)-Quad); //Lok Aenderung\n    gmegabuf (n+3) = gmegabuf(n+3) *dec_m +  quad* (1-dec_m);\n    if (gmegabuf(n+3) > gmegabuf(m+3),gmegabuf(m+3)=gmegabuf(n+3),0); //LOK MAX\n    gmegabuf (m+2) += gmegabuf(n+3)/num_res; //LOK MW\n    gmegabuf(n+4)= beatcos;\n    gmegabuf(n+5)= beatsin;\n  index += 1;);\nsig+=1;);\n\n\n//Beste raussuchen\nsig = 0; quali = 0; bestsig = -1;\nloop (num_sig,\n  m = sig*blocksize+num_res*12; // Start Infoblock;\n  tmp = gmegabuf(m+3)/gmegabuf(m+2) ;\n  if (tmp > quali, quali = tmp; bestsig = sig;, 0);\nsig += 1);\n\nindex = 0; maxind1 = 0; maxv *= dec_s;\nloop (num_res, \n  n = bestsig*blocksize+index*12; // Start Infoblock;\n  tmpv = gmegabuf(n+3);\n  if (tmpv > maxv, maxv=tmpv; maxind1=index, 0);\nindex += 1;);\n\nBPM   = minbpm * pow(maxbpm/minbpm,maxind1/num_res);\ntrel1 += BPM/60*dt;\nq10 = trel1;\nq11 = (BPM < 125) * (sin(q10*6.283/128)>0.3) * (quali >4) +1;\nq12 = max(0,quali-2);\n\ntrig = is_beat && (bindex%2==0);\nr1 = if (trig, rand(2)-1, r1);\nr2 = if (trig, rand(2)-1, r2);\nr3 = if (trig, rand(2)-1, r3);\nr4 = if (trig, rand(2)-1, r4);\n\nv0 = (bass+mid+treb)/3;\ndec = if (v0>vol,0.5,dec_s);\nvol = vol*dec + (1-dec)*v0;\ndir = if (bindex<12,1,-1);\ntm1 += (r1>0.3)*dt*(0.8+vol)/1.8*dir;\ntm2 += (r2>0.3)*dt*(0.8+vol)/2.3;\ntm3 += (r3>0.3)*dt*(0.8+vol)/3.4;\ntm4 += (r4>0.3)*dt*(0.8+vol)/3.6;\n\ntm1_ = dec_f*tm1_ + (1-dec_f)*tm1;\ntm2_ = dec_f*tm2_ + (1-dec_f)*tm2;\ntm3_ = dec_f*tm3_ + (1-dec_f)*tm3;\ntm4_ = dec_f*tm4_ + (1-dec_f)*tm4;\n\nq1 = tm1_;\nq2 = tm2_;\nq3 = tm3_;\nq4 = tm4_;\n\nq25 = is_beat * (v0 > 4)* (prog > 30);\ncount5 += (is_beat && (v0 > 5));;\n\ncount6 += (bindex==0)*is_beat*(v0>3);\nq26 = count5;\n\nwarp = cos(q1*0.29)/4;\nzoom = 1 + 0.025*sin(q3-q1*1.32);\nrot = .0;\n\ntrel3 += sin(q10*6.283)*dt;\nq18 = trel3;\n\nq32 = aspecty;\nprog += 1;\nreg50 = dt;\n\ntrel4 += (q12 >1.5) * BPM/60*pi/2*dt;\nq28 = -trel4;\n\ndec = if (v0 > vol2, 0.5, dec_m);\nvol2 = vol2*dec + (1-dec)*v0;\nq21 = min(1.8,(vol2/5+0.6));\n\ntrig = is_beat && (bindex%8==0);\nif (trig,\n  obs = rand(10)/30;\n  iba =   rand(10)/100 * rand(10)/10;\n,0);\nob_size = obs;\nib_a = iba;\nib_r = 0.3 + 0.2*sin(time/11);\nib_g = 0.3 + 0.2*sin(time/17);\nib_b = 0.3 + 0.2*sin(time/7);\n\nmonitor = q12;","pixel_eqs_eel":"","warp":" shader_body { \n  vec2 tmpvar_1;\n  tmpvar_1 = ((uv * texsize.xy) * 0.03);\n  vec2 tmpvar_2;\n  tmpvar_2.x = (cos(tmpvar_1.y) * sin(-(tmpvar_1.y)));\n  tmpvar_2.y = (sin(tmpvar_1.x) * cos(-(tmpvar_1.y)));\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = ((texture (sampler_main, (uv - \n    ((tmpvar_2 * texsize.zw) * 12.0)\n  )) * 0.98) - 0.008).xyz;\n  ret = tmpvar_3.xyz;\n }","comp":"uniform sampler2D sampler_rand00;\nfloat fc;\nfloat size;\nvec2 hor;\nvec2 ver;\nfloat xlat_mutableang1;\nfloat xlat_mutableca;\nvec2 xlat_mutabledz;\nfloat xlat_mutablesa;\nvec2 xlat_mutableuv1;\nvec2 xlat_mutableuv4;\n shader_body { \n  fc = (0.5 + (0.3 * sin(q4)));\n  size = (0.4 + (0.1 * sin(q2)));\n  vec2 tmpvar_1;\n  tmpvar_1.y = 0.0;\n  tmpvar_1.x = texsize.z;\n  hor = (tmpvar_1 * 2.0);\n  vec2 tmpvar_2;\n  tmpvar_2.x = 0.0;\n  tmpvar_2.y = texsize.w;\n  ver = (tmpvar_2 * 2.0);\n  vec2 uv_3;\n  float noise_4;\n  vec3 ret_5;\n  uv_3 = (((\n    (uv - 0.5)\n   * 2.0) / (1.0 + rad)) + 0.5);\n  xlat_mutableuv1 = (((\n    (uv_3 - 0.5)\n   * aspect.xy) * (1.2 + \n    (rand_preset.y * 0.4)\n  )) + 0.5);\n  xlat_mutableang1 = (((\n    (q1 / 7.0)\n   + \n    (q2 / 9.0)\n  ) + (q3 / 11.0)) - q26);\n  xlat_mutableang1 = (xlat_mutableang1 * 1.8);\n  xlat_mutableca = cos(xlat_mutableang1);\n  xlat_mutablesa = sin(xlat_mutableang1);\n  mat2 tmpvar_6;\n  tmpvar_6[uint(0)].x = xlat_mutableca;\n  tmpvar_6[uint(0)].y = -(xlat_mutablesa);\n  tmpvar_6[1u].x = xlat_mutablesa;\n  tmpvar_6[1u].y = xlat_mutableca;\n  xlat_mutableuv1 = (((xlat_mutableuv1 - 0.5) * tmpvar_6) + 0.5);\n  vec2 tmpvar_7;\n  tmpvar_7.x = xlat_mutableuv1.x;\n  tmpvar_7.y = (abs((xlat_mutableuv1.y - size)) + size);\n  mat2 tmpvar_8;\n  tmpvar_8[uint(0)].x = xlat_mutableca;\n  tmpvar_8[uint(0)].y = -(xlat_mutablesa);\n  tmpvar_8[1u].x = xlat_mutablesa;\n  tmpvar_8[1u].y = xlat_mutableca;\n  xlat_mutableuv1 = (((tmpvar_7 - 0.5) * tmpvar_8) + 0.5);\n  vec2 tmpvar_9;\n  tmpvar_9.x = xlat_mutableuv1.x;\n  tmpvar_9.y = (abs((xlat_mutableuv1.y - size)) + size);\n  mat2 tmpvar_10;\n  tmpvar_10[uint(0)].x = xlat_mutableca;\n  tmpvar_10[uint(0)].y = -(xlat_mutablesa);\n  tmpvar_10[1u].x = xlat_mutablesa;\n  tmpvar_10[1u].y = xlat_mutableca;\n  xlat_mutableuv1 = (((tmpvar_9 - 0.5) * tmpvar_10) + 0.5);\n  vec2 tmpvar_11;\n  tmpvar_11.x = xlat_mutableuv1.x;\n  tmpvar_11.y = (abs((xlat_mutableuv1.y - size)) + size);\n  mat2 tmpvar_12;\n  tmpvar_12[uint(0)].x = xlat_mutableca;\n  tmpvar_12[uint(0)].y = -(xlat_mutablesa);\n  tmpvar_12[1u].x = xlat_mutablesa;\n  tmpvar_12[1u].y = xlat_mutableca;\n  xlat_mutableuv1 = (((tmpvar_11 - 0.5) * tmpvar_12) + 0.5);\n  vec2 tmpvar_13;\n  tmpvar_13.x = xlat_mutableuv1.x;\n  tmpvar_13.y = (abs((xlat_mutableuv1.y - size)) + size);\n  mat2 tmpvar_14;\n  tmpvar_14[uint(0)].x = xlat_mutableca;\n  tmpvar_14[uint(0)].y = -(xlat_mutablesa);\n  tmpvar_14[1u].x = xlat_mutablesa;\n  tmpvar_14[1u].y = xlat_mutableca;\n  xlat_mutableuv1 = (((tmpvar_13 - 0.5) * tmpvar_14) + 0.5);\n  vec2 tmpvar_15;\n  tmpvar_15.x = xlat_mutableuv1.x;\n  tmpvar_15.y = (abs((xlat_mutableuv1.y - size)) + size);\n  xlat_mutableuv1 = (((\n    (tmpvar_15 - fc)\n   * aspect.yx) + fc) + (0.1 * cos(\n    (q4 * 2.72)\n  )));\n  vec2 tmpvar_16;\n  tmpvar_16 = fract(xlat_mutableuv1);\n  xlat_mutabledz.x = dot (((2.0 * \n    ((texture (sampler_blur1, (tmpvar_16 - hor)).xyz * scale1) + bias1)\n  ) - (2.0 * \n    ((texture (sampler_blur1, (tmpvar_16 + hor)).xyz * scale1) + bias1)\n  )), vec3(0.32, 0.49, 0.29));\n  xlat_mutabledz.y = dot (((2.0 * \n    ((texture (sampler_blur1, (tmpvar_16 - ver)).xyz * scale1) + bias1)\n  ) - (2.0 * \n    ((texture (sampler_blur1, (tmpvar_16 + ver)).xyz * scale1) + bias1)\n  )), vec3(0.32, 0.49, 0.29));\n  float tmpvar_17;\n  tmpvar_17 = (0.5 / log((1.0 + \n    pow ((uv_3.x - 0.5), 0.5)\n  )));\n  xlat_mutableuv4 = (uv_3 - 0.5);\n  vec2 tmpvar_18;\n  tmpvar_18.x = (tmpvar_17 + (time * 0.1));\n  tmpvar_18.y = (xlat_mutableuv4.y * tmpvar_17);\n  xlat_mutableuv4 = tmpvar_18;\n  noise_4 = ((texture (sampler_noise_lq, tmpvar_18).x + 0.25) * (1.0 - texture (sampler_noise_lq, (tmpvar_18 + \n    (texsize.zw * -4.0)\n  )).x));\n  noise_4 = (noise_4 * (0.5 + dot (\n    vec4(greaterThan (texture (sampler_rand00, tmpvar_18), vec4(0.5, 0.5, 0.5, 0.5)))\n  , vec4(0.32, 0.49, 0.29, 0.0))));\n  float tmpvar_19;\n  tmpvar_19 = clamp ((q21 - (1.1 * rad)), 0.0, 1.0);\n  ret_5 = ((0.08 + (\n    (1.3 * (1.2 - tmpvar_19))\n   * \n    ((texture (sampler_blur2, tmpvar_16).xyz * scale2) + bias2)\n  )) * (0.2 + noise_4));\n  vec2 x_20;\n  x_20 = (cos((12.0 * tmpvar_16)) + (xlat_mutabledz * 16.0));\n  vec3 tmpvar_21;\n  tmpvar_21 = ((tmpvar_19 / (\n    sqrt(dot (x_20, x_20))\n   + 0.07)) * ((texture (sampler_blur1, tmpvar_16).xyz * scale1) + bias1));\n  ret_5 = (max (ret_5, tmpvar_21) + ((0.2 * tmpvar_19) * tmpvar_21));\n  xlat_mutableang1 = (q28 / 2.0);\n  xlat_mutableca = cos(xlat_mutableang1);\n  xlat_mutablesa = sin(xlat_mutableang1);\n  mat2 tmpvar_22;\n  tmpvar_22[uint(0)].x = xlat_mutableca;\n  tmpvar_22[uint(0)].y = -(xlat_mutablesa);\n  tmpvar_22[1u].x = xlat_mutablesa;\n  tmpvar_22[1u].y = xlat_mutableca;\n  xlat_mutableuv1 = (((tmpvar_16 - 0.5) * tmpvar_22) + 0.5);\n  vec2 tmpvar_23;\n  tmpvar_23.x = xlat_mutableuv1.y;\n  tmpvar_23.y = (abs((xlat_mutableuv1.x - size)) + size);\n  mat2 tmpvar_24;\n  tmpvar_24[uint(0)].x = xlat_mutableca;\n  tmpvar_24[uint(0)].y = -(xlat_mutablesa);\n  tmpvar_24[1u].x = xlat_mutablesa;\n  tmpvar_24[1u].y = xlat_mutableca;\n  xlat_mutableuv1 = (((tmpvar_23 - 0.5) * tmpvar_24) + 0.5);\n  vec2 tmpvar_25;\n  tmpvar_25.x = xlat_mutableuv1.y;\n  tmpvar_25.y = (abs((xlat_mutableuv1.x - size)) + size);\n  xlat_mutableuv1 = tmpvar_25;\n  float tmpvar_26;\n  tmpvar_26 = cos((8.0 * tmpvar_25.x));\n  ret_5 = (ret_5 + ((\n    ((1.0 - rad) * 0.6)\n   * \n    clamp (((0.05 / abs(\n      sqrt((tmpvar_26 * tmpvar_26))\n    )) - 0.5), 0.0, 1.0)\n  ) * noise_4));\n  vec2 x_27;\n  x_27 = (uv_3 - 0.5);\n  vec3 tmpvar_28;\n  tmpvar_28 = mix (vec3(dot (ret_5, vec3(0.32, 0.49, 0.29))), ret_5, vec3(clamp ((2.2 - \n    (3.0 * sqrt(dot (x_27, x_27)))\n  ), 0.0, 1.0)));\n  ret_5 = tmpvar_28;\n  vec4 tmpvar_29;\n  tmpvar_29.w = 1.0;\n  tmpvar_29.xyz = tmpvar_28;\n  ret = tmpvar_29.xyz;\n }"}