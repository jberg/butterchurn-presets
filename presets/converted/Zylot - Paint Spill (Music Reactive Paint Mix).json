{"version":2,"baseVals":{"rating":3,"wave_mode":2,"wrap":0,"wave_a":0.001,"wave_scale":5.819,"wave_mystery":-0.38,"wave_r":0.5,"wave_g":0.5,"wave_b":0.5,"mv_a":0},"shapes":[{"baseVals":{"sides":100,"rad":0.16446,"g":1,"b":1,"a":0,"r2":1,"b2":1,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"a = if(above(bass,2.5),1,0);"},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"thick":1},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"y = sample;\nx = (value1+value2)*.003;\na = (value1+value2)*.1;\nr = .5+.3*sin(sample*10+time);\ng = .5+.3*cos(sample*10-time*1.334);\nb = .5+.3*sin(sample*10+time*.998);"},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"","frame_eqs_eel":"warp = 0;\nwave_r = wave_r + .4*sin(time*.333)+bass_att*.2;\nwave_g = wave_g + .4*sin(time*.555)+treb_att*.2;\nwave_b = wave_b + .4*sin(time*.444)+mid_att*.2;","pixel_eqs_eel":"","warp":" shader_body { \n  vec2 muv_1;\n  vec3 ret_2;\n  float tmpvar_3;\n  tmpvar_3 = (2.0 * bass_att);\n  muv_1.x = (uv.x - ((\n    ((0.01 * cos((\n      (uv.x * (5.0 + tmpvar_3))\n     + time))) + (0.01 * cos((\n      (uv.y * (5.0 + tmpvar_3))\n     + time))))\n   * 0.5) * treb_att));\n  float tmpvar_4;\n  tmpvar_4 = (2.0 * mid_att);\n  muv_1.y = (uv.y + ((\n    ((0.01 * sin((\n      (uv.x * (5.0 + tmpvar_4))\n     + time))) - (0.01 * cos((\n      (uv.y * (5.0 + tmpvar_4))\n     + time))))\n   * 0.5) * bass_att));\n  vec3 tmpvar_5;\n  tmpvar_5 = ((texture (sampler_blur2, muv_1).xyz * scale2) + bias2);\n  vec4 tmpvar_6;\n  tmpvar_6 = texture (sampler_pw_main, muv_1);\n  ret_2.x = (tmpvar_6.x + (tmpvar_5.x * (bass_att * 0.05)));\n  ret_2.y = (tmpvar_6.y + (tmpvar_5.y * (treb_att * 0.05)));\n  ret_2.z = (tmpvar_6.z + (tmpvar_5.z * (mid_att * 0.05)));\n  if ((ret_2.x > 0.9)) {\n    ret_2.x = 0.0;\n  };\n  if ((ret_2.y > 0.9)) {\n    ret_2.y = 0.0;\n  };\n  if ((ret_2.z > 0.9)) {\n    ret_2.z = 0.0;\n  };\n  vec4 tmpvar_7;\n  tmpvar_7.w = 1.0;\n  tmpvar_7.xyz = ret_2;\n  ret = tmpvar_7.xyz;\n }","comp":" shader_body { \n  vec3 ret1_1;\n  vec2 uv1_2;\n  vec3 ret_3;\n  vec4 tmpvar_4;\n  tmpvar_4 = texture (sampler_main, uv);\n  ret_3 = (tmpvar_4.xyz * (0.6 + (0.3 * \n    sin(((uv.x * 10.0) + time))\n  )));\n  vec2 tmpvar_5;\n  tmpvar_5.x = (texture (sampler_main, (uv - vec2(0.001, 0.0))).xyz - texture (sampler_main, (uv + vec2(0.001, 0.0))).xyz).x;\n  tmpvar_5.y = (texture (sampler_main, (uv - vec2(0.0, 0.001))).xyz - texture (sampler_main, (uv + vec2(0.0, 0.001))).xyz).x;\n  uv1_2 = ((0.5 * cos(\n    (((uv - 0.5) * 1.5) + 1.6)\n  )) - (3.0 * tmpvar_5));\n  ret1_1 = ((0.3 * dot (tmpvar_4.xyz, vec3(0.32, 0.49, 0.29))) + ((\n    clamp ((0.01 / sqrt(dot (uv1_2, uv1_2))), 0.0, 1.0)\n   * \n    mix (vec3(dot (((texture (sampler_blur2, uv).xyz * scale2) + bias2), vec3(0.32, 0.49, 0.29))), ret_3, pow (ret_3, vec3((0.05 + (mid_att * 0.03)))))\n  ) * (\n    (4.0 + bass)\n   + \n    (mid + treb_att)\n  )));\n  ret_3 = ret1_1;\n  vec4 tmpvar_6;\n  tmpvar_6.w = 1.0;\n  tmpvar_6.xyz = ret1_1;\n  ret = tmpvar_6.xyz;\n }"}