{"version":2,"baseVals":{"rating":3,"gammaadj":1.78,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":3,"additivewave":1,"wave_dots":1,"wave_thick":1,"modwavealphabyvolume":1,"wave_brighten":0,"darken":1,"wave_a":0.001,"wave_scale":0.084,"wave_smoothing":0.36,"wave_mystery":0.2,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0,"wave_g":0,"wave_b":0,"ob_a":1,"ib_size":0,"mv_x":12.8,"mv_y":9.6,"mv_l":0.05,"mv_b":0.5,"mv_a":0,"b1x":0.7,"b1ed":0},"shapes":[{"baseVals":{"sides":100,"num_inst":22,"rad":0.43,"tex_ang":3.14159,"tex_zoom":1.53117,"g":1,"b":1,"a":0,"r2":0.84,"g2":0.93,"b2":1,"border_r":0.8,"border_g":0,"border_a":0.9,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":63,"additive":1,"rad":1.99863,"tex_zoom":0.49981,"g":1,"b":1,"a":0.1,"r2":1,"b2":1,"a2":0.6,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":63,"textured":1,"x":0.123,"y":0,"rad":0.27319,"tex_zoom":0.49981,"g":1,"b":1,"r2":1,"b2":1,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":63,"textured":1,"y":1,"rad":0.54822,"tex_zoom":0.49981,"g":1,"b":1,"r2":1,"b2":1,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"samples":382,"thick":1,"additive":1,"scaling":0.89152,"smoothing":0.82,"a":0.05},"init_eqs_eel":"","frame_eqs_eel":"t1 = 1*cos(q30);\nt2 = 1*sin(q30*4);\nt3 = q29/3;\n","point_eqs_eel":"\nt_abs = sample;\nt_rel = sample-time/6;\nampl = abs(sin(t_abs*3)-q28%2)+.5;\n\nox = 3*sin (4*q30)+ ampl*(sin (t_rel*500)) ;\noy = 3*cos (q30) + ampl*(cos (t_rel*(480+4*q28))) ;\noz = t_abs*3 ;\n\nr = q12;\nb = q13;\ng = q14;\n\nxang = t2+t3/3;\nyang = t1*t2-t3/4;\nzang = t3;\nfov = min(max(0.2*q20,.1),.4);\n\nmx = ox*cos(zang) - oy*sin(zang);\nmy = ox*sin(zang) + oy*cos(zang);\nox = mx;\noy = my;\nmx = ox*cos(yang) + oz*sin(yang);\nmz = -ox*sin(yang) + oz*cos(yang);\nox = mx;\noz =  mz;\nmy = oy*cos(xang) - oz*sin(xang);\nmz = oy*sin(xang) + oz*cos(xang);\noy = my;\noz = mz;\n\noz = oz - 7;\nx = ox*fov/oz +0.5 ;\ny = oy*fov/oz + 0.5 ;\n"},{"baseVals":{"samples":232,"usedots":1,"thick":1,"additive":1,"scaling":0.89152,"smoothing":0.82,"a":0.1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"t1 = 2*sin(time/15);\nt2 = 2*sin(time/11);\nmonitor = time;","point_eqs_eel":""},{"baseVals":{"scaling":0.89152,"smoothing":0.82,"a":0.1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"usedots":1,"thick":1,"a":0.3,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"trel = rand(10);\nindex = rand(8);\nindex2 = rand(8);\navg = 0;","frame_eqs_eel":"dec_med = pow (0.8, 30/fps);\ndec_slow = pow (0.98, 30/fps);\nbeat = (bass + mid + treb)/3;\navg = avg*dec_slow + beat*(1-dec_slow);\nis_beat = above(beat, .2+avg+peak) * above (time, t0+.2);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\nindex = (index + is_beat) %8;\nindex2 = (index2 + is_beat*bnot(index))%8;\n\nq20 = avg;\nq21 = beat;\nq22 = peak;\nq23 = (bass+mid+treb)-(bass_att+mid_att+treb_att);\nq23 = beat - avg;\nq24 = is_beat;\nq27 = index;\nq28 = index2;\nq19 = index;\n\nk1 =  is_beat*equal(index,0);\np1 =  k1*(p1+1) + (1-k1)*p1;\np2 = dec_med * p2+ (1-dec_med)*p1;\nrott = p2 * 3.14159265359/2;\nq1 = cos(rott);\nq2 = sin(rott);\n\npulse = pulse*dec_slow+ (1-dec_slow)* peak;\nwinkel = winkel + pulse/fps*30;\nq29 = winkel;\n\ntrel = trel + (bass_+mid_+treb_)/fps/3;\ntrel_ = trel_*dec_med + (1-dec_med)*trel;\nq30 = trel_;\nq31 = sin(trel_/4)*12;\n\ndec_slow = pow (0.94, 30/fps);\nbass_ = bass_*dec_slow + (1-dec_slow)*bass_att;\nmid_  = mid_*dec_slow + (1-dec_slow)*(mid_att);\ntreb_ = treb_*dec_slow + (1-dec_slow)*treb_att;\n\nq12 = sigmoid((bass_-treb_)*4,1);\nq13 = sigmoid((mid_-bass_)*4,1);\nq14 = sigmoid((treb_-mid_)*4,1);\n\nq15 = above(q20,1.3); //stopngo\n\nrota = rota*dec_med + (1-dec_med)*q22/2;\nzoom = 1.0 + .04*q1*50/fps;\ncx = .5+.2*sin(trel_*12) * bnot(q28%3);\ncy = .5+.4*cos(trel_*6) * bnot(q28%3);\nrot = (.04*q1+rota/8*q2)*50/fps;\ndx = .012*q1*50/fps*avg;\ndy = .012*q2*50/fps*avg;","pixel_eqs_eel":"","warp":"float xlat_mutableq25;\n shader_body { \n  vec2 uv_1;\n  vec3 crisp_2;\n  float tmpvar_3;\n  vec4 tmpvar_4;\n  tmpvar_4 = texture (sampler_blur1, uv_orig);\n  tmpvar_3 = ((16.0 * dot (\n    ((tmpvar_4.xyz * scale1) + bias1)\n  , vec3(0.32, 0.49, 0.29))) * (0.5 + q22));\n  mat2 tmpvar_5;\n  tmpvar_5[uint(0)].x = cos(tmpvar_3);\n  tmpvar_5[uint(0)].y = -(sin(tmpvar_3));\n  tmpvar_5[1u].x = sin(tmpvar_3);\n  tmpvar_5[1u].y = cos(tmpvar_3);\n  uv_1 = (uv + ((0.25 * \n    dot (((tmpvar_4.xyz * scale1) + bias1), vec3(0.32, 0.49, 0.29))\n  ) * (\n    (uv - 0.5)\n   * tmpvar_5)));\n  vec2 tmpvar_6;\n  tmpvar_6 = (((uv_orig * texsize.xy) * 0.02) + time);\n  vec2 tmpvar_7;\n  tmpvar_7.x = (cos((tmpvar_6.y * q1)) * sin(-(tmpvar_6.y)));\n  tmpvar_7.y = (sin(tmpvar_6.x) * cos((tmpvar_6.y * q2)));\n  uv_1 = (uv_1 + ((tmpvar_7 * texsize.zw) * q31));\n  crisp_2 = (((\n    ((texture (sampler_fw_main, uv_1) * 2.0).xyz * 0.98)\n   / 2.0) - 0.005) - (8.0 * max (\n    pow ((uv_orig.x - 0.5), 6.0)\n  , \n    pow ((uv_orig.y - 0.5), 6.0)\n  )));\n  xlat_mutableq25 = (float((q22 >= 1.0)) * q15);\n  crisp_2 = ((crisp_2 * (1.0 - xlat_mutableq25)) + (xlat_mutableq25 * texture (sampler_main, uv_orig).xyz));\n  vec4 tmpvar_8;\n  tmpvar_8.w = 1.0;\n  tmpvar_8.xyz = mix (crisp_2, vec3(dot (crisp_2, vec3(0.32, 0.49, 0.29))), vec3((0.2 * dot (\n    ((tmpvar_4.xyz * scale1) + bias1)\n  , vec3(0.32, 0.49, 0.29)))));\n  ret = tmpvar_8.xyz;\n }","comp":"vec3 xlat_mutableback;\n shader_body { \n  vec3 ret_1;\n  xlat_mutableback = ((texture (sampler_blur3, uv_orig).xyz * scale3) + bias3);\n  vec2 tmpvar_2;\n  tmpvar_2.x = uv.x;\n  tmpvar_2.y = ((-(uv.y) * 2.0) + 2.0);\n  ret_1 = (mix (texture (sampler_main, uv).xyz, (1.5 * \n    ((texture (sampler_blur1, uv).xyz * scale1) + bias1)\n  ), vec3(clamp (\n    dot (xlat_mutableback, vec3(0.32, 0.49, 0.29))\n  , 0.0, 1.0))) + ((xlat_mutableback * q22) / 2.0));\n  ret_1 = (ret_1 + ((\n    (clamp ((0.5 - (4.0 * \n      dot (xlat_mutableback, vec3(0.32, 0.49, 0.29))\n    )), 0.0, 1.0) * (uv.y / 2.0))\n   * \n    (1.0 - (dot ((\n      (texture (sampler_blur2, fract(tmpvar_2)).xyz * scale2)\n     + bias2), vec3(0.32, 0.49, 0.29)) * clamp ((4.0 - \n      (4.0 * tmpvar_2.y)\n    ), 0.0, 1.0)))\n  ) * (0.5 + \n    (hue_shader / 2.0)\n  )));\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = ret_1;\n  ret = tmpvar_3.xyz;\n }"}