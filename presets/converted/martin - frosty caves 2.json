{"version":2,"baseVals":{"rating":5,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":7,"additivewave":1,"wave_thick":1,"modwavealphabyvolume":1,"wave_brighten":0,"wrap":0,"darken":1,"wave_a":0.001,"wave_scale":0.698,"wave_smoothing":0.45,"modwavealphastart":0,"modwavealphaend":1.32,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0,"wave_g":0,"wave_b":0,"ob_size":0,"ob_g":0.1,"ob_b":1,"ob_a":1,"ib_size":0,"ib_r":0,"ib_g":0,"ib_b":0,"mv_x":25.6,"mv_y":9.6,"mv_l":5,"mv_g":0.5,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"textured":1,"x":0.09,"y":0.9,"rad":0.22437,"tex_zoom":1.76002,"r2":1,"g2":0,"a2":0.6,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":100,"additive":1,"x":0.26,"y":0.2,"rad":0.39317,"tex_zoom":6.19589,"r":0,"g":0.55,"b":0.5,"g2":0.4,"b2":0.4,"a2":0.07,"border_r":0.3,"border_g":0.7,"border_b":0.8,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"additive":1,"x":0.803,"rad":0.314,"tex_zoom":1.49332,"g":1,"b":1,"a":0,"g2":0,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":100,"rad":0.01,"tex_zoom":0.49981,"r":0,"g2":0,"border_r":0.2,"border_g":0.7,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"samples":132,"sep":20,"thick":1,"additive":1,"scaling":0.48454,"smoothing":0.1,"g":0,"b":0.2,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"usedots":1,"thick":1,"scaling":0.89152,"smoothing":0.82,"a":0.1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"thick":1,"scaling":0.89152,"smoothing":0.82,"r":0,"g":0.2,"b":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"usedots":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.n=0;a.maxbpm=0;a.reg26=0;a.maxind1=0;a.uvx0=0;a.cosb_=0;a.reg34=0;a.num_res=0;a.reg28=0;a.reg23=0;a.q25=0;a.angchg=0;a.reg20=0;a.reg15=0;a.reg10=0;a.sinb_=0;a.index=0;a.quali=0;a.v3=0;a.q18=0;a.q22=0;a.q21=0;a.diry=0;a.q6=0;a.posx=0;a.dt=0;a.reg25=0;a.mean=0;a.uvx=0;a.q1=0;a.posz=0;a.q5=0;a.reg52=0;a.dt1=0;a.dec_f=0;a.dirz=0;a.dec_s=0;a.reg16=0;a.bt2=0;a.reg36=0;a.minbpm=0;a.reg22=0;a.uvy=0;a.rotz=0;a.cosb=0;a.omega=0;a.dist_=0;a.ec_steps=0;a.bpm=0;a.q23=0;a.q24=0;a.reg24=\n0;a.ran2=0;a.pi=0;a.q10=0;a.reg14=0;a.sinb=0;a.reg53=0;a.posy=0;a.reg31=0;a.dirx=0;a.dec_m=0;a.q4=0;a.start=0;a.reg12=0;a.reg13=0;a.v2p=0;a.c2=0;a.reg37=0;a.ex=0;a.s3=0;a.yslope=0;a.q16=0;a.xslope=0;a.q26=0;a.reg38=0;a.v3p=0;a.reg35=0;a.p2=0;a.mov=0;a.reg11=0;a.tx=0;a.avg=0;a.bt1=0;a.beatsin=0;a.uvz=0;a.c3=0;a.uvy0=0;a.reg27=0;a.q19=0;a.q17=0;a.vol=0;a.reg32=0;a.reg21=0;a.uvz0=0;a.len=0;a.reg18=0;a.beatcos=0;a.reg30=0;a.q2=0;a.b1y=0;a.q27=0;a.bri=0;a.slen=0;a.q14=0;a.dist=0;a.trel1=0;a.p3=0;a.reg17=\n0;a.v1=0;a.speed=0;a.vol2=0;a.q3=0;a.s1=0;a.vol_=0;a.dec=0;a.s2=0;a.quad=0;a.b2y=0;a.ran1=0;a.q32=0;a.reg33=0;a.q7=0;a.ds=0;a.q28=0;a.ty=0;a.excite=0;a.c1=0;a.v2=0;a.q20=0;a.p4=0;a.q8=0;a.maxvol=0;for(var b=a.n=0;2E4>b;b++)a.megabuf[Math.floor(a.n)]=0,a.gmegabuf[Math.floor(a.n)]=0,a.n+=1;a.minbpm=30;a.maxbpm=230;a.num_res=100;for(b=a.index=0;b<a.num_res;b++)a.n=12*a.index,a.bpm=a.minbpm*pow(div(a.maxbpm,a.minbpm),div(a.index,a.num_res)),a.gmegabuf[Math.floor(a.n)]=a.bpm,a.index+=1;a.pi=3.1416;a.octave=\ndiv(a.num_res*Math.log(2),Math.log(div(a.maxbpm,a.minbpm)));a.q7=.15;a.q8=.2+rand(1);a.q16=1.6;a.start=1;a.travel=0;a.rotz=0;a.t0=a.time+3;a.cran0=rand(1);a.trelx=0;a.trely=0;a.trelz=0;a.reg20=1;a.reg21=0;a.reg22=0;a.reg23=0;a.reg24=1;a.reg25=0;a.reg26=0;a.reg27=0;a.reg28=1;b=0;do{b+=1;var c;a.ran1=rand(8);a.ran2=rand(8);a.ran3=rand(8);a.posx=rand(8);a.posy=rand(8);a.posz=rand(8);a.c1=Math.cos(a.ran1);a.c2=Math.cos(a.ran2);a.c3=Math.cos(a.ran3);a.s1=Math.sin(a.ran1);a.s2=Math.sin(a.ran2);a.s3=Math.sin(a.ran3);\na.reg20=a.c2*a.c1;a.reg21=a.c2*a.s1;a.reg22=-a.s2;a.reg23=a.s3*a.s2*a.c1-a.c3*a.s1;a.reg24=a.s3*a.s2*a.s1+a.c3*a.c1;a.reg25=a.s3*a.c2;a.reg26=a.c3*a.s2*a.c1+a.s3*a.s1;a.reg27=a.c3*a.s2*a.s1-a.s3*a.c1;a.reg28=a.c3*a.c2;a.dist=.001;var d=0;do{d+=1;a.uvx=div(a.reg26*a.dist,a.q7);a.uvy=div(a.reg27*a.dist,a.q7);a.uvz=div(a.reg28*a.dist,a.q7);a.uvx+=a.posx;a.uvy+=a.posy;a.uvz+=a.posz;a.uvx=1+2*(div(a.uvx,4)+30.5-Math.floor(div(a.uvx,4)+30.5)-.5);a.uvy=2+2*(div(a.uvy,4)+30.5-Math.floor(div(a.uvy,4)+30.5)-\n.5);a.uvz=3+2*(div(a.uvz,4)+30.5-Math.floor(div(a.uvz,4)+30.5)-.5);a.uvx0=a.uvx+a.q8;a.uvy0=a.uvy+a.q8;a.uvz0=a.uvz+a.q8;for(c=0;8>c;c++)a.uvx=.00001<Math.abs(1<a.uvx?1:0)?2-a.uvx:.00001<Math.abs(-1>a.uvx?1:0)?-2-a.uvx:a.uvx,a.uvy=.00001<Math.abs(1<a.uvy?1:0)?2-a.uvy:.00001<Math.abs(-1>a.uvy?1:0)?-2-a.uvy:a.uvy,a.uvz=.00001<Math.abs(1<a.uvz?1:0)?2-a.uvz:.00001<Math.abs(-1>a.uvz?1:0)?-2-a.uvz:a.uvz,a.slen=a.uvx*a.uvx+a.uvy*a.uvy+a.uvz*a.uvz,a.uvx=2.6*(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvx:.00001<\nMath.abs(1>a.slen?1:0)?div(a.uvx,a.slen):a.uvx)+a.uvx0,a.uvy=2.6*(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvy:.00001<Math.abs(1>a.slen?1:0)?div(a.uvy,a.slen):a.uvy)+a.uvy0,a.uvz=2.6*(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvz:.00001<Math.abs(1>a.slen?1:0)?div(a.uvz,a.slen):a.uvz)+a.uvz0;a.len=sqrt(a.uvx*a.uvx+a.uvy*a.uvy+a.uvz*a.uvz);a.dist*=1.05;c=(.6>a.dist?1:0)*(30<a.len?1:0)}while(.00001<Math.abs(c)&&1048576>d);d=.06>a.dist?1:0}while(.00001<Math.abs(d)&&1048576>b);","frame_eqs_str":"a.dt=Math.min(div(1,a.fps),.1);a.dec_f=.8;a.dec_m=1-4*a.dt;a.dec_s=1-a.dt;a.vol=div(a.bass+div(a.mid,2)+a.treb,3);a.vol_=a.vol_*a.dec_m+(1-a.dec_m)*a.vol;a.dec=a.dec_s;a.vol2=a.vol2*a.dec+(1-a.dec)*Math.min(3,a.vol);a.maxvol=.00001<Math.abs(a.vol>a.maxvol?1:0)?a.vol:a.maxvol*a.dec_s;a.excite=a.vol-a.vol_;a.index=0;a.maxind1=0;for(var b=a.mean=0;b<a.num_res;b++){a.n=12*a.index;a.omega=div(2*a.gmegabuf[Math.floor(a.n)]*a.pi,60);a.gmegabuf[Math.floor(a.n+1)]*=1-.25*a.dt;a.ec_steps=\nMath.floor(10*a.dt*a.omega)+1;a.dt1=div(a.dt,a.ec_steps);a.ex=a.excite;for(var c=0;c<a.ec_steps;c++)a.gmegabuf[Math.floor(a.n+1)]+=(a.ex-sqr(a.omega)*a.gmegabuf[Math.floor(a.n+2)])*a.dt1,a.gmegabuf[Math.floor(a.n+2)]+=a.gmegabuf[Math.floor(a.n+1)]*a.dt1;a.beatcos=a.gmegabuf[Math.floor(a.n+1)];a.beatsin=a.gmegabuf[Math.floor(a.n+2)]*a.omega;a.quad=sqrt(pow(a.beatsin,2)+pow(a.beatcos,2));a.mean+=div(a.quad,a.num_res);a.gmegabuf[Math.floor(a.n+3)]=a.gmegabuf[Math.floor(a.n+3)]*a.dec_m+a.quad*(1-a.dec_m);\n.00001<Math.abs(a.gmegabuf[Math.floor(a.n+3)]>a.gmegabuf[Math.floor(12*a.maxind1+3)]?1:0)?a.maxind1=a.index:0;a.index+=1}a.quali=div(a.gmegabuf[Math.floor(12*a.maxind1+3)],a.mean);a.bpm=a.minbpm*pow(div(a.maxbpm,a.minbpm),div(a.maxind1,a.num_res));.00001<Math.abs(160<a.bpm?1:0)?a.bpm/=2:0;a.trel1+=(div(a.bpm,60)*a.pi+a.excite*a.cosb)*(.7<a.maxvol?1:0)*a.dt;a.q32=a.trel1;a.speed=div((.15+.25*a.dist_)*(1+a.avg),a.q7)*(.34+.34*a.vol_)*(a.q8+.8);a.ds=a.ds*a.dec_s+(1-a.dec_s)*a.speed*.25*a.dt;a.rotz=.8*\npow(Math.sin(div(a.time,12)),5);a.dirx=a.reg26;a.diry=a.reg27;a.dirz=a.reg28;a.posx+=a.ds*a.dirx;a.posy+=a.ds*a.diry;a.posz+=a.ds*a.dirz;a.q4=a.posx;a.q5=a.posy;a.q6=a.posz;a.angchg=Math.max(0,.4-a.dist_);a.v1=a.v1*a.dec_m+(1-a.dec_m)*a.rotz*a.ds;a.dec=1-3*a.dt;a.v2p=a.v2p*a.dec+(1-a.dec)*(a.angchg*a.xslope+.02*a.p2)*a.dt;a.v3p=a.v3p*a.dec+(1-a.dec)*(a.angchg*a.yslope+.02*a.p3)*a.dt;a.v2=a.v2*a.dec+(1-a.dec)*a.v2p;a.v3=a.v3*a.dec+(1-a.dec)*a.v3p;a.p3=sign(a.v3);a.p4=sign(a.v2);a.reg30=a.reg20;a.reg31=\na.reg21;a.reg32=a.reg22;a.reg33=a.reg23;a.reg34=a.reg24;a.reg35=a.reg25;a.reg36=a.reg26;a.reg37=a.reg27;a.reg38=a.reg28;a.n=0;for(b=a.avg=0;5>b;b++){a.n+=1;a.ran1=div(rand(100),100);a.ran2=div(rand(100),200)-.25;a.tx=Math.cos(1.57*a.n+a.ran2)*(4>=a.n?1:0)*a.ran1;a.ty=Math.sin(1.57*a.n+a.ran2)*(4>=a.n?1:0)*a.ran1;a.c1=Math.cos(a.v1);a.c2=Math.cos(a.v2+a.ty);a.c3=Math.cos(a.v3+a.tx);a.s1=Math.sin(a.v1);a.s2=Math.sin(a.v2+a.ty);a.s3=Math.sin(a.v3+a.tx);a.reg10=a.c2*a.c1;a.reg11=a.c2*a.s1;a.reg12=-a.s2;\na.reg13=a.s3*a.s2*a.c1-a.c3*a.s1;a.reg14=a.s3*a.s2*a.s1+a.c3*a.c1;a.reg15=a.s3*a.c2;a.reg16=a.c3*a.s2*a.c1+a.s3*a.s1;a.reg17=a.c3*a.s2*a.s1-a.s3*a.c1;a.reg18=a.c3*a.c2;a.reg20=a.reg30;a.reg21=a.reg31;a.reg22=a.reg32;a.reg23=a.reg33;a.reg24=a.reg34;a.reg25=a.reg35;a.reg26=a.reg36;a.reg27=a.reg37;a.reg28=a.reg38;a.q20=a.reg10*a.reg20+a.reg11*a.reg23+a.reg12*a.reg26;a.q21=a.reg10*a.reg21+a.reg11*a.reg24+a.reg12*a.reg27;a.q22=a.reg10*a.reg22+a.reg11*a.reg25+a.reg12*a.reg28;a.q23=a.reg13*a.reg20+a.reg14*\na.reg23+a.reg15*a.reg26;a.q24=a.reg13*a.reg21+a.reg14*a.reg24+a.reg15*a.reg27;a.q25=a.reg13*a.reg22+a.reg14*a.reg25+a.reg15*a.reg28;a.q26=a.reg16*a.reg20+a.reg17*a.reg23+a.reg18*a.reg26;a.q27=a.reg16*a.reg21+a.reg17*a.reg24+a.reg18*a.reg27;a.q28=a.reg16*a.reg22+a.reg17*a.reg25+a.reg18*a.reg28;a.reg20=a.q20;a.reg21=a.q21;a.reg22=a.q22;a.reg23=a.q23;a.reg24=a.q24;a.reg25=a.q25;a.reg26=a.q26;a.reg27=a.q27;a.reg28=a.q28;a.dist=.002;var d;c=0;do{c+=1;a.uvx=div(a.reg26*a.dist,a.q7);a.uvy=div(a.reg27*a.dist,\na.q7);a.uvz=div(a.reg28*a.dist,a.q7);a.uvx+=a.posx;a.uvy+=a.posy;a.uvz+=a.posz;a.uvx=1+2*(div(a.uvx,4)+30.5-Math.floor(div(a.uvx,4)+30.5)-.5);a.uvy=2+2*(div(a.uvy,4)+30.5-Math.floor(div(a.uvy,4)+30.5)-.5);a.uvz=3+2*(div(a.uvz,4)+30.5-Math.floor(div(a.uvz,4)+30.5)-.5);a.uvx0=a.uvx+a.q8;a.uvy0=a.uvy+a.q8;a.uvz0=a.uvz+a.q8;for(d=0;8>d;d++)a.uvx=.00001<Math.abs(1<a.uvx?1:0)?2-a.uvx:.00001<Math.abs(-1>a.uvx?1:0)?-2-a.uvx:a.uvx,a.uvy=.00001<Math.abs(1<a.uvy?1:0)?2-a.uvy:.00001<Math.abs(-1>a.uvy?1:0)?-2-\na.uvy:a.uvy,a.uvz=.00001<Math.abs(1<a.uvz?1:0)?2-a.uvz:.00001<Math.abs(-1>a.uvz?1:0)?-2-a.uvz:a.uvz,a.slen=a.uvx*a.uvx+a.uvy*a.uvy+a.uvz*a.uvz,a.uvx=2.6*(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvx:.00001<Math.abs(1>a.slen?1:0)?div(a.uvx,a.slen):a.uvx)+a.uvx0,a.uvy=2.6*(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvy:.00001<Math.abs(1>a.slen?1:0)?div(a.uvy,a.slen):a.uvy)+a.uvy0,a.uvz=2.6*(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvz:.00001<Math.abs(1>a.slen?1:0)?div(a.uvz,a.slen):a.uvz)+a.uvz0;a.len=sqrt(a.uvx*a.uvx+\na.uvy*a.uvy+a.uvz*a.uvz);a.dist*=1.1;d=(.6>a.dist?1:0)*(30<a.len?1:0)}while(.00001<Math.abs(d)&&1048576>c);a.megabuf[Math.floor(a.n)]=a.megabuf[Math.floor(a.n)]*a.dec_s+(1-a.dec_s)*a.dist;a.avg+=Math.abs(div(a.megabuf[Math.floor(a.n)],5))}a.n=0;for(b=a.avg=0;5>b;b++)a.n+=1,a.avg+=Math.abs(div(a.megabuf[Math.floor(a.n)],5));a.xslope=Math.min(Math.max(8*(a.megabuf[1]-a.megabuf[3]),-2),2);a.yslope=Math.min(Math.max(8*(a.megabuf[4]-a.megabuf[2]),-2),2);a.dist_=a.dist_*a.dec_m+(1-a.dec_m)*a.dist;a.q10=\na.ds*a.q7;a.q14=Math.abs(a.ds)+2*(Math.abs(a.v1)+Math.abs(a.v2)+Math.abs(a.v3))+div(1,255)+0*a.start;a.start*=.9;a.reg52=-a.v2;a.reg53=a.v3;a.warp=0;a.zoom=1;a.rot=a.v1;a.sinb=Math.sin(a.trel1);a.cosb=Math.cos(a.trel1);a.bt1=0>a.sinb*a.sinb_?1:0;a.bt2=0>a.cosb*a.cosb_?1:0;.00001<Math.abs(a.bt1)?(a.b1x=rand(2)-1,a.b1y=rand(2)-1):0;.00001<Math.abs(a.bt2)?(a.b2x=rand(2)-1,a.b2y=rand(2)-1):0;a.sinb_=a.sinb;a.cosb_=a.cosb;a.bri=.012*a.vol2*sqrt(div(100,a.bpm))+.01*a.excite;a.mov=div(sqrt(a.v3*a.v3+a.v2*\na.v2),a.dt);a.q1=a.b1x*Math.abs(a.b1x);a.q2=a.b1y*Math.abs(a.b1y);a.q17=.4*a.b2x;a.q18=.4*a.b2y;a.len=pow(a.q1,2)+pow(a.q2,2);a.q3=pow(a.sinb,2)*a.bri*(1+4*a.len)*Math.max(0,1-5*a.mov);a.q19=pow(a.cosb,2)*a.bri*1.2;a.monitor=a.q8;","pixel_eqs_str":"a.warp=0;a.zoom=1;a.tx=Math.tan(.9*(2*a.x-1));a.ty=Math.tan(.9*(2*a.y-1));a.dx=div(a.reg52,a.q16)*(1+.5*Math.abs(a.tx));a.dy=div(a.reg53,a.q16)*(1+.5*Math.abs(a.ty));a.dx+=a.reg53*a.ty*(a.x-.5);a.dy+=a.reg52*a.tx*(a.y-.5);","init_eqs_eel":"n = 0; loop (20000, megabuf(n)=0; gmegabuf(n)=0; n +=1; );\n\nMINBPM = 30; MAXBPM = 230; num_res = 100;\nindex = 0;\nloop (num_res,\n  n = 12*index;\n  BPM      = minbpm * pow(maxbpm/minbpm,index/num_res);\n  gmegabuf(n) = BPM;\n  index += 1;);\npi = 3.1416;\nOCTAVE = (num_res) * log(2) / log (MAXBPM / MINBPM);\n\nq7 = .15; //MyZoom\nq8 =  0.2 + rand(1); //fractal modifier\nq16 = 1.6; //#fish eye\nstart = 1; travel = 0; RotZ = 0; t0 = time+3;\ncran0 = rand(1);\ntrelx = 0;  trely = 0; trelz = 0;\nreg20 = 1; reg21 = 0; reg22 = 0; reg23 = 0; reg24 = 1; reg25 = 0; reg26 = 0; reg27 = 0; reg28 = 1;\n\n//Find random starting point\nwhile (exec2(\n  ran1 = rand(8); ran2 = rand(8); ran3 = rand(8);\n  PosX = rand(8); PosY = rand(8); PosZ = rand(8); \n\n  c1 = cos(ran1); c2 = cos(ran2); c3 = cos(ran3); \n  s1 = sin(ran1); s2 = sin(ran2); s3 = sin(ran3);\n\n  reg20 = c2*c1; reg21 = c2*s1; reg22 = -s2;\n  reg23 = s3*s2*c1 - c3*s1; reg24 = s3*s2*s1 + c3*c1; reg25 = s3*c2;\n  reg26 = c3*s2*c1 + s3*s1; reg27 = c3*s2*s1 - s3*c1; reg28 = c3*c2;\n\n  //***********BOT*************\n  //Coord. Trans. must exactly match def in warp S. !!!!\n  dist = 0.001;\n  while (exec2(\n    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;\n    uvx += PosX; uvy += PosY; uvz += PosZ;\n    uvx = 1+2*((uvx/4+30.5 - int(uvx/4+30.5))-.5);\n    uvy = 2+2*((uvy/4+30.5 - int(uvy/4+30.5))-.5);\n    uvz = 3+2*((uvz/4+30.5 - int(uvz/4+30.5))-.5);\n    uvx0 = uvx+q8; uvy0 = uvy+q8; uvz0 = uvz+q8;\n    loop (7+1,\n      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));\n      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));\n      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));\n      slen = uvx*uvx + uvy*uvy + uvz*uvz;\n      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0; \n      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0; \n      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0; \n    );\n    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);\n    dist *= 1.05;\n  ,(dist < 0.6)*(len > 30)));\n,(dist < .06))); //end while","frame_eqs_eel":"dt = min (1/fps,0.1);\ndec_f = 0.8; dec_m = 1 - 4*dt; dec_s = 1 - dt;\nvol = (bass+mid/2+treb)/3;\nvol_ = vol_*dec_m + (1-dec_m)*vol;\ndec = dec_s;\nvol2 = vol2*dec + (1-dec)*min(3,vol);\nmaxvol = if (vol>maxvol,vol,maxvol*dec_s);\n\nexcite = vol-vol_;\nindex = 0; maxind1 = 0; mean = 0;\nloop (num_res, \n  n = index*12;  omega=gmegabuf(n) * 2*pi/60;\n  gmegabuf (n+1) *= 1- 0.25*dt; \n  EC_Steps = int (10*dt*omega)+1; dt1 = dt/EC_Steps;\n  ex = excite ;\n  loop (EC_Steps, // Euler-Cauchy \n    gmegabuf (n+1) += (ex - sqr(omega)*gmegabuf(n+2)) * dt1;\n    gmegabuf (n+2) += gmegabuf(n+1) * dt1);\n  beatcos  = gmegabuf(n+1);  beatsin = gmegabuf(n+2)*omega;\n  quad     = sqrt (pow(beatsin,2) + pow(beatcos,2)) ;\n   mean += quad/num_res;\n  gmegabuf (n+3) = gmegabuf(n+3) *dec_m +  quad* (1-dec_m);\n  if (gmegabuf(n+3) > gmegabuf(maxind1*12+3), maxind1 = index, 0); \nindex += 1;);\nquali = gmegabuf(maxind1*12+3)/mean;\n\nBPM   = minbpm * pow(maxbpm/minbpm,maxind1/num_res);\nif (BPM>160, BPM/=2,0);\ntrel1 += (BPM/60*pi+excite*cosb) * (maxvol>0.7)*dt;\nq32 = trel1;\n\nspeed = (0.15 + dist_*0.25)* (1+avg)/q7*(0.34+vol_*0.34)*(q8+0.8);\nds = ds * dec_s + (1-dec_s)*speed*.25*dt; \nRotZ = 0.8*pow (sin(time/12),5);\n\n//Position \nDirX= reg26; DirY= reg27; DirZ = reg28;\nPosX += ds*DirX ; PosY += ds*DirY; PosZ += ds*DirZ; \nq4 = PosX; q5 = PosY; q6 = PosZ;\n\nangchg = max(0,.4-dist_);\nv1 = v1 * dec_m + (1-dec_m)* RotZ * ds;\ndec = 1-3*dt;\nv2p = v2p *dec + (1-dec)*(angchg*xslope + p2*0.02)*dt;\nv3p = v3p *dec + (1-dec)*(angchg*yslope + p3*0.02)*dt ;\nv2 = v2 *dec + (1-dec)* v2p;\nv3 = v3 *dec + (1-dec)* v3p;\np3 = sign(v3);\np4 = sign(v2);\n//push old RotMat\nreg30 =reg20; reg31 =reg21; reg32 =reg22; \nreg33 =reg23; reg34 =reg24; reg35 =reg25; \nreg36 =reg26; reg37 =reg27; reg38 =reg28; \n\nn = 0; avg = 0;\nloop (5,\n  n = n+1;\n  //new Rot. Mat for infinitesimal angles\n  ran1 = rand(100)/100;\n  ran2 = rand(100)/200-.25;\n  tx = cos(n*1.57+ran2) * (n <= 4)*ran1; ty = sin(n*1.57+ran2) * (n <= 4)*ran1;\n  c1 = cos(v1); c2 = cos(v2+ty); c3 = cos(v3+tx); \n  s1 = sin(v1); s2 = sin(v2+ty); s3 = sin(v3+tx);\n  reg10 = c2*c1; reg11 = c2*s1; reg12 = -s2;\n  reg13 = s3*s2*c1 - c3*s1; reg14 = s3*s2*s1 + c3*c1; reg15 = s3*c2;\n  reg16 = c3*s2*c1 + s3*s1; reg17 = c3*s2*s1 - s3*c1; reg18 = c3*c2;\n\n  //pop old RotMat\n  reg20 =reg30; reg21 =reg31; reg22 =reg32; \n  reg23 =reg33; reg24 =reg34; reg25 =reg35; \n  reg26 =reg36; reg27 =reg37; reg28 =reg38; \n\n  //Multiply new RotMat by old one\n  q20 = reg10*reg20 + reg11*reg23 + reg12*reg26;\n  q21 = reg10*reg21 + reg11*reg24 + reg12*reg27;\n  q22 = reg10*reg22 + reg11*reg25 + reg12*reg28;\n  q23 = reg13*reg20 + reg14*reg23 + reg15*reg26;\n  q24 = reg13*reg21 + reg14*reg24 + reg15*reg27;\n  q25 = reg13*reg22 + reg14*reg25 + reg15*reg28;\n  q26 = reg16*reg20 + reg17*reg23 + reg18*reg26;\n  q27 = reg16*reg21 + reg17*reg24 + reg18*reg27;\n  q28 = reg16*reg22 + reg17*reg25 + reg18*reg28;\n\n  reg20 =q20; reg21 =q21; reg22 =q22;\n  reg23 =q23; reg24 =q24; reg25 =q25;\n  reg26 =q26; reg27 =q27; reg28 =q28;\n\n  //***********BOT*************\n  //Coord. Trans. must exactly match def in warp S. !!!!\n  dist = 0.002;\n  while (exec2(\n    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;\n    uvx += PosX; uvy += PosY; uvz += PosZ;\n//    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);\n//    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);\n//    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);\n    uvx = 1+2*((uvx/4+30.5 - int(uvx/4+30.5))-.5);\n    uvy = 2+2*((uvy/4+30.5 - int(uvy/4+30.5))-.5);\n    uvz = 3+2*((uvz/4+30.5 - int(uvz/4+30.5))-.5);\n    uvx0 = uvx+q8; uvy0 = uvy+q8; uvz0 = uvz+q8;\n    loop (7+1,\n      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));\n      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));\n      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));\n      slen = uvx*uvx + uvy*uvy + uvz*uvz;\n      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0; \n      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0; \n      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0; \n    );\n    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);\n    dist *= 1.1;\n  ,(dist < 0.6)*(len > 30)));\n  megabuf(n) = megabuf(n)*dec_s + (1-dec_s)*dist; //stores the 4 trial points\n  avg = avg+abs(megabuf(n)/5);\n); //end loop 5\nn = 0; avg = 0; loop (5, n=n+1; avg = avg+abs(megabuf(n)/5));\n\nxslope = min(max(8*(megabuf(1)-megabuf(3)),-2),2);\nyslope = min(max(8*(megabuf(4)-megabuf(2)),-2),2);\ndist_ = dist_*dec_m + (1-dec_m)*dist;\n\nq10 = ds*q7; //compensation of lin. movement in GetDist and zoom uv\nq14 = 1*abs(ds) + 2*(abs(v1) + abs(v2) + abs(v3)) + 1.0/255 + start*.0; \nstart = start * .9;\nreg52 = -v2; reg53 = v3;\n//forward comp. of Rotation\nwarp = 0.0; zoom = 1;  \nrot = v1;\n\n//light ctrl\nsinb = sin(trel1);\ncosb = cos(trel1);\n\nbt1 = sinb*sinb_<0; bt2 = cosb*cosb_<0;\n\nif (bt1, b1x = rand(2)-1; b1y = rand(2)-1;,0);\nif (bt2, b2x = rand(2)-1; b2y = rand(2)-1;,0);\nsinb_=sinb; cosb_=cosb;\n\nbri = vol2*0.012*sqrt(100/bpm)+excite*0.01;\nmov = sqrt (v3*v3+v2*v2)/dt; \n\nq1= b1x*abs(b1x);\nq2= b1y*abs(b1y);\n\nq17 =b2x*0.4;\nq18= b2y*0.4;\n\nlen = pow(q1,2)+ pow(q2,2);\nq3 = pow(sinb,2)*bri * (1+len*4)* max(0,1-5*mov);\nq19= pow(cosb,2)*bri*1.2;\n\nmonitor = q8;\n//frei: q9, q11, q12, q13, q15, q29m q30, q31, q32","pixel_eqs_eel":"warp = 0.0; zoom = 1; \ntx = tan((2*x-1)*0.9);\nty = tan((2*y-1)*0.9);\n\ndx = reg52/q16* (1+0.5*abs(tx)); \ndy = reg53/q16* (1+0.5*abs(ty)); \n\n\ndx += reg53*ty*(x-0.5)*1; \ndy += reg52*tx*(y-0.5)*1; \n\n//muss experimentell an tele angepasst werden; momentan 1.5 !!!","warp":"float sustain;\nfloat pix;\nvec3 mod1;\nfloat xlat_mutabledist;\nfloat xlat_mutablestruc;\nvec2 xlat_mutableuv1;\nvec3 xlat_mutableuv2;\n shader_body { \n  mat3 tmpvar_1;\n  tmpvar_1[uint(0)].x = q20;\n  tmpvar_1[uint(0)].y = q23;\n  tmpvar_1[uint(0)].z = q26;\n  tmpvar_1[1u].x = q21;\n  tmpvar_1[1u].y = q24;\n  tmpvar_1[1u].z = q27;\n  tmpvar_1[2u].x = q22;\n  tmpvar_1[2u].y = q25;\n  tmpvar_1[2u].z = q28;\n  vec3 tmpvar_2;\n  tmpvar_2.x = q4;\n  tmpvar_2.y = q5;\n  tmpvar_2.z = q6;\n  sustain = (0.97 - q14);\n  pix = (texsize.z * 2.0);\n  mod1 = (rand_preset.xyz - 0.5);\n  vec2 uv_3;\n  vec3 ret_4;\n  vec2 tmpvar_5;\n  tmpvar_5 = (uv - 0.5);\n  xlat_mutableuv1 = ((tmpvar_5 * aspect.xy) * q16);\n  vec4 tmpvar_6;\n  tmpvar_6 = texture (sampler_pw_main, uv);\n  uv_3 = ((tmpvar_5 * (1.0 - \n    (q10 / (1.0 - (tmpvar_6.z + (0.003921569 * tmpvar_6.y))))\n  )) + 0.5);\n  vec4 tmpvar_7;\n  tmpvar_7 = fract((8.0 * texture (sampler_noise_lq, (uv_3 + rand_frame.yz))));\n  xlat_mutabledist = tmpvar_7.x;\n  if ((tmpvar_7.y > 0.16)) {\n    vec4 nb2_8;\n    vec4 nb_9;\n    vec4 tmpvar_10;\n    tmpvar_10 = texture (sampler_pw_main, (uv_3 + vec2(-(pix))));\n    nb_9.x = (1.0 - (tmpvar_10.z + (0.003921569 * tmpvar_10.y)));\n    vec4 tmpvar_11;\n    tmpvar_11 = texture (sampler_pw_main, (uv_3 + (pix * vec2(1.0, -1.0))));\n    nb_9.y = (1.0 - (tmpvar_11.z + (0.003921569 * tmpvar_11.y)));\n    vec4 tmpvar_12;\n    tmpvar_12 = texture (sampler_pw_main, (uv_3 + vec2(pix)));\n    nb_9.z = (1.0 - (tmpvar_12.z + (0.003921569 * tmpvar_12.y)));\n    vec4 tmpvar_13;\n    tmpvar_13 = texture (sampler_pw_main, (uv_3 + (pix * vec2(-1.0, 1.0))));\n    nb_9.w = (1.0 - (tmpvar_13.z + (0.003921569 * tmpvar_13.y)));\n    vec4 tmpvar_14;\n    tmpvar_14 = texture (sampler_pw_main, (uv_3 + (pix * vec2(0.0, -1.0))));\n    nb2_8.x = (1.0 - (tmpvar_14.z + (0.003921569 * tmpvar_14.y)));\n    vec4 tmpvar_15;\n    tmpvar_15 = texture (sampler_pw_main, (uv_3 + (pix * vec2(1.0, 0.0))));\n    nb2_8.y = (1.0 - (tmpvar_15.z + (0.003921569 * tmpvar_15.y)));\n    vec4 tmpvar_16;\n    tmpvar_16 = texture (sampler_pw_main, (uv_3 + (pix * vec2(0.0, 1.0))));\n    nb2_8.z = (1.0 - (tmpvar_16.z + (0.003921569 * tmpvar_16.y)));\n    vec4 tmpvar_17;\n    tmpvar_17 = texture (sampler_pw_main, (uv_3 + (pix * vec2(-1.0, 0.0))));\n    nb2_8.w = (1.0 - (tmpvar_17.z + (0.003921569 * tmpvar_17.y)));\n    vec4 tmpvar_18;\n    tmpvar_18 = min (nb_9, nb2_8);\n    nb_9.zw = tmpvar_18.zw;\n    nb_9.xy = min (tmpvar_18.xy, tmpvar_18.zw);\n    xlat_mutabledist = ((min (nb_9.x, nb_9.y) + (\n      (0.006 * (tmpvar_7.xyz - 0.5).x)\n     * tmpvar_7.y)) - (q10 * 0.5));\n  };\n  float theta_19;\n  theta_19 = (xlat_mutabledist * 1.35);\n  float theta_20;\n  theta_20 = (xlat_mutabledist * 1.35);\n  vec3 tmpvar_21;\n  tmpvar_21.xy = (xlat_mutableuv1 * ((\n    sin(theta_19)\n   / \n    cos(theta_19)\n  ) / 1.35));\n  tmpvar_21.z = ((sin(theta_20) / cos(theta_20)) / 1.35);\n  xlat_mutableuv2 = (((tmpvar_21 / q7) * tmpvar_1) + tmpvar_2);\n  xlat_mutableuv2 = (((\n    fract(((xlat_mutableuv2 / 4.0) + 0.5))\n   - 0.5) * 2.0) + vec3(1.0, 2.0, 3.0));\n  vec3 zz0_23;\n  vec3 zz_24;\n  zz_24 = xlat_mutableuv2;\n  zz0_23 = (xlat_mutableuv2 + q8);\n  for (int n_22 = 0; n_22 <= 8; n_22++) {\n    zz_24 = ((2.0 * clamp (zz_24, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - zz_24);\n    zz_24 = (zz_24 * max ((1.0/(\n      dot (zz_24, zz_24)\n    )), 1.0));\n    zz_24 = ((2.6 * zz_24) + zz0_23);\n  };\n  vec4 tmpvar_25;\n  tmpvar_25.w = 0.0;\n  tmpvar_25.xyz = zz_24;\n  float tmpvar_26;\n  tmpvar_26 = sqrt(dot (zz_24, zz_24));\n  vec4 tmpvar_27;\n  tmpvar_27.w = 0.0;\n  tmpvar_27.xyz = mod1;\n  xlat_mutablestruc = ((1.0 - (\n    (1.4 * dot (tmpvar_25, tmpvar_27))\n   / 40.0)) - (xlat_mutabledist * 0.3));\n  if (((tmpvar_26 < 40.0) && (xlat_mutabledist > (0.04 * \n    (1.0 - rad)\n  )))) {\n    ret_4.x = mix (xlat_mutablestruc, texture (sampler_main, uv_3).x, sustain);\n    float x_28;\n    x_28 = ((1.0 - xlat_mutabledist) * 255.0);\n    float ip_29;\n    ip_29 = float(int(x_28));\n    vec2 tmpvar_30;\n    tmpvar_30.x = (x_28 - ip_29);\n    tmpvar_30.y = (ip_29 / 255.0);\n    ret_4.yz = tmpvar_30;\n  } else {\n    ret_4 = ((texture (sampler_fc_main, uv_3) * sustain) - 0.003921569).xyz;\n  };\n  vec4 tmpvar_31;\n  tmpvar_31.w = 1.0;\n  tmpvar_31.xyz = ret_4;\n  ret = tmpvar_31.xyz;\n }","comp":"float xlat_mutablecross1;\nvec2 xlat_mutabledz1;\nfloat xlat_mutablerdist;\nvec2 xlat_mutableuv0;\nvec2 xlat_mutableuv4;\nvec2 xlat_mutableuva;\nvec2 xlat_mutableuvb;\n shader_body { \n  vec2 tmpvar_1;\n  tmpvar_1.x = q1;\n  tmpvar_1.y = q2;\n  vec2 tmpvar_2;\n  tmpvar_2.x = q17;\n  tmpvar_2.y = q18;\n  vec2 uv_3;\n  vec3 ret_4;\n  uv_3 = (uv + (texsize.zw / 2.0));\n  xlat_mutableuv0 = uv_3;\n  vec2 uvi_5;\n  uvi_5 = (uv_3 + vec2(0.002, 0.0));\n  float tmpvar_6;\n  tmpvar_6 = mix (((texture (sampler_blur1, uvi_5).xyz * scale1) + bias1).x, texture (sampler_main, uvi_5).x, 0.1);\n  vec2 uvi_7;\n  uvi_7 = (uv_3 - vec2(0.002, 0.0));\n  float tmpvar_8;\n  tmpvar_8 = mix (((texture (sampler_blur1, uvi_7).xyz * scale1) + bias1).x, texture (sampler_main, uvi_7).x, 0.1);\n  xlat_mutabledz1.x = ((tmpvar_6 * float(\n    (tmpvar_6 > 0.02)\n  )) - (tmpvar_8 * float(\n    (tmpvar_8 > 0.02)\n  )));\n  vec2 uvi_9;\n  uvi_9 = (uv_3 + vec2(0.0, 0.002));\n  float tmpvar_10;\n  tmpvar_10 = mix (((texture (sampler_blur1, uvi_9).xyz * scale1) + bias1).x, texture (sampler_main, uvi_9).x, 0.1);\n  vec2 uvi_11;\n  uvi_11 = (uv_3 - vec2(0.0, 0.002));\n  float tmpvar_12;\n  tmpvar_12 = mix (((texture (sampler_blur1, uvi_11).xyz * scale1) + bias1).x, texture (sampler_main, uvi_11).x, 0.1);\n  xlat_mutabledz1.y = ((tmpvar_10 * float(\n    (tmpvar_10 > 0.02)\n  )) - (tmpvar_12 * float(\n    (tmpvar_12 > 0.02)\n  )));\n  uv_3 = (uv_3 + (xlat_mutabledz1 * 0.26));\n  xlat_mutablerdist = ((texture (sampler_blur1, uv_3).xyz * scale1) + bias1).z;\n  vec4 tmpvar_13;\n  tmpvar_13.w = 0.0;\n  tmpvar_13.xyz = texture (sampler_noise_hq, vec2(((xlat_mutablerdist * 0.05) + (time * 0.02)))).xyz;\n  vec4 tmpvar_14;\n  tmpvar_14 = mix (tmpvar_13, roam_sin, vec4(0.5, 0.5, 0.5, 0.5));\n  xlat_mutableuv4 = (uv_3 - 0.4);\n  xlat_mutableuva = ((xlat_mutableuv4 - tmpvar_1) - ((\n    ((texture (sampler_blur1, uv_3).xyz * scale1) + bias1)\n  .x * 0.4) * float(\n    (xlat_mutablerdist > 0.2)\n  )));\n  xlat_mutableuvb = ((xlat_mutableuv4 - tmpvar_2) - ((\n    (texture (sampler_blur1, uv_3).xyz * scale1)\n   + bias1).x * 0.4));\n  float angle_15;\n  float tmpvar_16;\n  tmpvar_16 = abs(xlat_mutableuva.x);\n  if ((xlat_mutableuva.y >= 0.0)) {\n    angle_15 = (1.0 - ((xlat_mutableuva.y - tmpvar_16) / (xlat_mutableuva.y + tmpvar_16)));\n  } else {\n    angle_15 = (3.0 - ((xlat_mutableuva.y + tmpvar_16) / (tmpvar_16 - xlat_mutableuva.y)));\n  };\n  float tmpvar_17;\n  if ((xlat_mutableuva.x < 0.0)) {\n    tmpvar_17 = -(angle_15);\n  } else {\n    tmpvar_17 = angle_15;\n  };\n  xlat_mutablecross1 = ((pow (\n    sin((3.141593 * (tmpvar_17 + (5.1 * q20))))\n  , 1.5) + (xlat_mutablerdist / 2.0)) + 0.1);\n  vec3 tmpvar_18;\n  tmpvar_18 = vec3((((1.0/(\n    dot (xlat_mutableuva, xlat_mutableuva)\n  )) / xlat_mutablecross1) * q3));\n  vec3 tmpvar_19;\n  tmpvar_19 = vec3(((1.0/(dot (xlat_mutableuvb, xlat_mutableuvb))) * q19));\n  ret_4 = (clamp ((1.0 - \n    (2.0 * xlat_mutablerdist)\n  ), 0.0, 1.0) * ((\n    (tmpvar_18 * tmpvar_14.xyz)\n   + \n    (tmpvar_19 * (1.0 - tmpvar_14.xyz))\n  ) + 0.1));\n  ret_4 = (ret_4 + (clamp (\n    (2.0 * xlat_mutablerdist)\n  , 0.0, 1.0) * (\n    (tmpvar_18 * tmpvar_14.zyx)\n   + \n    (tmpvar_19 * (1.0 - tmpvar_14.zyx))\n  )));\n  ret_4 = (ret_4 + ((\n    (texture (sampler_blur1, xlat_mutableuv0).xyz * scale1)\n   + bias1).x * 0.05));\n  ret_4 = (1.0 - exp(-(ret_4)));\n  vec4 tmpvar_20;\n  tmpvar_20.w = 1.0;\n  tmpvar_20.xyz = ret_4;\n  ret = tmpvar_20.xyz;\n }","warp_hlsl":"float seed, dist, struc, len; float2 uv0, uv1; float3 uv2; float4 box;\nstatic const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);\nstatic const float3 CamPos = float3(q4,q5,q6);\nstatic const float sustain = .97- q14, change = q14, ds = q10;\nstatic const float myzoom = q7, limit = 40, tele=q16, tic = 1.0/255, pix = texsize.z*2;\nstatic const float3 mod1 = (rand_preset.xyz - 0.5);\n\nfloat GetDist(float2 uvi) {float2 tmp; tmp = tex2D (sampler_pw_main, uvi).gb; \n  return 1-(tmp.y + 1.0/255*tmp.x);}\n\nfloat2 PutDist(float x) {float fg, fb; fg = modf((1-x)*255.0,fb);\n  return (float2(fg,fb/255.0));}\n\nfloat tdist (float d) {return tan(d*1.35)/1.35;}\n\nfloat MinDist (float2 uvi) \n{  float4 nb; float4 nb2;\n   nb.x = GetDist(uvi+pix*float2(-1,-1));  nb.y = GetDist(uvi+pix*float2(1,-1));\n   nb.z = GetDist(uvi+pix*float2(1,1));    nb.w = GetDist(uvi+pix*float2(-1,1));\n   nb2.x = GetDist(uvi+pix*float2(0,-1));  nb2.y = GetDist(uvi+pix*float2(1,0));\n   nb2.z = GetDist(uvi+pix*float2(0,1));   nb2.w = GetDist(uvi+pix*float2(-1,0));\n   nb = min( nb, nb2 );   nb.xy = min( nb.xy, nb.zw );\n   return min( nb.x, nb.y );}\n\nfloat4 mbox (float3 uvi) {float3 zz, zz0; float tmp;\n  zz = uvi; zz0 = uvi+q8;\n  for (int n = 0; n <= 8; n++) {\n    zz = 2.0*clamp(zz,-1,1)-zz;  tmp = dot(zz,zz);\n    zz *= max(1/tmp, 1);\n    zz = 2.6*zz + zz0;}\n  return float4(zz,0);}\n\nshader_body {\nuv1 = (uv-.5)*aspect.xy*tele;\nfloat edist =  (GetDist(uv+0.000));\nuv = (uv-.5)*(1-ds/edist) + .5;\n\nfloat3 noise = frac(8*tex2D (sampler_noise_lq,uv+rand_frame.yz)); \ndist = noise.r; seed = 1;\n   if (noise.g > 0.16) \n   {  seed = 0;float3 noiseBiased = noise - 0.5;\n      dist = MinDist(uv) +  0.006* noiseBiased.x * noise.y -ds*0.5; }\n\nuv2 = mul(float3(uv1*tdist(dist),tdist(dist)-.0)/myzoom,RotMat)+CamPos;\nuv2 = (frac(uv2/4+.5)-.5)*2+float3(1,2,3);\nbox = mbox (uv2); len = length(box.xyz); \n\nstruc = (1-1.4*dot(box,mod1)/limit-dist*0.3);\n\nif ((len < limit) && (dist > 0.04*(1-rad))){\n ret.r = lerp (struc,GetPixel(uv).r,sustain); ret.gb=  PutDist(dist); } \n else {ret = tex2D(sampler_fc_main,uv)*sustain  - tic;} \n//ret = 0;\n}","comp_hlsl":"float rdist, cross1;\nfloat2 dz, dz1, uv0, uv1, uv4, uva, uvb, uvc;\nfloat3 flash1, flash2, col1, col2;\nstatic const float2 pos1 = float2 (q1,q2);\nstatic const float2 pos2 = float2 (q17,q18);\nstatic const float2 hor = float2(0.002,0);\n\nfloat GetBuf(float2 uvi)\n  {float res, bb;\n  bb = GetBlur1(uvi).r;\n  res = lerp(bb,GetPixel(uvi).r,0.1);\n//  res *= 1+ 0.1*sin(bb*32);\n  return res *(res>0.02);}\n\nfloat aTan2(float y, float x) {float angle;\t float abs_y = abs(y);\nif (x >= 0) {float r = (x - abs_y) / (x + abs_y); angle = 1-r;} \nelse {float r = (x + abs_y) / (abs_y - x); angle = 3-r; }\t\n//angle = angle * .25;\nreturn y < 0 ? -angle : angle;}\n\nshader_body {\nuv += texsize.zw/2;\nuv0 = uv;\nrdist = GetBlur1(uv).b;\n\n\ndz1.x = GetBuf(uv+hor) - GetBuf(uv-hor);\ndz1.y = GetBuf(uv+hor.yx) - GetBuf(uv-hor.yx);\nuv += dz1 *.26;\nrdist = GetBlur1(uv).b;\n\ncol1 = tex2D(sampler_noise_hq,rdist*0.05+time*0.02);\ncol1 = lerp (col1,roam_sin,0.5);\ncol2 = col1.bgr;\n\nuv4 = uv-.4;\nuva = uv4-pos1-GetBlur1(uv).r*.4*(rdist>.2);\nuvb = uv4-pos2-GetBlur1(uv).r*.4;\ncross1 = pow(sin(M_PI*(aTan2(uva.x,uva.y)+5.1*q20)),1.5)+rdist/2+0.1;\nflash1 = 1/dot (uva,uva)/cross1*q3;\nflash2 = 1/dot (uvb,uvb)*q19;\n\nfloat r0 = rdist;\nret = saturate(1-2*r0) * (flash1*col1 + flash2*(1-col1)+0.1);\nret += saturate(2*r0)  * (flash1*col2 + flash2*(1-col2));\n\n\nret += GetBlur1(uv0).r*0.05;\n//ret *= 1-(rand_preset.y-0.5)*GetBuf(uv);\n\nret = 1-exp(-ret);\n\n//ret = GetPixel(uv0).r;\n}\n\n"}