{"version":2,"baseVals":{"rating":3,"gammaadj":1.21,"decay":1,"echo_zoom":1,"echo_alpha":0.5,"wave_thick":1,"wave_brighten":0,"wrap":0,"wave_a":0.004,"wave_scale":0.073,"wave_smoothing":0,"wave_mystery":-0.44,"modwavealphastart":1,"modwavealphaend":1,"warpanimspeed":0.01,"warpscale":100,"zoomexp":0.92178,"fshader":1,"zoom":0.9901,"warp":0.01,"wave_y":0.04,"ob_size":0,"ob_a":1,"ib_size":0,"ib_r":0,"ib_g":0,"ib_b":0,"ib_a":1,"mv_x":64,"mv_y":48,"mv_l":0.5,"mv_r":0,"mv_g":0,"mv_b":0,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"num_inst":4,"x":0,"rad":1.0363,"tex_ang":0.12566,"tex_zoom":1.51878,"r":0,"g":1,"a":0.96,"a2":1,"border_g":0,"border_b":0,"border_a":0},"init_eqs_str":"a.h=0;a.w=0;a.q10=0;a.q9=0;a.vx=0;","frame_eqs_str":"a.rad=2;a.h=sqrt(2);a.w=.004;a.x=.00001<Math.abs(1-equal(a.instance,0))?.00001<Math.abs(1-equal(a.instance,1))?.00001<Math.abs(1-equal(a.instance,2))?a.w-.5*a.h*a.q10:1-a.w+.5*a.h*a.q10:.5:.5;a.y=.00001<Math.abs(1-equal(a.instance,0))?.00001<Math.abs(1-equal(a.instance,1))?.5:a.w-.5*a.h*a.q9:1-a.w+.5*a.h*a.q9;a.g=.00001<Math.abs(1-equal(a.instance,0))?.00001<Math.abs(1-equal(a.instance,1))?0:1:1;a.g2=a.g;","init_eqs_eel":"vx = 0","frame_eqs_eel":"rad = 2;\nh = sqrt(2);\nw = 0.004;\n\nx = if(1-equal(instance,0),if(1-equal(instance,1),if(1-equal(instance,2),w - h*0.5*q10,1-w + h*0.5*q10),0.5),0.5);\ny = if(1-equal(instance,0),if(1-equal(instance,1),0.5,w - h*0.5*q9),1-w + h*0.5*q9);\ng = if(1-equal(instance,0),if(1-equal(instance,1),0,1),1);\ng2 = g;"},{"baseVals":{"sides":100,"additive":1,"thickoutline":1,"y":0.75,"rad":0.05784,"tex_zoom":0.73458,"r":0,"b":1,"a":0.5,"g2":0,"border_a":0,"enabled":0},"init_eqs_str":"vx = 0","frame_eqs_str":"x = q1;\ny = q5;","init_eqs_eel":"vx = 0","frame_eqs_eel":"x = q1;\ny = q5;"},{"baseVals":{"sides":100,"additive":1,"rad":0.0578,"ang":3.20442,"tex_zoom":6.23873,"r2":1,"g2":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":100,"additive":1,"thickoutline":1,"y":0.75,"rad":0.07059,"tex_zoom":0.73458,"g2":0,"border_a":0,"enabled":0},"init_eqs_str":"vx = 0","frame_eqs_str":"x = q1;\ny = q5;","init_eqs_eel":"vx = 0","frame_eqs_eel":"x = q1;\ny = q5;"}],"waves":[{"baseVals":{"thick":1,"additive":1,"scaling":1.69136,"smoothing":0,"r":0,"g":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"t1 = q1;\nt2 = q2;\nt3 = q3;\nt4 = q4;\nt5 = q5;\nt6 = q6;\nt7 = q7;\nt8 = q8;","point_eqs_str":"sample = 1-sample;\nxxx = xx;\nyyy = yy;\nxx = pow(sample,5)*t1 + 5*pow(sample,4)*(1-sample)*t1 + 10*pow(sample,3)*sqr(1-sample)*t2\n+ 10*sqr(sample)*pow(1-sample,3)*t3 + 5*pow(1-sample,4)*sample*t4 + pow(1-sample,5)*t4;\n\nyy = pow(sample,5)*t5 + 5*pow(sample,4)*(1-sample)*t5 + 10*pow(sample,3)*sqr(1-sample)*t6\n+ 10*sqr(sample)*pow(1-sample,3)*t7 + 5*pow(1-sample,4)*sample*t8 + pow(1-sample,5)*t8;\n\nd = 1/sqrt(sqr(xx-xxx)+sqr(yy-yyy));\ntt3 = tt3*0.6 + (value1)*1;\ntt2 = tt2*0.7 + tt3*0.2;\ntt1 = tt1*0.8 + tt2*0.1;\ndd = dd*0.9 + tt1*0.2;\nddd = sample*(1-sample)*dd*d*4;\nx = xx + (yy-yyy)*ddd;\ny = yy - (xx-xxx)*ddd;\n\nx = 0.5 + (x-0.5)*q9;\ny = 0.5 + (y-0.5)*q10;\n","init_eqs_eel":"","frame_eqs_eel":"t1 = q1;\nt2 = q2;\nt3 = q3;\nt4 = q4;\nt5 = q5;\nt6 = q6;\nt7 = q7;\nt8 = q8;","point_eqs_eel":"sample = 1-sample;\nxxx = xx;\nyyy = yy;\nxx = pow(sample,5)*t1 + 5*pow(sample,4)*(1-sample)*t1 + 10*pow(sample,3)*sqr(1-sample)*t2\n+ 10*sqr(sample)*pow(1-sample,3)*t3 + 5*pow(1-sample,4)*sample*t4 + pow(1-sample,5)*t4;\n\nyy = pow(sample,5)*t5 + 5*pow(sample,4)*(1-sample)*t5 + 10*pow(sample,3)*sqr(1-sample)*t6\n+ 10*sqr(sample)*pow(1-sample,3)*t7 + 5*pow(1-sample,4)*sample*t8 + pow(1-sample,5)*t8;\n\nd = 1/sqrt(sqr(xx-xxx)+sqr(yy-yyy));\ntt3 = tt3*0.6 + (value1)*1;\ntt2 = tt2*0.7 + tt3*0.2;\ntt1 = tt1*0.8 + tt2*0.1;\ndd = dd*0.9 + tt1*0.2;\nddd = sample*(1-sample)*dd*d*4;\nx = xx + (yy-yyy)*ddd;\ny = yy - (xx-xxx)*ddd;\n\nx = 0.5 + (x-0.5)*q9;\ny = 0.5 + (y-0.5)*q10;\n"},{"baseVals":{"scaling":2.44415,"smoothing":0,"enabled":0},"init_eqs_str":"t2 = 0;\nt3 = 0;\nt4 = 0;\ncl = 0;","frame_eqs_str":"t8 = 1;","point_eqs_str":"t8 = -t8;\ny = sample*0.05;\nx = 0.5 + t8*0.005;\n\npi3 = 3.1415*2*0.3333;\nt = (q4-q6)*10;\nc=2;\nr = sin(t)*c;\ng = sin(t+pi3)*c;\n\nb = sin(t-pi3)*c;\n\n\nr = if(above(r,1),1,r);\nr = if(below(r,0),0,r);\ng = if(above(g,1),1,g);\ng = if(below(g,0),0,g);\nb = if(above(b,1),1,b);\nb = if(below(b,0),0,b);\n","init_eqs_eel":"t2 = 0;\nt3 = 0;\nt4 = 0;\ncl = 0;","frame_eqs_eel":"t8 = 1;","point_eqs_eel":"t8 = -t8;\ny = sample*0.05;\nx = 0.5 + t8*0.005;\n\npi3 = 3.1415*2*0.3333;\nt = (q4-q6)*10;\nc=2;\nr = sin(t)*c;\ng = sin(t+pi3)*c;\n\nb = sin(t-pi3)*c;\n\n\nr = if(above(r,1),1,r);\nr = if(below(r,0),0,r);\ng = if(above(g,1),1,g);\ng = if(below(g,0),0,g);\nb = if(above(b,1),1,b);\nb = if(below(b,0),0,b);\n"},{"baseVals":{"usedots":1,"thick":1,"additive":1,"scaling":100,"smoothing":0.6,"r":0,"g":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"t1 = q1;\nt2 = q2;\nt3 = q3;\nt4 = q4;\nt5 = q5;\nt6 = q6;\nt7 = q7;\nt8 = q8;","point_eqs_str":"y = 0.5;\nx = sample;","init_eqs_eel":"","frame_eqs_eel":"t1 = q1;\nt2 = q2;\nt3 = q3;\nt4 = q4;\nt5 = q5;\nt6 = q6;\nt7 = q7;\nt8 = q8;","point_eqs_eel":"y = 0.5;\nx = sample;"},{"baseVals":{"usedots":1,"scaling":2.44415,"smoothing":0,"r":0,"g":0,"enabled":0},"init_eqs_str":"t2 = 0;\nt3 = 0;\nt4 = 0;\ncl = 0;","frame_eqs_str":"t8 = 1;","point_eqs_str":"t8 = -t8;\ny = (1+t8)*0.01;\nx = sample;","init_eqs_eel":"t2 = 0;\nt3 = 0;\nt4 = 0;\ncl = 0;","frame_eqs_eel":"t8 = 1;","point_eqs_eel":"t8 = -t8;\ny = (1+t8)*0.01;\nx = sample;"}],"init_eqs_str":"a.d=0;a.y3=0;a.y1=0;a.xx=0;a.q25=0;a.q12=0;a.t1=0;a.x1=0;a.q22=0;a.q21=0;a.vx3=0;a.q6=0;a.dt=0;a.q1=0;a.q5=0;a.q9=0;a.v=0;a.vx4=0;a.mm=0;a.tt=0;a.t3=0;a.bm=0;a.x3=0;a.q23=0;a.q11=0;a.q10=0;a.xx2=0;a.q4=0;a.yy1=0;a.vy4=0;a.q26=0;a.x4=0;a.mt=0;a.r=0;a.x2=0;a.mx=0;a.mn=0;a.t2=0;a.vy2=0;a.y2=0;a.bb=0;a.q2=0;a.q27=0;a.vx2=0;a.q3=0;a.yy=0;a.y4=0;a.q7=0;a.vy3=0;a.xx1=0;a.q8=0;a.x1=.9;a.y1=.5;a.x2=.5;a.y2=.5;a.x3=.5;a.y3=.5;a.x4=.5;a.y4=.5;","frame_eqs_str":"a.zoom=1;a.warp=0;a.wave_a=0;a.xx1=.9*a.xx1+.01*a.bass;a.xx2=.9*a.xx2+.01*a.treb;a.yy1=.94*a.yy1+.0075*(a.treb+a.bass);a.x1=.5+2*(a.xx1-a.xx2);a.y1=.4+1.5*a.yy1;a.dt=div(.03,a.fps);a.vx2=a.vx2*(1-2*a.dt)+10*a.dt*(a.x1+a.x3-2*a.x2);a.vy2=a.vy2*(1-2*a.dt)+a.dt*(10*(a.y1+a.y3-2*a.y2)-.5);a.vx3=a.vx3*(1-2*a.dt)+10*a.dt*(a.x2+a.x4-2*a.x3);a.vy3=a.vy3*(1-2*a.dt)+a.dt*(10*(a.y2+a.y4-2*a.y3)-.5);a.vx4=a.vx4*(1-2*a.dt)+10*a.dt*(a.x3-a.x4);a.vy4=a.vy4*(1-2*a.dt)+a.dt*(10*(a.y3-a.y4)-\n.5);a.x2+=a.vx2;a.y2+=a.vy2;a.x3+=a.vx3;a.y3+=a.vy3;a.x4+=a.vx4;a.y4+=a.vy4;a.vx2=.00001<Math.abs(above(a.x2,0))?a.vx2:.5*Math.abs(a.vx2);a.vx2=.00001<Math.abs(below(a.x2,1))?a.vx2:.5*-Math.abs(a.vx2);a.vx3=.00001<Math.abs(above(a.x3,0))?a.vx3:.5*Math.abs(a.vx3);a.vx3=.00001<Math.abs(below(a.x3,1))?a.vx3:.5*-Math.abs(a.vx3);a.vx4=.00001<Math.abs(above(a.x4,0))?a.vx4:.5*Math.abs(a.vx4);a.vx4=.00001<Math.abs(below(a.x4,1))?a.vx4:.5*-Math.abs(a.vx4);a.vy2=.00001<Math.abs(above(a.y2,0))?a.vy2:.5*Math.abs(a.vy2);\na.vy2=.00001<Math.abs(below(a.y2,1))?a.vy2:.5*-Math.abs(a.vy2);a.vy3=.00001<Math.abs(above(a.y3,0))?a.vy3:.5*Math.abs(a.vy3);a.vy3=.00001<Math.abs(below(a.y3,1))?a.vy3:.5*-Math.abs(a.vy3);a.vy4=.00001<Math.abs(above(a.y4,0))?a.vy4:.5*Math.abs(a.vy4);a.vy4=.00001<Math.abs(below(a.y4,1))?a.vy4:.5*-Math.abs(a.vy4);a.q1=a.x1;a.q2=a.x2;a.q3=a.x3;a.q4=a.x4;a.q5=a.y1;a.q6=a.y2;a.q7=a.y3;a.q8=a.y4;a.q9=div(1,a.aspectx);a.q10=div(1,a.aspecty);a.q11=a.aspectx;a.q12=a.aspecty;a.bb=.99*a.bb+.02*a.bass;a.mm=.99*\na.mm+.02*a.mid;a.tt=.99*a.tt+.02*a.treb;a.mx=Math.max(Math.max(a.bb,a.mm),a.tt);a.mn=Math.min(Math.min(a.bb,a.mm),a.tt);a.t1=div(a.bb-a.mn,a.mx-a.mn);a.t2=div(a.mm-a.mn,a.mx-a.mn);a.t3=div(a.tt-a.mn,a.mx-a.mn);a.v=div(.1,a.fps);a.bm+=(a.t1-a.t2)*a.v;a.mt+=(a.t2-a.t3)*a.v;a.q22=0;a.q21=1;a.q25=0;a.q23=-1;a.q26=-a.bm;a.q27=a.mt;","pixel_eqs_str":"a.x=.5+(a.x-.5)*a.q11;a.y=.5+(a.y-.5)*a.q12;a.xx=a.q4;a.yy=1-a.q8;a.dx=0;a.dy=0;a.d=sqrt((a.x-a.xx)*(a.x-a.xx)+(a.y-a.yy)*(a.y-a.yy));a.r=.11;a.v=20;a.dx=a.v*(Math.sin(a.y-a.yy)*(a.d-a.r)-(a.x-a.xx)*(a.d-div(a.r,2)))*(1-sigmoid(a.d-a.r,100));a.dy=-a.v*(Math.sin(a.x-a.xx)*(a.d-a.r)+(a.y-a.yy)*(a.d-div(a.r,2)))*(1-sigmoid(a.d-a.r,100));","init_eqs_eel":"x1 = 0.9;\ny1 = 0.5;\n\nx2 = 0.5; y2 = 0.5;\nx3 = 0.5; y3 = 0.5;\nx4 = 0.5; y4 = 0.5;","frame_eqs_eel":"zoom = 1;\nwarp = 0;\nwave_a = 0;\n\n// elastic thread code\n\nxx1 = xx1*0.9 + (bass)*0.01;\nxx2 = xx2*0.9 + (treb)*0.01;\nyy1 = yy1*0.94 + (treb+bass)*0.0075;\nx1 = 0.5 + (xx1-xx2)*2;\ny1 = 0.4 + yy1*1.5;\ndt = 0.03/fps;\nvx2 = vx2*(1-2*dt) + dt*((x1+x3-2*x2)*10);\nvy2 = vy2*(1-2*dt) + dt*((y1+y3-2*y2)*10-0.5);\nvx3 = vx3*(1-2*dt) + dt*((x2+x4-2*x3)*10);\nvy3 = vy3*(1-2*dt) + dt*((y2+y4-2*y3)*10-0.5);\nvx4 = vx4*(1-2*dt) + dt*((x3-x4)*10);\nvy4 = vy4*(1-2*dt) + dt*((y3-y4)*10-0.5);\nx2 = x2 + vx2; y2 = y2 + vy2;\nx3 = x3 + vx3; y3 = y3 + vy3;\nx4 = x4 + vx4; y4 = y4 + vy4;\nvx2 = if(above(x2,0),vx2,abs(vx2)*0.5);\nvx2 = if(below(x2,1),vx2,-abs(vx2)*0.5);\nvx3 = if(above(x3,0),vx3,abs(vx3)*0.5);\nvx3 = if(below(x3,1),vx3,-abs(vx3)*0.5);\nvx4 = if(above(x4,0),vx4,abs(vx4)*0.5);\nvx4 = if(below(x4,1),vx4,-abs(vx4)*0.5);\nvy2 = if(above(y2,0),vy2,abs(vy2)*0.5);\nvy2 = if(below(y2,1),vy2,-abs(vy2)*0.5);\nvy3 = if(above(y3,0),vy3,abs(vy3)*0.5);\nvy3 = if(below(y3,1),vy3,-abs(vy3)*0.5);\nvy4 = if(above(y4,0),vy4,abs(vy4)*0.5);\nvy4 = if(below(y4,1),vy4,-abs(vy4)*0.5);\nq1 = x1;q2 = x2;q3 = x3;q4 = x4;\nq5 = y1;q6 = y2;q7 = y3;q8 = y4;\nq9 = 1/aspectx;\nq10 = 1/aspecty;\nq11 = aspectx;\nq12 = aspecty;\n\n//bipolar fractal code\n\nbb = bb*0.99 + bass*0.02;\nmm = mm*0.99 + mid*0.02;\ntt = tt*0.99 + treb*0.02;\nmx = max(max(bb,mm),tt);\nmn = min(min(bb,mm),tt);\nt1 = (bb-mn)/(mx-mn);\nt2 = (mm-mn)/(mx-mn);\nt3 = (tt-mn)/(mx-mn);\nv = 0.1/fps; // change\nbm = bm + (t1-t2)*v;\nmt = mt + (t2-t3)*v;\nq22 = 0;\nq21 = 1;\nq25 = 0;\nq23 = -1;\nq26 = -bm;\nq27 = mt;","pixel_eqs_eel":"x = 0.5 + (x-0.5)*q11;\ny = 0.5 + (y-0.5)*q12;\nxx = q4;\nyy = 1-q8;\n\ndx = 0; dy = 0;\n\nd = sqrt((x-xx)*(x-xx)+(y-yy)*(y-yy));\n\nr = 0.11;\nv = 20;\ndx = (v*(sin(y-yy)*(d-r)-(x-xx)*(d-r/2)))*(1.00-sigmoid(d-r,100));\ndy = (-v*(sin(x-xx)*(d-r)+(y-yy)*(d-r/2)))*(1.00-sigmoid(d-r,100));","warp":" shader_body { \n  vec3 ret_1;\n  ret_1.y = texture (sampler_fc_main, uv).y;\n  vec4 tmpvar_2;\n  tmpvar_2.w = 1.0;\n  tmpvar_2.xyz = ret_1;\n  ret = tmpvar_2.xyz;\n }","comp":"vec2 xlat_mutablec;\nfloat xlat_mutablecutoff;\nvec2 xlat_mutabledenominator;\nvec2 xlat_mutablefraction;\nvec2 xlat_mutablenumerator;\nfloat xlat_mutables;\n shader_body { \n  vec2 uv_1;\n  uv_1 = (0.5 + ((uv - 0.5) * 4.0));\n  xlat_mutablecutoff = 2.0;\n  xlat_mutablen = 1;\n  xlat_mutables = 0.33;\n  xlat_mutabledepth = 2;\n  for (int i_3 = 0; i_3 < xlat_mutabledepth; i_3++) {\n    xlat_mutablec = (((uv_1 - 0.5) * 2.0) * aspect.wz);\n    vec2 tmpvar_4;\n    tmpvar_4.x = q21;\n    tmpvar_4.y = q22;\n    xlat_mutablenumerator = ((xlat_mutablec + tmpvar_4) * 64.0);\n    vec2 tmpvar_5;\n    tmpvar_5.x = q23;\n    tmpvar_5.y = q24;\n    xlat_mutabledenominator = (xlat_mutablec + tmpvar_5);\n    vec2 tmpvar_6;\n    tmpvar_6.x = ((xlat_mutablenumerator.x * xlat_mutabledenominator.x) + (xlat_mutablenumerator.y * xlat_mutabledenominator.y));\n    tmpvar_6.y = ((xlat_mutablenumerator.y * xlat_mutabledenominator.x) - (xlat_mutablenumerator.x * xlat_mutabledenominator.y));\n    xlat_mutablefraction = (tmpvar_6 / ((xlat_mutabledenominator.x * xlat_mutabledenominator.x) + (xlat_mutabledenominator.y * xlat_mutabledenominator.y)));\n    xlat_mutablec = (xlat_mutablefraction - 0.5);\n    float tmpvar_7;\n    float tmpvar_8;\n    tmpvar_8 = (min (abs(\n      (xlat_mutablec.x / xlat_mutablec.y)\n    ), 1.0) / max (abs(\n      (xlat_mutablec.x / xlat_mutablec.y)\n    ), 1.0));\n    float tmpvar_9;\n    tmpvar_9 = (tmpvar_8 * tmpvar_8);\n    tmpvar_9 = (((\n      ((((\n        ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)\n       * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)\n     * tmpvar_9) + 0.9999793) * tmpvar_8);\n    tmpvar_9 = (tmpvar_9 + (float(\n      (abs((xlat_mutablec.x / xlat_mutablec.y)) > 1.0)\n    ) * (\n      (tmpvar_9 * -2.0)\n     + 1.570796)));\n    tmpvar_7 = (tmpvar_9 * sign((xlat_mutablec.x / xlat_mutablec.y)));\n    if ((abs(xlat_mutablec.y) > (1e-08 * abs(xlat_mutablec.x)))) {\n      if ((xlat_mutablec.y < 0.0)) {\n        if ((xlat_mutablec.x >= 0.0)) {\n          tmpvar_7 += 3.141593;\n        } else {\n          tmpvar_7 = (tmpvar_7 - 3.141593);\n        };\n      };\n    } else {\n      tmpvar_7 = (sign(xlat_mutablec.x) * 1.570796);\n    };\n    vec2 tmpvar_10;\n    tmpvar_10.x = ((0.3183098 * (\n      float(xlat_mutablen)\n     * tmpvar_7)) + q26);\n    tmpvar_10.y = (((xlat_mutables * aspect.w) * log(\n      sqrt(dot (xlat_mutablec, xlat_mutablec))\n    )) + q27);\n    uv_1 = (0.5 + ((0.5 - \n      abs(((fract(\n        (tmpvar_10 * 0.5)\n      ) * 2.0) - 1.0))\n    ) * xlat_mutablecutoff));\n  };\n  uv_1 = (0.5 + (uv_1 - 0.5));\n  xlat_mutablecutoff = 1.6;\n  xlat_mutablen = 4;\n  xlat_mutables = 1.0;\n  xlat_mutabledepth = 1;\n  for (int i_1_2 = 0; i_1_2 < xlat_mutabledepth; i_1_2++) {\n    xlat_mutablec = (((uv_1 - 0.5) * 2.0) * aspect.wz);\n    vec2 tmpvar_11;\n    tmpvar_11.x = q21;\n    tmpvar_11.y = q22;\n    xlat_mutablenumerator = ((xlat_mutablec + tmpvar_11) * 64.0);\n    vec2 tmpvar_12;\n    tmpvar_12.x = q23;\n    tmpvar_12.y = q24;\n    xlat_mutabledenominator = (xlat_mutablec + tmpvar_12);\n    vec2 tmpvar_13;\n    tmpvar_13.x = ((xlat_mutablenumerator.x * xlat_mutabledenominator.x) + (xlat_mutablenumerator.y * xlat_mutabledenominator.y));\n    tmpvar_13.y = ((xlat_mutablenumerator.y * xlat_mutabledenominator.x) - (xlat_mutablenumerator.x * xlat_mutabledenominator.y));\n    xlat_mutablefraction = (tmpvar_13 / ((xlat_mutabledenominator.x * xlat_mutabledenominator.x) + (xlat_mutabledenominator.y * xlat_mutabledenominator.y)));\n    xlat_mutablec = (xlat_mutablefraction - 0.5);\n    float tmpvar_14;\n    float tmpvar_15;\n    tmpvar_15 = (min (abs(\n      (xlat_mutablec.x / xlat_mutablec.y)\n    ), 1.0) / max (abs(\n      (xlat_mutablec.x / xlat_mutablec.y)\n    ), 1.0));\n    float tmpvar_16;\n    tmpvar_16 = (tmpvar_15 * tmpvar_15);\n    tmpvar_16 = (((\n      ((((\n        ((((-0.01213232 * tmpvar_16) + 0.05368138) * tmpvar_16) - 0.1173503)\n       * tmpvar_16) + 0.1938925) * tmpvar_16) - 0.3326756)\n     * tmpvar_16) + 0.9999793) * tmpvar_15);\n    tmpvar_16 = (tmpvar_16 + (float(\n      (abs((xlat_mutablec.x / xlat_mutablec.y)) > 1.0)\n    ) * (\n      (tmpvar_16 * -2.0)\n     + 1.570796)));\n    tmpvar_14 = (tmpvar_16 * sign((xlat_mutablec.x / xlat_mutablec.y)));\n    if ((abs(xlat_mutablec.y) > (1e-08 * abs(xlat_mutablec.x)))) {\n      if ((xlat_mutablec.y < 0.0)) {\n        if ((xlat_mutablec.x >= 0.0)) {\n          tmpvar_14 += 3.141593;\n        } else {\n          tmpvar_14 = (tmpvar_14 - 3.141593);\n        };\n      };\n    } else {\n      tmpvar_14 = (sign(xlat_mutablec.x) * 1.570796);\n    };\n    vec2 tmpvar_17;\n    tmpvar_17.x = ((0.3183098 * (\n      float(xlat_mutablen)\n     * tmpvar_14)) + q26);\n    tmpvar_17.y = (((xlat_mutables * aspect.w) * log(\n      sqrt(dot (xlat_mutablec, xlat_mutablec))\n    )) + q27);\n    uv_1 = (0.5 + ((0.5 - \n      abs(((fract(\n        (tmpvar_17 * 0.5)\n      ) * 2.0) - 1.0))\n    ) * xlat_mutablecutoff));\n  };\n  vec2 x_18;\n  x_18 = -(uv_1);\n  vec4 tmpvar_19;\n  tmpvar_19.w = 1.0;\n  tmpvar_19.xyz = mix (mix (vec3(0.0, 1.0, 2.0), vec3(-2.0, -2.0, 0.0), vec3((\n    (-(texture (sampler_main, uv_1).y) + 0.5)\n   + \n    sqrt(dot (x_18, x_18))\n  ))), vec3(1.0, 0.5, 0.0), vec3((sqrt(\n    dot (uv_1, uv_1)\n  ) * 0.666)));\n  ret = tmpvar_19.xyz;\n }","warp_hlsl":"float2 factorA, factorB, product;\nshader_body\n{\nret.y = tex2D( sampler_fc_main, uv ).y;\n}","comp_hlsl":"float2 d, uv_light1;\nfloat3 dx, dy, c1, c2, c3, c4, light1_dy;\nfloat2 numerator, denominator, fraction;\nfloat2 c,bipolar;\nint depth, n;\nfloat cutoff,  s;\n\nshader_body\n{\nuv = 0.5 + (uv-0.5)*4; // try apply some overall zoom in or out, works good in play with number of iterations\ncutoff = 2;\nn = 1; // number of radial mirrors\ns = 0.33; // logarithmic zoom factor\ndepth = 2; //number of fractal iterations\n\nfor(int i = 0; i<depth;i++){\n c = (uv-0.5)*2*aspect.wz;\n   numerator = (c + float2(q21,q22))*64;\n   denominator = c + float2(q23,q24);\n   fraction = float2( numerator.x*denominator.x + numerator.y*denominator.y,\n                      numerator.y*denominator.x - numerator.x*denominator.y)/\n                      (denominator.x*denominator.x + denominator.y*denominator.y);\n   c = fraction-0.5; // kind of a Moebius transformation\n   bipolar = float2(n*atan2(c.x,c.y)*M_INV_PI_2*2+q26,s*aspect.w*log(length(c))+q27);\n   uv = 0.5 + (0.5 - abs( frac( bipolar * 0.5 ) * 2.0 - 1.0 ))*cutoff; // mirror\n}\n\nuv = 0.5 + (uv-0.5); // try apply some overall zoom in or out, works good in play with number of iterations\ncutoff = 1.6;\nn = 4; // number of radial mirrors\ns = 1; // logarithmic zoom factor\ndepth = 1; //number of fractal iterations\n\nfor(int i = 0; i<depth;i++){\n c = (uv-0.5)*2*aspect.wz;\n   numerator = (c + float2(q21,q22))*64;\n   denominator = c + float2(q23,q24);\n   fraction = float2( numerator.x*denominator.x + numerator.y*denominator.y,\n                      numerator.y*denominator.x - numerator.x*denominator.y)/\n                      (denominator.x*denominator.x + denominator.y*denominator.y);\n   c = fraction-0.5; // kind of a Moebius transformation\n   bipolar = float2(n*atan2(c.x,c.y)*M_INV_PI_2*2+q26,s*aspect.w*log(length(c))+q27);\n   uv = 0.5 + (0.5 - abs( frac( bipolar * 0.5 ) * 2.0 - 1.0 ))*cutoff; // mirror\n}\n\n\nret = lerp(float3(0,1,2),float3(-2,-2,0),-GetPixel(uv).y + 0.5  + length(-uv));\nret = lerp(ret,float3(1,0.5,0),length(uv)*0.666);\n}"}