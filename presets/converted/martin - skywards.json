{"version":2,"baseVals":{"rating":1,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_dots":1,"modwavealphabyvolume":1,"darken":1,"wave_a":0.005,"wave_scale":10.437,"wave_smoothing":0.45,"wave_mystery":0.08,"modwavealphastart":0,"modwavealphaend":1.32,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0,"wave_g":0.99,"ob_size":0.015,"ob_b":0.2,"ob_a":1,"ib_size":0.005,"ib_r":0,"ib_g":0,"ib_a":1,"mv_x":64,"mv_y":48,"mv_l":1.85,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"textured":1,"rad":1.30581,"ang":2.32478,"tex_ang":1.00531,"tex_zoom":1.53117,"r":0.5,"g":1,"b":0.9,"a":0.03,"r2":0.83,"g2":0.93,"b2":0.8,"a2":0.06,"border_b":0,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":100,"rad":1.26458,"tex_ang":1.4451,"tex_zoom":1.49331,"r":0.7,"g":0.4,"a":0.01,"r2":0.7,"g2":0.4,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":1,"x":0.503,"rad":0.03886,"tex_zoom":0.60986,"g":0.1,"a":0.9,"r2":1,"b2":1,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0},"init_eqs_eel":"","frame_eqs_eel":"x = rand(10)/10;\ny = rand(10)/10;\n\nr = rand(4)/3;\ng = rand(4)/3;\nb = rand(4)/3;\n\nrad = .1;"},{"baseVals":{"sides":63,"textured":1,"y":1,"rad":0.54822,"tex_zoom":0.49981,"g":1,"b":1,"r2":1,"b2":1,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"sep":120,"thick":1,"additive":1,"scaling":0.89152,"smoothing":0.82,"r":0,"g":0.5,"a":0.9,"enabled":0},"init_eqs_eel":"t1 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt2 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt3 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt4 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt5 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt6 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt7 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt8 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\n","frame_eqs_eel":"t2 = t2 + bass_att;","point_eqs_eel":"k1 = (sample*100)%2;\n\nxi = value1*k1 + xi*(1-k1);\nyi = value2*(1-k1) + yi*k1;\n\nx = .5 + xi/2;\ny = .5 + yi/2;\n\n\na = bass + mid + treb ;\na = a/10 * sqrt(xi*xi+yi*yi);"},{"baseVals":{"thick":1,"scaling":0.89152,"smoothing":0.82,"a":0.1,"enabled":0},"init_eqs_eel":"t1 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt2 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt3 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt4 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt5 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt6 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt7 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt8 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\n","frame_eqs_eel":"tm = time*.1;\nt1 = t1*sin(tm*t4) + (1-t1)*sin(tm*t7);\nt2 = t2*sin(tm*t5) + (1-t2)*sin(tm*t8);\nt3 = t3*sin(tm*t6) + (1-t3)*sin(tm*1);\n\ntic = min(time - tin,1);\ntin = time;\n\ntva = (tic*q1*.5);\ntvb = (tic*q2*.5);\ntvc = (tic*q3*.5);\n\nq1 = tva;\nq2 = tvb;\nq3 = tvc;\n\nsz = .5;\nlen = q4;\nt4 = len;","point_eqs_eel":""},{"baseVals":{"thick":1,"scaling":0.89152,"smoothing":0.82,"r":0,"g":0.2,"b":0,"enabled":0},"init_eqs_eel":"t1 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt2 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt3 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt4 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt5 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt6 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt7 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt8 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\n","frame_eqs_eel":"tm = time*.1;\nt1 = t1*sin(tm*t4) + (1-t1)*sin(tm*t7);\nt2 = t2*sin(tm*t5) + (1-t2)*sin(tm*t8);\nt3 = t3*sin(tm*t6) + (1-t3)*sin(tm*1);\n\ntic = min(time - tin,1);\ntin = time;\n\ntva = (tic*q1*.5);\ntvb = (tic*q2*.5);\ntvc = (tic*q3*.5);\n\nq1 = tva;\nq2 = tvb;\nq3 = tvc;\n\nsz = .5;\nlen = 1;\nt4 = len;","point_eqs_eel":"x0 = .5 + (-1) * q1/1;\ny0 = .0 - (-1)* .5;\n\n//x0 = .5; y0 = .5;\n\nk1 = int(100.0*sample);\nk2 = int(100.0*sample+1);\nk1 = k1%2;\nf1 = rand(100)/200-.25;\nf2 = rand(100)/200-.25;\n\nx = x0 + k1* f1;;\ny = y0 + k1* f2;\na = k2%2 /4;"},{"baseVals":{"spectrum":1,"usedots":1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"ra = .8;\nrb = .5;\npib = 6.28318530718;\n\n\ntic = min(time-tin,.1);\ntin = if(equal(sample,0),time,tin);\n\nmod = 1.5 + .5*sin(time*.15);\nmed = 1.5 + .5*sin(time*.134);\nmed = 5;\namod = 3;\n\nvr = rand(10001)*.0001;\nrb = rb + rand(10001)*.0001*.1;\n\na = vr;\n\nsa = vr*pib*.5;\nsp = sa*mod + q1*1.3;\nsam = sa*med - q1*.219;\n\nox = ra*sin(sam*pib);\noy = ra*cos(sam*pib);\nox = ox + rb*-cos(sp)*sin(sam*pib);\noz = rb*-sin(sp);\noy = oy + rb*-cos(sp)*cos(sam*pib);\n\n\nxang = time*.132;\nxang = q2;\nyang = time*.153;\nyang = q3;\nzang = time*.110;\nzang = q4;\nfov = 0.6 + 0.2*sin(time);\nfov = .5;\n\nmx = ox*cos(zang) - oy*sin(zang);\nmy = ox*sin(zang) + oy*cos(zang);\nox = mx;\noy = my;\nmx = ox*cos(yang) + oz*sin(yang);\nmz = -ox*sin(yang) + oz*cos(yang);\nox = mx;\noz = mz;\nmy = oy*cos(xang) - oz*sin(xang);\nmz = oy*sin(xang) + oz*cos(xang);\noy = my;\noz = mz;\n\noz = oz - 2;\nx = ox*fov/oz + 0.5;\nx = (x-.5)*0.75 + 0.5;\ny = oy*fov/oz + 0.5;\n"}],"init_eqs_eel":"","frame_eqs_eel":"dec_med = pow (0.9, 30/fps);\ndec_slow = pow (0.99, 30/fps);\nbeat = max (max (bass, mid), treb);\navg = avg*dec_slow + beat*(1-dec_slow);\nis_beat = above(beat, avg+peak) * above (time, t0+.2);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\nindex = (index + is_beat) %4;\nindex2 = (index2 + is_beat*bnot(index))%4;\nmonitor = index2;\nq20 = avg;\nq21 = beat;\nq22 = peak;\nq23 = index;\nq24 = is_beat;\nq26 = (bass + mid + treb)/16;\n\nk1 =  is_beat*bnot(index)*bnot(index2);\np1 =  k1*(p1+1) + (1-k1)*p1;\np2 = dec_med * p2+ (1-dec_med)*p1;\np3 = dec_med * p3+ (1-dec_med)*p2;\nrott = p3 * 3.1416/4;\n\npos = pos + q20/140;\nq28 = pos;\nq27 = index+1;\nq1 = cos(rott);\nq2 = sin(rott);\nq3 = -q2;\nq4 = q1;\n\ntrel = time/10;\nq5 = cos(trel);\nq6 = sin(trel);\nq7 = -q6;\nq8 = q5;\n\ntrig = q24 * (index%4);\nmox = bnot(trig)*mox + trig * (rand (100)/100-.5);\nmoy = bnot(trig)*moy + trig * (rand (100)/100-.5);\nq15 = mox/2;\nq16 = moy/2;\n\n//speed\nspeed = speed * bnot(trig) + trig * q26;\nmovz = movz + speed/fps;\nq9 = movz;\n\n\nq30 = (1.2 + sin(time/7))*3;\n\nzoom = 1;\nrot = -0.00;","pixel_eqs_eel":"","warp":" shader_body { \n  vec2 zz_1;\n  zz_1 = -(((\n    (uv - vec2(0.5, 0.5))\n   * aspect.xy) * (texsize.xy * 0.2)));\n  vec4 tmpvar_2;\n  tmpvar_2.w = 1.0;\n  tmpvar_2.xyz = ((texture (sampler_main, (uv + \n    ((clamp ((\n      sin(zz_1)\n     / \n      cos(zz_1)\n    ), vec2(-8.0, -8.0), vec2(8.0, 8.0)) * texsize.zw) * 4.0)\n  )).xyz + (0.02 * texture (sampler_noise_lq, \n    ((uv * 0.3) + (0.01 * rand_frame).xy)\n  )).xyz) - 0.015);\n  ret = tmpvar_2.xyz;\n }","comp":" shader_body { \n  vec2 uvm_1;\n  vec2 uv1_2;\n  vec2 p0_3;\n  p0_3.x = (q15 + 0.5);\n  p0_3.y = (q16 + 0.5);\n  mat2 tmpvar_4;\n  tmpvar_4[uint(0)] = _qb.xy;\n  tmpvar_4[1u] = _qb.zw;\n  uv1_2 = (((uv - p0_3) * aspect.xy) * tmpvar_4);\n  float tmpvar_5;\n  float tmpvar_6;\n  tmpvar_6 = (min (abs(\n    (uv1_2.y / uv1_2.x)\n  ), 1.0) / max (abs(\n    (uv1_2.y / uv1_2.x)\n  ), 1.0));\n  float tmpvar_7;\n  tmpvar_7 = (tmpvar_6 * tmpvar_6);\n  tmpvar_7 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_7) + 0.05368138) * tmpvar_7) - 0.1173503)\n     * tmpvar_7) + 0.1938925) * tmpvar_7) - 0.3326756)\n   * tmpvar_7) + 0.9999793) * tmpvar_6);\n  tmpvar_7 = (tmpvar_7 + (float(\n    (abs((uv1_2.y / uv1_2.x)) > 1.0)\n  ) * (\n    (tmpvar_7 * -2.0)\n   + 1.570796)));\n  tmpvar_5 = (tmpvar_7 * sign((uv1_2.y / uv1_2.x)));\n  if ((abs(uv1_2.x) > (1e-08 * abs(uv1_2.y)))) {\n    if ((uv1_2.x < 0.0)) {\n      if ((uv1_2.y >= 0.0)) {\n        tmpvar_5 += 3.141593;\n      } else {\n        tmpvar_5 = (tmpvar_5 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_5 = (sign(uv1_2.y) * 1.570796);\n  };\n  vec2 tmpvar_8;\n  tmpvar_8.x = (tmpvar_5 / 3.14);\n  tmpvar_8.y = (1.0/((abs(\n    (abs((abs(uv1_2.x) - abs(uv1_2.y))) * uv1_2.x)\n  ) * q30)));\n  uvm_1.y = ((tmpvar_8.y / 8.0) + q9);\n  uvm_1.x = tmpvar_8.x;\n  vec2 tmpvar_9;\n  tmpvar_9 = (64.0 * ((uv * mat2(0.6, -0.8, 0.8, 0.6)) + (time / 64.0)));\n  vec2 tmpvar_10;\n  tmpvar_10 = abs((fract(tmpvar_9) - 0.5));\n  vec3 tmpvar_11;\n  tmpvar_11 = clamp (((0.5 / \n    sqrt(dot (tmpvar_10, tmpvar_10))\n  ) * vec3((texture (sampler_pw_noise_lq, \n    (tmpvar_9 / 256.0)\n  ).y - 0.9))), 0.0, 1.0);\n  float tmpvar_12;\n  tmpvar_12 = clamp ((0.01 / sqrt(\n    dot (uv1_2, uv1_2)\n  )), 0.0, 1.0);\n  float tmpvar_13;\n  tmpvar_13 = clamp ((128.0 / (tmpvar_8.y * tmpvar_8.y)), 0.0, 1.0);\n  vec4 tmpvar_14;\n  tmpvar_14.w = 1.0;\n  tmpvar_14.xyz = (((\n    (texture (sampler_main, uvm_1).xyz * tmpvar_13)\n   + \n    (((texture (sampler_blur1, fract(uvm_1)).xyz * scale1) + bias1) * clamp ((2.0 / tmpvar_8.y), 0.0, 1.0))\n  ) + (vec3(0.0, 0.0, 0.2) * \n    clamp ((0.05 / (tmpvar_13 + 0.1)), 0.0, 1.0)\n  )) + clamp ((\n    ((tmpvar_11.x * tmpvar_11.x) + (tmpvar_12 * tmpvar_12))\n   - \n    (tmpvar_13 * 16.0)\n  ), 0.0, 1.0));\n  ret = tmpvar_14.xyz;\n }"}