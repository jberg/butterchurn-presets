{"version":1,"baseVals":{"rating":0,"decay":0.95,"echo_zoom":1,"echo_alpha":0.2,"echo_orient":3,"wave_a":0.001,"zoom":0.96,"warp":0.00052,"wave_r":0,"wave_g":0,"wave_b":0,"ob_a":1,"mv_x":64,"mv_y":4.8,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"textured":1,"x":0.25,"y":0.25,"rad":1.10444,"tex_zoom":0.22746,"g":1,"b":1,"r2":1,"b2":1,"border_r":0,"border_g":0,"border_a":0},"init_eqs_eel":"tex_saw = 0.4;","frame_eqs_eel":"ang = q1*0.2;\n//x = 0.5 + 0.2*sin(q2);\n//y = 0.5 + (0.3*sin(q2));\n\ntex_capture = 1;//above(q3,2);\ntex_zoom = q8;"},{"baseVals":{"enabled":1,"textured":1,"x":0.75,"y":0.75,"rad":0.99983,"tex_zoom":0.22746,"g":1,"b":1,"r2":1,"b2":1,"border_r":0,"border_g":0,"border_a":0},"init_eqs_eel":"tex_saw = 0.4;","frame_eqs_eel":"ang = q1*0.2;\n//x = 0.5 + 0.2*sin(q2);\n//y = 0.5 + (0.3*sin(q2));\n\ntex_capture = above(q3,2);\ntex_zoom = 0.6;"},{"baseVals":{"enabled":1,"textured":1,"x":0.4,"y":0.75,"rad":0.7418,"tex_zoom":0.22746,"g":1,"b":1,"r2":1,"b2":1,"border_r":0,"border_g":0,"border_a":0},"init_eqs_eel":"tex_saw = 0.4;","frame_eqs_eel":"ang = q1*0.2;\n//x = 0.5 + 0.2*sin(q2);\n//y = 0.5 + (0.3*sin(q2));\n\ntex_capture = above(q3,1);\ntex_zoom = 0.4;"},{"baseVals":{"enabled":1,"sides":100,"rad":0.98608,"r":0,"a":0,"g2":0,"a2":0.2,"border_a":0},"init_eqs_eel":"","frame_eqs_eel":"x = 0.5 +  0.4*sin(q1*0.45);\ny = 0.5 +  0.4*sin(q1*0.5);\n\nr2 = 0.5 + 0.5*sin(q1 *0.458);\ng2 = 0.5 + 0.5*sin(q1 *0.858);\nb2 = 0.5 + 0.5*sin(q1 *0.658);"}],"waves":[{"baseVals":{"usedots":1,"thick":1,"additive":1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"a":0.5,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"//init\nzs = if(below(zs,1),9,zs);\n\nzs = if(above(zs, 1300),1, zs);\n\nspeed = bass*0.002;\n\nxcoef = equal(q4,0)*2 + equal(q4,1)*2.1  + equal(q4,2)*2.2 + equal(q4,3)*2.3 + equal(q4,4)*2.4 + equal(q4,5)*2.5;\n\n//sum\nzs = zs + tan(q1*0.015)*speed;\n\n\ncount = count + 0.0001;\ncount = if(above(count,6.24),0,count);\n\n//project\nx = 0.1*cos(q1*zs*2 + 0.1);\ny = 0.1*sin(q1*zs*1 + 0.1);\n\n//rotate\nx = x*cos(-q1*3)*0.8 - y*sin(-q1*3)*0.8;\ny = x*sin(-q1*3) + y*cos(-q1*3);\n\n//move\nx = x + q6 + 0.5;\ny = y + q7 + 0.5;\n\nr = 0.5 + 0.5*sin(q1*1.2 + x + x);\ng = 0.5 + 0.5*sin(q1*1.5 + x + y);\nb = 0.5 + 0.5*sin(q1*1.36 + y + y);"},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"thick":1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"zoomy = 1;","frame_eqs_eel":"basstime = basstime + bass*0.03;\nq1 = basstime;\n\n//start in most active range\nbasstime = if(below(basstime,450),450,basstime);\nbasstime = if(above(basstime,495),450,basstime);\n\nbasstime = basstime + bass_att*0.03;\nvol = pow(bass+mid+treb,2);\nbasssum = vol;\n\nstickybit = time%2;\n\n//avg vol\n//buffer 1\nvolAvg = volAvg + vol*equal(stickybit,1);\n//number of samples 1 or framerate\nsample1 = sample1 + equal(stickybit,1);\n//buffer 2\nvolAvg2 = volAvg2 + vol*equal(stickybit,0);\n//number of samples 2\nsample2 = sample2 + equal(stickybit,0);\n\n//transision\nedge = bnot(equal(bit2,stickybit));\n\nvolAvg = volAvg - volAvg*edge*stickybit;\nvolAvg2 = volAvg2 - volAvg2*edge*equal(stickybit,0);\n\nsample1 = sample1  - sample1*edge*stickybit;\nsample2 = sample2  - sample2*edge*equal(stickybit,0);\n\n//test vol against avg buffer lvl\ndiff = if(equal(stickybit,1), (basssum/(volAvg2/sample2)) , 0);\ndiff = if(equal(stickybit,0), (basssum/(volAvg/sample1)), diff);\n\nq3 = diff;\n\nbit2 = time%2;\n\nstate = if(above(state,5),0,state);\nstate =  state + above(diff,3);\nq4 = state;\n\ndifftime = difftime + diff*0.03;\nq2 = difftime;\n\n//fix a strange error\ndifftime = if(above(difftime,2000),0, difftime);\n\n//toggle zoom in and out\nzoom_in = zoom_in + above(diff,4);\nzoom_in = if(above(zoom_in,2),0,zoom_in);\nq5 = zoom_in;\n\n\ntex_saw = tex_saw - 0.002*diff;\nflag = below(tex_saw,0.1);\ntex_saw = if(below(tex_saw,0.1),0.6,tex_saw);\nstate_echo = state_echo + flag;\n\nq8 = tex_saw;\nmonitor = tex_saw;\n\n\n//obtain lock while zooming out\nlock = if(equal(lock,0),bnot(equal(flag, prev_edge)),1);\n\n//gradient zoom out\nlock = if(equal(state_echo,0),0,lock);\nlock = if(equal(state_echo,1),0,lock);\nlock = if(equal(state_echo,2)*(below(zoomy,0.3505)),0,lock);\nlock = if(equal(state_echo,3)*(below(zoomy,0.205)),0,lock);\n\nzoomy = zoomy - zoomy*0.02*lock;\n\nzoomy = equal(state_echo,4)*1.05 + bnot(equal(state_echo,4))*zoomy;\necho_zoom = zoomy;\n\nmonitor  = tex_saw;\n\nstate_echo = if(above(state_echo,3),0,state_echo);\n//for edge detection\nprev_edge = flag;","pixel_eqs_eel":"zoom = 1 - equal(q5,0)*0.1*q3 + equal(q5,1)*0.1*q3;\n\nsaw_r = saw_r + 0.0001*bass;\nsaw_r =  if(above(saw_r,1),0,saw_r);\n\nsaw_g = saw_g + 0.00012*bass;\nsaw_g =  if(above(saw_g,1),0,saw_g);\n\nsaw_b = saw_b + 0.00011*bass;\nsaw_b =  if(above(saw_b,1),0,saw_b);\n\n\ndecay_r = 5 - x*y*saw_r;\ndecay_g = 5 - y*x*saw_g;\ndecay_b = 5 - x*y*saw_b;\n\nrot = 0;\nzoom = 1;","warp":"","comp":""}