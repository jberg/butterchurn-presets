{"version":2,"baseVals":{"rating":3,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_brighten":0,"darken":1,"wave_a":0.002,"wave_scale":0.14,"wave_smoothing":0,"wave_mystery":-0.84,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_g":0,"wave_b":0.6,"ob_size":0.015,"ob_b":1,"ib_size":0.26,"mv_x":64,"mv_y":48,"mv_l":0,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"enabled":1,"sides":23,"textured":1,"rad":0.72143,"tex_ang":0.62832,"tex_zoom":0.0402,"g":1,"b":1,"a":0.9,"r2":0.9,"b2":1,"a2":0.3,"border_a":0},"init_eqs_eel":"","frame_eqs_eel":"vis = bnot(q27%8)*q22/2;\nvis = min(vis,1);\na = vis/2; a2 = vis/2;\n//tex_ang = 3*(1-vis);\n\ntex_zoom = 1;\nrad = vis*.3; "},{"baseVals":{"sides":5,"textured":1,"rad":4.77803,"tex_zoom":1.78051,"g":1,"b":1,"r2":1,"b2":1,"a2":1,"border_g":0.99,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"ang =sin(time/65) ;\nrad = q24/8;"},{"baseVals":{"enabled":1,"sides":5,"additive":1,"num_inst":4,"x":0.9,"rad":0.24732,"tex_zoom":0.40839,"g":0.6,"a":0.4,"g2":0,"b2":0.6,"border_a":0},"init_eqs_eel":"","frame_eqs_eel":"steps = q28+1;\nsteps = 4;\nampl = .2; //.2 bis .5 praktisch\n\nx = .5 + ampl*cos((q27/steps+instance/4)*6.28);\ny = .5 + ampl*sin((q27/steps+instance/4)*6.28);\n\na = .4; a2 = .0;\n\n\ntrig = q24 * bnot(q27%4);\nred = bnot(trig)*red+ (rand(100)/100)*trig;\ngreen = bnot(trig)*green+ (rand(100)/100)*trig;\nblue = bnot(trig)*blue+ (rand(100)/100)*trig;\n\nk1 = instance / num_inst;\n\nr = red *k1;\ng = green * (1-k1);\nb = blue * 4*k1*(1-k1);\n\nr = red;\ng = green;\nb = blue;\n\n\n\nr2 = r; b2 = b; g2 = g;"},{"baseVals":{"sides":36,"additive":1,"rad":0.01,"r":0,"g":0.12,"g2":0,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"spectrum":1,"usedots":1,"additive":1,"scaling":0.5033,"r":0.5,"g":0.1,"a":0.1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"x = .5 + .5*sample*sin(sample*50);\ny = .5 + .5*sample*cos(sample*50);\n\ntrel = time;\n\nx = .5 + .5*sample*sin(time); \ny = .5 + .5*sample*cos(time); \n\nx = rand(100)/100;\ny = rand(100)/100;\n\na=.2;"},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"speed_=1;vx = 0; vy = 0; vz = 0;\ntrel = 0; p1 = 0; dir = 0;\nang0 = 0;","frame_eqs_eel":"dec_med = pow (0.9, 30/fps);\ndec_slow = pow (0.96, 30/fps);\nbeat = max (max (bass, mid), treb); \navg = avg*dec_slow + beat*(1-dec_slow);\nis_beat = above(beat, .2+avg+peak) * above (time, t0+.5);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\nindex = (index + is_beat) %16;\nindex2 = (index2 + is_beat*bnot(index))%8;\n\nq20 = avg;\nq21 = beat;\nq22 = peak;\nq24 = is_beat;\nvol = bass_att + mid_att + treb_att;\nvol_ = dec_med * vol_ + (1-dec_med)* vol;\nvol__ = dec_med * vol__ + (1-dec_med)* vol_;\nq27 = index + 1;\nq28 = index2 + 1;\n\nk1 =  is_beat*equal(index%4,0);\np1 =  k1*(p1+1) + (1-k1)*p1;\np2 = dec_med * p2+ (1-dec_med)*p1;\nrott = p2 * 3.1416/4;\n\nq1 = cos(rott);\nq2 = sin(rott);\nq3 = -q2;\nq4 = q1;\n\ntrig = q24 * bnot(index%8);\nvx = vx*bnot(trig) + trig* (rand(100)/100-.5);\nvy = vy*bnot(trig) + trig* (rand(100)/100-.5);\nvz = vz*bnot(trig) + trig* (rand(100)/100-.5);\n\nq10 = 0.2+vy*vy*4;\nq11 = cos(time/9)*.5+.3;\n\nspeed = min(vol_-vol__+.5,1);\nspeed = max(speed,-.5);\nspeed_ = bnot(trig)*speed_ + trig*speed;\nmovz = movz + 1/fps*speed_;\nq9 = movz;\n\nq12 = min(q22,6)*2;\n//q13 = 1.5+sin(time/5);\ntrig = bnot(index%4) * q24;\ndir = bnot(trig)*dir + trig*(rand(10)-5);\n\ntrel = trel + .2/fps*dir;\n\nq5 = cos(trel);\nq6 = sin(trel+0*q27*(q28%2));\nq7 = -q6;\nq8 = q5;\n\npx = px * dec_med + (1-dec_med)*vx;\npy = py * dec_med + (1-dec_med)*vy;\nq15 = px/3;\nq16 = py/3;\n\nq13 = min(2,1+abs(8*px*py));\n\nang0 = ang0*dec_med + vz*(1-dec_med);\nq17 = ang0*2; \n\nzoom = 1.1;\nrot = .2*sin(bnot(q28%2)*q28) ;\ndx = .00;\n\nmonitor = q11;","pixel_eqs_eel":"","warp":" shader_body { \n  vec2 uv6_1;\n  vec2 uv1_2;\n  vec2 tmpvar_3;\n  tmpvar_3 = (uv - 0.5);\n  float x_4;\n  x_4 = (abs(tmpvar_3.x) - abs(tmpvar_3.y));\n  float tmpvar_5;\n  tmpvar_5 = (18.0 * sqrt((x_4 * x_4)));\n  uv1_2 = (tmpvar_3 - (clamp (\n    ((sin(tmpvar_5) / cos(tmpvar_5)) * normalize(tmpvar_3))\n  , vec2(-3.0, -3.0), vec2(3.0, 3.0)) / 60.0));\n  uv6_1 = (0.4 * cos((\n    (uv1_2 * 4.0)\n   * q28)));\n  vec4 tmpvar_6;\n  tmpvar_6.w = 1.0;\n  tmpvar_6.xyz = (((texture (sampler_main, \n    ((uv1_2 * (q11 + (q10 * tmpvar_5))) + 0.5)\n  ).xyz + \n    (vec3((0.006 / sqrt(dot (uv6_1, uv6_1)))) * (1.0 + roam_cos).xyz)\n  ) * 0.99) - 0.025);\n  ret = tmpvar_6.xyz;\n }","comp":"float xlat_mutableang2;\nvec2 xlat_mutablers0;\nvec2 xlat_mutableuv2;\n shader_body { \n  vec2 uv_1;\n  vec3 ret1_3;\n  uv_1 = ((uv - 0.5) * aspect.xy);\n  vec2 tmpvar_4;\n  tmpvar_4.x = q15;\n  tmpvar_4.y = q16;\n  uv_1 = (uv_1 + tmpvar_4);\n  mat2 tmpvar_5;\n  tmpvar_5[uint(0)] = _qb.xy;\n  tmpvar_5[1u] = _qb.zw;\n  uv_1 = (uv_1 * tmpvar_5);\n  float tmpvar_6;\n  float tmpvar_7;\n  tmpvar_7 = (min (abs(\n    (uv_1.y / uv_1.x)\n  ), 1.0) / max (abs(\n    (uv_1.y / uv_1.x)\n  ), 1.0));\n  float tmpvar_8;\n  tmpvar_8 = (tmpvar_7 * tmpvar_7);\n  tmpvar_8 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_8) + 0.05368138) * tmpvar_8) - 0.1173503)\n     * tmpvar_8) + 0.1938925) * tmpvar_8) - 0.3326756)\n   * tmpvar_8) + 0.9999793) * tmpvar_7);\n  tmpvar_8 = (tmpvar_8 + (float(\n    (abs((uv_1.y / uv_1.x)) > 1.0)\n  ) * (\n    (tmpvar_8 * -2.0)\n   + 1.570796)));\n  tmpvar_6 = (tmpvar_8 * sign((uv_1.y / uv_1.x)));\n  if ((abs(uv_1.x) > (1e-08 * abs(uv_1.y)))) {\n    if ((uv_1.x < 0.0)) {\n      if ((uv_1.y >= 0.0)) {\n        tmpvar_6 += 3.141593;\n      } else {\n        tmpvar_6 = (tmpvar_6 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_6 = (sign(uv_1.y) * 1.570796);\n  };\n  xlat_mutablers0.x = ((tmpvar_6 / 3.1416) * 2.0);\n  xlat_mutablers0.y = (0.03 / sqrt(dot (uv_1, uv_1)));\n  ret1_3 = vec3(0.0, 0.0, 0.0);\n  for (int n_2 = 0; n_2 <= 10; n_2++) {\n    float tmpvar_9;\n    tmpvar_9 = fract((-(q9) + (\n      float(n_2)\n     / 10.0)));\n    xlat_mutableang2 = (((q1 * 3.14) * float(n_2)) / 10.0);\n    float tmpvar_10;\n    tmpvar_10 = cos(xlat_mutableang2);\n    float tmpvar_11;\n    tmpvar_11 = sin(xlat_mutableang2);\n    mat2 tmpvar_12;\n    tmpvar_12[uint(0)].x = tmpvar_10;\n    tmpvar_12[uint(0)].y = -(tmpvar_11);\n    tmpvar_12[1u].x = tmpvar_11;\n    tmpvar_12[1u].y = tmpvar_10;\n    xlat_mutableuv2 = (uv_1 * ((q13 * tmpvar_9) * tmpvar_12));\n    ret1_3 = max (ret1_3, (texture (sampler_main, (xlat_mutableuv2 + 0.5)).xyz * (1.0 - tmpvar_9)));\n  };\n  vec4 tmpvar_13;\n  tmpvar_13.w = 1.0;\n  tmpvar_13.xyz = ((ret1_3 * 2.0) + ((\n    (bass_att * xlat_mutablers0.y)\n   * texture (sampler_main, \n    ((uv_1 * q12) + vec2(0.5, 0.0))\n  ).yzx) * clamp (\n    (1.0 - (ret1_3 * 32.0))\n  , 0.0, 1.0)));\n  ret = tmpvar_13.xyz;\n }"}