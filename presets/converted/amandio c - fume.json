{"version":2,"baseVals":{"rating":1,"gammaadj":1,"decay":0.925,"echo_zoom":1.007,"echo_orient":3,"wave_mode":7,"additivewave":1,"wave_brighten":0,"wrap":0,"wave_a":0.001,"wave_scale":1.286,"wave_smoothing":0.63,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpscale":1.331,"zoom":1.0003,"warp":0.01,"sy":1.1046,"ob_size":0,"ob_r":1,"ob_g":0.05,"ob_b":0.1,"ob_a":1,"ib_size":0.26,"mv_x":64,"mv_y":1.248,"mv_l":5,"mv_b":0,"mv_a":0,"b1x":0.5},"shapes":[{"baseVals":{"sides":54,"textured":1,"rad":0.5427,"tex_ang":2.51327,"tex_zoom":1.3476,"g":1,"b":1,"r2":1,"b2":1,"a2":1,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":34,"textured":1,"rad":0.27048,"tex_zoom":3.30038,"g":1,"b":1,"r2":1,"b2":1,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":34,"rad":0.24486,"g":1,"b":1,"r2":1,"b2":1,"a2":1,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"","frame_eqs_eel":"q1=25*sin(.06*time);\nq2=25*sin(.04*time);","pixel_eqs_eel":"","warp":"float xlat_mutabled;\n shader_body { \n  float y1_1;\n  float x1_2;\n  float y0_3;\n  float x0_4;\n  vec3 ret_5;\n  float tmpvar_6;\n  tmpvar_6 = (5.0 * uv.x);\n  x0_4 = tmpvar_6;\n  float tmpvar_7;\n  tmpvar_7 = (5.0 * uv.y);\n  y0_3 = tmpvar_7;\n  x1_2 = tmpvar_6;\n  y1_1 = tmpvar_7;\n  xlat_mutabled = sqrt(((tmpvar_6 * tmpvar_6) + (tmpvar_7 * tmpvar_7)));\n  xlat_mutablen = 0;\n  while (true) {\n    if (!(((xlat_mutablen < 6) && (\n      float(xlat_mutablen)\n     < \n      (10.0 * xlat_mutabled)\n    )))) {\n      break;\n    };\n    x1_2 = (x1_2 + ((\n      sin((y1_1 + q2))\n     + x0_4) - q1));\n    y1_1 = (y1_1 + ((\n      cos((x1_2 + q1))\n     + y0_3) - q2));\n    xlat_mutabled = (0.1 * sqrt((\n      (x1_2 * x1_2)\n     + \n      (y1_1 * y1_1)\n    )));\n    xlat_mutabled = (xlat_mutabled - float(int(xlat_mutabled)));\n    xlat_mutablen++;\n  };\n  ret_5.x = xlat_mutabled;\n  ret_5.y = sqrt(xlat_mutabled);\n  ret_5.z = (xlat_mutabled * 3.0);\n  vec4 tmpvar_8;\n  tmpvar_8.w = 1.0;\n  tmpvar_8.xyz = ret_5;\n  ret = tmpvar_8.xyz;\n }","comp":" shader_body { \n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  tmpvar_1.xyz = texture (sampler_main, uv).xyz;\n  ret = tmpvar_1.xyz;\n }"}