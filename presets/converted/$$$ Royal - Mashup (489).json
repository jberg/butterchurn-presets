{"version":2,"baseVals":{"rating":1,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"additivewave":1,"wave_dots":1,"wave_thick":1,"wave_brighten":0,"darken":1,"wave_a":0.001,"wave_scale":0.527,"wave_smoothing":0,"wave_mystery":0.6,"modwavealphastart":0,"modwavealphaend":1.32,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_g":0.49,"ob_a":1,"ib_size":0.26,"mv_x":64,"mv_y":48,"mv_l":1.85,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0,"b2x":0.6,"b3x":0.4,"b1ed":0},"shapes":[{"baseVals":{"sides":8,"additive":1,"num_inst":256,"rad":0.03632,"tex_ang":1.00531,"tex_zoom":1.53117,"g":1,"b":1,"a":0,"g2":0,"border_r":0,"border_g":0,"border_b":0,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":1,"sides":5,"additive":1,"num_inst":256,"x":0.26,"y":0.2,"rad":0.39317,"tex_zoom":0.9355,"g2":0,"a2":0.2,"border_g":0,"border_b":0,"border_a":0},"init_eqs_eel":"","frame_eqs_eel":"n = (instance);\nFLen = reg00;\nSLen = reg00/2;\n\nz0 = 10;\ny0 = gmegabuf(2000+n+FLen)/z0;\nx0 = gmegabuf(2000+n)/z0;\n\na0 = (gmegabuf(n+10000));\n\nk1 = instance/num_inst-.5;\nx = .5 + x0 + sin(k1*8*sin(q12*.07)) * sin(q11*.13)*q3*.7; \ny = .5 + q32*(y0 + sin(k1*8*sin(q14*.1)) * sin(q13*.2)*q3*.7); \n\narg = q2/8;\nhigh = exp(-500*pow(arg+.5-instance/num_inst,2));\nhigh += exp(-500*pow(-arg+.5-instance/num_inst,2));\n\nexc = sqrt((pow(x-.5,2)+pow(y-.5,2)));\nrad0 = above(z0,0)*min (.1, a0/60)+.005;\nrad0 = rad0 * (1+2*exc) * (1+high);\n\np1 = .5 + sin(q12)/2;\np2 = .5 + sin(q13*1.4)/2;\n//p1 = rand(1)-.5;\n//p2 = rand(1)-.5;\nexc = ((pow(x-p1,2)+pow(y-p2,2)));\nrad = min(rad0 * (1 + .004*q3/abs(exc)),1) ;\n\na = min(a0*8+.4,1);\n\nk1 = instance/num_inst*5 + high;\nw = 1-exp(-treb_att/2-.5);\ng = w + (1-w)*sin(k1);\nr = w + (1-w)*sin(k1-6.28/3);\nb = w + (1-w)*sin(k1-6.28*2/3);\n\na2 = a/4;\ng2 = g*0; b2 = b*0; r2 = r*0;"},{"baseVals":{"sides":13,"additive":1,"num_inst":5,"x":0.65,"y":0.38,"rad":0.57049,"tex_zoom":0.73678,"a":0.7,"g2":0,"border_r":0.5,"border_g":0.5,"border_b":0,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"k1 = instance/num_inst;\nx = .5 + .3*sin(instance*k1*413);\ny = .5 + .3 * sin(instance*k1*113);\n\nrad = .1 + .4*sin(k1*333);\n\nr =  .5*sin(k1*234);\nb =  .5*sin(k1*534);\ng =  .5*sin(k1*34);"},{"baseVals":{"sides":14,"additive":1,"thickoutline":1,"textured":1,"x":0.6,"y":0.55,"rad":0.97237,"ang":1.25664,"tex_zoom":0.34933,"g":0.6,"g2":0,"b2":1,"border_r":0.2,"border_g":0.7,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"sep":120,"spectrum":1,"additive":1,"scaling":7.52386,"smoothing":0,"r":0,"a":0.7},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"FLen = reg00;\n\nn = int(sample*FLen);\nvol = (value1+value2) * (1+ .1 / (sample+.03));\n\nchg = min(max(vol- gmegabuf(n),-1),1);\ndec = if (chg>0, 1-chg*0.3, 1+chg*0.2);\n\nchg = q1 -q2;\ndec = .94 - abs(chg) * if (chg> 0, .2,.1);\n\ndec = min(max(dec,0),1);\ngmegabuf(n) = gmegabuf(n)*dec + vol*(1-dec);\n\ndec = q2/4;\n//dec = .90;\ndec = max(min(dec,1),.1);\n\ngmegabuf(n) = gmegabuf(n)*dec + gmegabuf(n+(q2<.8))*(1-dec);\ngmegabuf(n+10000) = gmegabuf(n+10000)*.2 + .8* vol/3;\na = .0;\nx = sample;\ny = .2 + gmegabuf(n+0)*.23;"},{"baseVals":{"samples":256,"usedots":1,"scaling":0.89152,"smoothing":0.82,"a":0.9,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"samples":32,"thick":1,"scaling":0.89152,"smoothing":0.82,"r":0,"g":0.2,"b":0.6,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"usedots":1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"n = 0;\nloop (50000,\ngmegabuf(n) = 0;\nmegabuf(n) = 0;\nn = n+1;\n);\n\nsw1 = rand(8);\nsw2 = rand(8);\nsw3 = rand(8);\nsw4 = rand(8);","frame_eqs_eel":"flen = 512; //Wave Punkte\nreg00 = FLen;\nSLen = FLen/2;\ndec_m = pow(.94, 30/fps);\n\n//Volume\nn = 0; vol = 0;\nloop (SLen,\n  vol = vol + pow(gmegabuf(n),2)/FLen;  \n  n = n+1;\n);\nvol = sqrt(vol)/2;\nvol_ = vol_*dec_m + (1-dec_m)* (vol);\n\n//switches\nlev1 = lev1 * dec_m + (1-dec_m) * gmegabuf(1);\nlev2 = lev2 * dec_m + (1-dec_m) * gmegabuf(20);\nlev3 = lev3 * dec_m + (1-dec_m) * gmegabuf(50);\nlev4 = lev4 * dec_m + (1-dec_m) * gmegabuf(100);\nsw1 = sw1 + (lev1-gmegabuf(1)>0)/fps;\nsw2 = sw2 + (lev2-gmegabuf(20)>0)/fps;\nsw3 = sw3 + (lev3-gmegabuf(50)>0)/fps;\nsw4 = sw4 + (lev4-gmegabuf(100)>0)/fps;\n\ndif = (1+sin(sw3/4))*16+2;\nofs = sin(sw2/3)*8;\nn = 0; k1 = frame*0; \nloop (SLen,\n      m1 = (n)%SLen;\n      m2 = (n+ofs)%SLen;\n\n      k = (m1+dif)%SLen;\n      i = (SLen+m2-dif)%SLen;\n\n      in1 = (gmegabuf(m1)-gmegabuf(k))/pow(vol_+.03,.8)*1.2;\n      in2 = (gmegabuf(m2)-gmegabuf(i))/pow(vol_+.03,.8)*1.2;\n\n      dec = if (pow(gmegabuf(2000+n),2) + pow(gmegabuf(2000+FLen+n),2)> in1*in1+in2*in2,.8,.94) ;\n      dec = pow (dec, 30/fps); \n\n      gmegabuf(2000+n) =       gmegabuf(2000+n)*dec      +(1-dec)* in1;\n      gmegabuf(2000+FLen+n) =  gmegabuf(2000+FLen+n)*dec +(1-dec)* in2;\n      n=n+1;\n);\n\nq1 = (bass+treb+mid)/3;\nq2 = (bass_att+treb_att+mid_att)/3;\nq3 = vol_;\nq11 = sw1;\nq12 = sw2;\nq13 = sw3;\nq14 = sw4;\n\nrot = 0; zoom = .98; warp = .3; rot = 0;\n\nq32 = aspecty;\nmonitor = dif;","pixel_eqs_eel":"","warp":" shader_body { \n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  tmpvar_1.xyz = ((texture (sampler_main, uv).xyz * clamp (\n    (q1 - 0.8)\n  , 0.0, 1.0)) * 0.92);\n  ret = tmpvar_1.xyz;\n }","comp":" shader_body { \n  vec3 ret_1;\n  vec3 tmpvar_2;\n  tmpvar_2.xy = uv;\n  tmpvar_2.z = q2;\n  vec2 tmpvar_3;\n  vec2 tmpvar_4;\n  tmpvar_4 = (uv - 0.5);\n  tmpvar_3 = ((tmpvar_4 * vec2(-1.0, 1.0)) + 0.5);\n  ret_1 = (((\n    (mix (texture (sampler_main, ((tmpvar_4 * 0.98) + 0.5)).xyz, texture (sampler_main, ((\n      (tmpvar_3 - 0.5)\n     * 0.98) + 0.5)).xyz, vec3(0.5, 0.5, 0.5)) + ((texture (sampler_blur3, uv).xyz * scale3) + bias3))\n   + \n    ((texture (sampler_blur3, tmpvar_3).xyz * scale3) + bias3)\n  ) + (\n    (texture (sampler_blur1, uv).xyz * scale1)\n   + bias1)) + ((texture (sampler_blur1, tmpvar_3).xyz * scale1) + bias1));\n  ret_1 = (ret_1 * texture (sampler_noisevol_hq, (tmpvar_2 - (roam_sin.zyx * roam_cos.ywx))).xyz);\n  ret_1 = (ret_1 * 2.0);\n  vec4 tmpvar_5;\n  tmpvar_5.w = 1.0;\n  tmpvar_5.xyz = ret_1;\n  ret = tmpvar_5.xyz;\n }"}