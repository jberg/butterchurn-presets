{"version":2,"baseVals":{"rating":4,"gammaadj":1.32,"decay":1,"echo_zoom":1.22,"echo_alpha":0.15,"wave_mode":5,"darken":1,"wave_a":0.691,"wave_scale":4.778,"wave_smoothing":0,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpscale":1.331,"fshader":1,"zoom":0.99951,"warp":0.0101,"wave_r":0.65,"wave_g":0.65,"wave_b":0.65,"ob_size":0.015,"ob_a":0.1,"ib_size":0,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"textured":1,"y":1.8},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":1,"textured":1,"y":1.8},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":1,"textured":1,"y":1.8},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"","frame_eqs_eel":"wave_r = wave_r + 0.5*sin(time*1.13);\nwave_g = wave_g + 0.5*sin(time*1.23);\nwave_b = wave_b + 0.5*sin(time*1.33);\n\nwave_x = wave_x + 0.2*sin(0.32*time);\nwave_y = wave_y + 0.2*cos(0.32*time);\n\nob_r = wave_r;\nob_g = wave_g;\nob_b = wave_b;\n\n\n//lines below belong to the composite shader (flexis kaleidoscope)\n\n//flexi's beat detection (made for breakbeats)\nvol = bass*8 + mid*5 + treb*3;\nm = m*0.97 + vol*0.08;\nmonitor = vol;\nbeat = above(vol,res)*above(vol,m)*above(vol,16);\ndiff = (1-beat)*diff + beat*(vol-res);\nres = beat*(vol + m*0.04) + (1-beat)*(res -  (0.1+diff*0.02)*60/fps);\nres = max(0,res);\n\nw = if(beat, rand(4096)/1024*asin(1),w); // on beat: randomize pos and angle of the kaleidoscope\nxx = if(beat, 0.1 + rand(800)/1000, xx);\nyy = if(beat, 0.1 + rand(800)/1000, yy);\n\n//geiss' custom beat detection code: (fps-independent; quiet songs don't freak out)\ndecay_rate = pow(0.995, fps);  // lower # = more hasty to declare a beat\nmin_att    = 2.2;               // lower # = quieter songs can declare beats\ndecay_to   = 1;               // lower # = more hasty to declare a beat\nbeat =           bass/max(min_att,bass_att);\nbeat = max(beat, mid /max(min_att,mid_att ));\nbeat = max(beat, treb/max(min_att,treb_att));\nbeat = max( beat, (prev_beat-decay_to)*decay_rate + decay_to );\nbeat_level     = (beat - prev_beat - 0.07)*24;\nis_beat = above(beat_level, 0.5);\nprev_beat = beat;\n\nw  = if(is_beat, w + (rand(256)-128)/1024, w);  // on beat: random increment of pos and angle\nxx = if(is_beat, xx + (rand(256)-128)/4096, xx);\nyy = if(is_beat, yy + (rand(256)-128)/4096, yy);\n\n\nq11 = sin(w); // w - angle of kaleidoscope\nq12 = cos(w);\nq13 = xx;     // center of kaleidoscope window\nq14 = yy;\nq17 = sin(-w);\nq18 = cos(-w);","pixel_eqs_eel":"rx=ang;//+sin(x*7);\nry=rad;//+sin(x*5);\n\nrot=sin(int(1+ry*2.864)*(8446669+sin(time/21774898+treb/55559599)*667777))/2+.5;\nzoom=sin(int(1+rx*2.654)*(4747833+sin(time/26666825+mid/59555599)*754166))/2+.5;\n//zoom=.999;\nrot=sin(rot*rot*rad*88)/399;\nzoom=1-sin(sqr(zoom)*ang*88)/356-.004141*(1-rad);\ndx=dx;\ndy=dy;","warp":"","comp":" shader_body { \n  vec2 uv_rr_1;\n  vec2 uv_r_2;\n  vec2 tmpvar_3;\n  tmpvar_3.x = q13;\n  tmpvar_3.y = q14;\n  vec2 tmpvar_4;\n  tmpvar_4 = ((uv - tmpvar_3) * aspect.xy);\n  vec2 tmpvar_5;\n  tmpvar_5.x = ((q12 * tmpvar_4.x) - (q11 * tmpvar_4.y));\n  tmpvar_5.y = ((q11 * tmpvar_4.x) + (q12 * tmpvar_4.y));\n  uv_r_2 = (4.0 * tmpvar_5);\n  uv_r_2 = (tmpvar_3 + (uv_r_2 * aspect.zw));\n  uv_r_2 = (1.0 - abs((\n    (fract((uv_r_2 * 0.5)) * 2.0)\n   - 1.0)));\n  vec2 tmpvar_6;\n  tmpvar_6 = ((uv_r_2 - tmpvar_3) * aspect.xy);\n  vec2 tmpvar_7;\n  tmpvar_7.x = ((q18 * tmpvar_6.x) - (q17 * tmpvar_6.y));\n  tmpvar_7.y = ((q17 * tmpvar_6.x) + (q18 * tmpvar_6.y));\n  uv_rr_1 = (4.0 * tmpvar_7);\n  uv_rr_1 = (tmpvar_3 + ((\n    (uv_rr_1 - tmpvar_3)\n   * aspect.zw) * 0.06));\n  uv_rr_1 = (1.0 - abs((\n    (fract((uv_rr_1 * 0.5)) * 2.0)\n   - 1.0)));\n  vec4 tmpvar_8;\n  tmpvar_8.w = 1.0;\n  tmpvar_8.xyz = pow (((\n    abs((((texture (sampler_blur3, uv_rr_1).xyz * scale3) + bias3) - texture (sampler_main, uv_rr_1).xyz))\n   * 3.0) + 0.1), vec3(1.5, 1.5, 1.5));\n  ret = tmpvar_8.xyz;\n }"}