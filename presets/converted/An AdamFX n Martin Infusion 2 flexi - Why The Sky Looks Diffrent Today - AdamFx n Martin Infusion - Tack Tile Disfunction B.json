{"version":2,"baseVals":{"rating":4,"gammaadj":1,"decay":1,"echo_zoom":1,"echo_alpha":0.5,"additivewave":1,"modwavealphabyvolume":1,"wave_a":0.009,"wave_scale":2.713,"wave_smoothing":0,"modwavealphastart":1.2,"modwavealphaend":1.2,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0.44,"wave_g":0.4,"ob_size":0.015,"ob_b":1,"ib_size":0.26,"mv_x":64,"mv_y":48,"mv_l":0.85,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"enabled":1,"sides":3,"additive":1,"num_inst":175,"rad":0.20065,"ang":0.75398,"tex_ang":3.14159,"tex_zoom":0.99979,"r":0,"g2":0,"border_r":0.01,"border_g":0,"border_a":1},"init_eqs_str":"a.my_z=0;a.d=0;a.y3=0;a.z2=0;a.y1=0;a.w=0;a.q12=0;a.w2=0;a.x1=0;a.q13=0;a.q15=0;a.dy1=0;a.zoom=0;a.p=0;a.q5=0;a.dz1=0;a.z3=0;a.w3=0;a.my_x=0;a.x3=0;a.my_y=0;a.q11=0;a.dd=0;a.q4=0;a.yy1=0;a.q16=0;a.w1=0;a.x2=0;a.q17=0;a.l=0;a.y2=0;a.dx1=0;a.zz1=0;a.q14=0;a.z1=0;a.q3=0;a.q32=0;a.xx1=0;","frame_eqs_str":"a.xx1=.00001<Math.abs(equal(a.instance,0))?a.q11:a.xx1;a.yy1=.00001<Math.abs(equal(a.instance,0))?a.q12:a.yy1;a.zz1=.00001<Math.abs(equal(a.instance,0))?a.q13:a.zz1;a.dx1=a.q14*(a.yy1-a.xx1);a.dy1=a.xx1*(a.q15-a.zz1)-a.yy1;a.dz1=a.xx1*a.yy1-a.q16*a.zz1;a.dd=sqrt(a.dx1*a.dx1+a.dy1*a.dy1+a.dz1*a.dz1);a.xx1+=div(a.q17*a.dx1,a.dd);a.yy1+=div(a.q17*a.dy1,a.dd);a.zz1+=div(a.q17*a.dz1,a.dd);a.my_x=.1*a.xx1;a.my_y=.1*a.yy1;a.my_z=.1*a.zz1-3;a.d=4.75;a.zoom=.55+.25*Math.sin(.5*a.q32);\na.w1=a.q3;a.w2=a.q4;a.w3=a.q5;a.x1=Math.cos(a.w1)*a.my_x+Math.sin(a.w1)*a.my_y;a.y1=-Math.sin(a.w1)*a.my_x+Math.cos(a.w1)*a.my_y;a.z1=a.my_z;a.x2=Math.cos(a.w2)*a.x1+Math.sin(a.w2)*a.z1;a.z2=-Math.sin(a.w2)*a.x1+Math.cos(a.w2)*a.z1;a.y2=a.y1;a.y3=Math.cos(a.w3)*a.y2+Math.sin(a.w3)*a.z2;a.z3=-Math.sin(a.w3)*a.y2+Math.cos(a.w3)*a.z2;a.x3=a.x2;a.l=sqrt(a.x3*a.x3+a.y3*a.y3);a.w=Math.atan2(a.x3,a.y3);a.p=Math.tan(Math.asin(1)+Math.atan2(a.d+a.z3,a.l));a.d=sqrt(a.x3*a.x3+a.y3*a.y3+(a.z3+a.d)*(a.z3+a.d));\na.my_x=a.zoom*Math.sin(a.w)*a.p;a.my_y=a.zoom*Math.cos(a.w)*a.p;a.x=.5+a.my_x;a.y=.5+a.my_y;a.rad=div(a.rad,a.d);a.ang-=div(a.instance,a.num_inst)*Math.asin(1)*8;","init_eqs_eel":"","frame_eqs_eel":"//lorenz-attractor calc\nxx1 = if(equal(instance,0),q11,xx1);\nyy1 = if(equal(instance,0),q12,yy1);\nzz1 = if(equal(instance,0),q13,zz1);\n\ndx1 = q14*(yy1-xx1);\ndy1 = xx1*(q15-zz1)-yy1;\ndz1 = xx1*yy1-q16*zz1;\ndd = sqrt(dx1*dx1+dy1*dy1+dz1*dz1);\nxx1 = xx1 + q17*dx1/dd;\nyy1 = yy1 + q17*dy1/dd;\nzz1 = zz1 + q17*dz1/dd;\n\n\n// 3D object model coordinates\nmy_x = xx1*0.1;\nmy_y = yy1*0.1;\nmy_z = zz1*0.1 - 3;\n\n\nd = 4.75; // camera distance\nzoom = .55+0.25*sin(.5*q32);\n\n// solid angles\nw1 = q3;\nw2 = q4;\nw3 = q5;\n\n// 3D rotation\nx1 = cos(w1)*my_x + sin(w1)*my_y;\ny1 = -sin(w1)*my_x + cos(w1)*my_y;\nz1 = my_z;\n\nx2 = cos(w2)*x1 + sin(w2)*z1;\nz2 = -sin(w2)*x1 + cos(w2)*z1;\ny2 = y1;\n\ny3 = cos(w3)*y2 + sin(w3)*z2;\nz3 = -sin(w3)*y2 + cos(w3)*z2;\nx3 = x2;\n\n// perspective calculation\n\nl = sqrt(x3*x3 + y3*y3);\nw = atan2(x3,y3);\np = tan(asin(1) + atan2(d+z3,l));\nd = sqrt(x3*x3 + y3*y3 + (z3+d)*(z3+d));\n\nmy_x = zoom*sin(w)*p;\nmy_y = zoom*cos(w)*p;\n\nx = 0.5 + my_x;\ny = 0.5 + my_y;\n\nrad = rad/d;\nang = ang-instance/num_inst*asin(1)*8;"},{"baseVals":{"sides":12,"additive":1,"num_inst":512,"y":0.55,"rad":0.0986,"tex_zoom":0.7874,"r":0.2,"g":0.03,"b":0.55,"g2":0,"border_a":0,"enabled":0},"init_eqs_str":"started = 0;\nt1 = 0.412; //seeds for pseudo random generator\nt2 = 0.4563;\nt3 = 0.6452;\nt4 = 0.2565;","frame_eqs_str":"rnd1 = if(equal(instance,0),t1,rnd1);\nrnd2 = if(equal(instance,0),t2,rnd2);\nrnd3 = if(equal(instance,0),t3,rnd3);\nrnd4 = if(equal(instance,0),t4,rnd4);\nrnd1 = 4*rnd1*(1-rnd1);\nrnd2 = 4*rnd2*(1-rnd2);\nrnd3 = 4*rnd3*(1-rnd3);\nrnd4 = 4*rnd4*(1-rnd4);\nt = .6;\nt =  (rnd1+time*t) - int(rnd1+time*t);\nt = t + rnd2*0.1;\nwh = rnd4*asin(1)*4;\nwv = 0.25 + rnd3*0.1;\n\nd = 6; // makes the perspective impact\nzoom = 1;\nl = 1;\n\n// Kardan angles\n\nw1 = q3; // first rotation: clockwise in the desktop pane\nw2 = q4; // rotation around vertical axis\nw3 = q5; // rotation around horizontal axis\n\n\n// definition of the 3D shape\n\ni = instance;\n\nmy_x = t *(cos(wh)*sin(wv)*l)*2;\nmy_z = -(-0.5 +(t-0.75)*(t-0.75))*cos(wv)*l*2;\nmy_y = t*(sin(wh)*sin(wv)*l)*2;\n\n\n\n// 3D rotations\n\nx1 = cos(w1)*my_x + sin(w1)*my_y;\ny1 = -sin(w1)*my_x + cos(w1)*my_y;\nz1 = my_z;\n\nx2 = cos(w2)*x1 + sin(w2)*z1;\nz2 = -sin(w2)*x1 + cos(w2)*z1;\ny2 = y1;\n\ny3 = cos(w3)*y2 + sin(w3)*z2;\nz3 = -sin(w3)*y2 + cos(w3)*z2;\nx3 = x2;\n\n// perspective calculation\n\np = tan(asin(1) + atan2(d+z3,sqrt(x3*x3 + y3*y3)));\nd = sqrt(x3*x3 + y3*y3 + (z3+d)*(z3+d));\n\nrad = rad/d;\nmy_x = zoom*sin(atan2(x3,y3))*p;\nmy_y = zoom*cos(atan2(x3,y3))*p;\n\nx = 0.5 + my_x;\ny = 0.5 + my_y;\n\nx = 0.5 + (x-0.5)/q2;\ny = 0.5 + (y-0.5)/q1;","init_eqs_eel":"started = 0;\nt1 = 0.412; //seeds for pseudo random generator\nt2 = 0.4563;\nt3 = 0.6452;\nt4 = 0.2565;","frame_eqs_eel":"rnd1 = if(equal(instance,0),t1,rnd1);\nrnd2 = if(equal(instance,0),t2,rnd2);\nrnd3 = if(equal(instance,0),t3,rnd3);\nrnd4 = if(equal(instance,0),t4,rnd4);\nrnd1 = 4*rnd1*(1-rnd1);\nrnd2 = 4*rnd2*(1-rnd2);\nrnd3 = 4*rnd3*(1-rnd3);\nrnd4 = 4*rnd4*(1-rnd4);\nt = .6;\nt =  (rnd1+time*t) - int(rnd1+time*t);\nt = t + rnd2*0.1;\nwh = rnd4*asin(1)*4;\nwv = 0.25 + rnd3*0.1;\n\nd = 6; // makes the perspective impact\nzoom = 1;\nl = 1;\n\n// Kardan angles\n\nw1 = q3; // first rotation: clockwise in the desktop pane\nw2 = q4; // rotation around vertical axis\nw3 = q5; // rotation around horizontal axis\n\n\n// definition of the 3D shape\n\ni = instance;\n\nmy_x = t *(cos(wh)*sin(wv)*l)*2;\nmy_z = -(-0.5 +(t-0.75)*(t-0.75))*cos(wv)*l*2;\nmy_y = t*(sin(wh)*sin(wv)*l)*2;\n\n\n\n// 3D rotations\n\nx1 = cos(w1)*my_x + sin(w1)*my_y;\ny1 = -sin(w1)*my_x + cos(w1)*my_y;\nz1 = my_z;\n\nx2 = cos(w2)*x1 + sin(w2)*z1;\nz2 = -sin(w2)*x1 + cos(w2)*z1;\ny2 = y1;\n\ny3 = cos(w3)*y2 + sin(w3)*z2;\nz3 = -sin(w3)*y2 + cos(w3)*z2;\nx3 = x2;\n\n// perspective calculation\n\np = tan(asin(1) + atan2(d+z3,sqrt(x3*x3 + y3*y3)));\nd = sqrt(x3*x3 + y3*y3 + (z3+d)*(z3+d));\n\nrad = rad/d;\nmy_x = zoom*sin(atan2(x3,y3))*p;\nmy_y = zoom*cos(atan2(x3,y3))*p;\n\nx = 0.5 + my_x;\ny = 0.5 + my_y;\n\nx = 0.5 + (x-0.5)/q2;\ny = 0.5 + (y-0.5)/q1;"},{"baseVals":{"sides":12,"additive":1,"num_inst":512,"y":0.55,"rad":0.2667,"tex_zoom":0.7874,"r":0,"g":0.1,"b":0.55,"g2":0,"border_a":0,"enabled":0},"init_eqs_str":"started = 0;\nt1 = 0.412; //seeds for pseudo random generator\nt2 = 0.4563;\nt3 = 0.6452;\nt4 = 0.2565;","frame_eqs_str":"rnd1 = if(equal(instance,0),t1,rnd1);\nrnd2 = if(equal(instance,0),t2,rnd2);\nrnd3 = if(equal(instance,0),t3,rnd3);\nrnd4 = if(equal(instance,0),t4,rnd4);\nrnd1 = 4*rnd1*(1-rnd1);\nrnd2 = 4*rnd2*(1-rnd2);\nrnd3 = 4*rnd3*(1-rnd3);\nrnd4 = 4*rnd4*(1-rnd4);\nt = .6;\nt =  (rnd1+time*t) - int(rnd1+time*t);\nt = t + rnd2*0.1;\nwh = rnd4*asin(1)*4;\nwv = 0.25 + rnd3*0.1;\n\nd = 6; // makes the perspective impact\nzoom = 1;\nl = 1;\n\n// Kardan angles\n\nw1 = q3; // first rotation: clockwise in the desktop pane\nw2 = q4; // rotation around vertical axis\nw3 = q5; // rotation around horizontal axis\n\n\n// definition of the 3D shape\n\ni = instance;\n\nmy_x = t *(cos(wh)*sin(wv)*l)*4;\nmy_z = (-0.5 +(t-0.75)*(t-0.75))*cos(wv)*l*4;\nmy_y = t*(sin(wh)*sin(wv)*l)*4;\n\n\n// 3D rotations\n\nx1 = cos(w1)*my_x + sin(w1)*my_y;\ny1 = -sin(w1)*my_x + cos(w1)*my_y;\nz1 = my_z;\n\nx2 = cos(w2)*x1 + sin(w2)*z1;\nz2 = -sin(w2)*x1 + cos(w2)*z1;\ny2 = y1;\n\ny3 = cos(w3)*y2 + sin(w3)*z2;\nz3 = -sin(w3)*y2 + cos(w3)*z2;\nx3 = x2;\n\n// perspective calculation\n\np = tan(asin(1) + atan2(d+z3,sqrt(x3*x3 + y3*y3)));\nd = sqrt(x3*x3 + y3*y3 + (z3+d)*(z3+d));\n\nrad = rad/d;\nmy_x = zoom*sin(atan2(x3,y3))*p;\nmy_y = zoom*cos(atan2(x3,y3))*p;\n\nx = 0.5 + my_x;\ny = 0.5 + my_y;\n\nx = 0.5 + (x-0.5)/q2;\ny = 0.5 + (y-0.5)/q1;","init_eqs_eel":"started = 0;\nt1 = 0.412; //seeds for pseudo random generator\nt2 = 0.4563;\nt3 = 0.6452;\nt4 = 0.2565;","frame_eqs_eel":"rnd1 = if(equal(instance,0),t1,rnd1);\nrnd2 = if(equal(instance,0),t2,rnd2);\nrnd3 = if(equal(instance,0),t3,rnd3);\nrnd4 = if(equal(instance,0),t4,rnd4);\nrnd1 = 4*rnd1*(1-rnd1);\nrnd2 = 4*rnd2*(1-rnd2);\nrnd3 = 4*rnd3*(1-rnd3);\nrnd4 = 4*rnd4*(1-rnd4);\nt = .6;\nt =  (rnd1+time*t) - int(rnd1+time*t);\nt = t + rnd2*0.1;\nwh = rnd4*asin(1)*4;\nwv = 0.25 + rnd3*0.1;\n\nd = 6; // makes the perspective impact\nzoom = 1;\nl = 1;\n\n// Kardan angles\n\nw1 = q3; // first rotation: clockwise in the desktop pane\nw2 = q4; // rotation around vertical axis\nw3 = q5; // rotation around horizontal axis\n\n\n// definition of the 3D shape\n\ni = instance;\n\nmy_x = t *(cos(wh)*sin(wv)*l)*4;\nmy_z = (-0.5 +(t-0.75)*(t-0.75))*cos(wv)*l*4;\nmy_y = t*(sin(wh)*sin(wv)*l)*4;\n\n\n// 3D rotations\n\nx1 = cos(w1)*my_x + sin(w1)*my_y;\ny1 = -sin(w1)*my_x + cos(w1)*my_y;\nz1 = my_z;\n\nx2 = cos(w2)*x1 + sin(w2)*z1;\nz2 = -sin(w2)*x1 + cos(w2)*z1;\ny2 = y1;\n\ny3 = cos(w3)*y2 + sin(w3)*z2;\nz3 = -sin(w3)*y2 + cos(w3)*z2;\nx3 = x2;\n\n// perspective calculation\n\np = tan(asin(1) + atan2(d+z3,sqrt(x3*x3 + y3*y3)));\nd = sqrt(x3*x3 + y3*y3 + (z3+d)*(z3+d));\n\nrad = rad/d;\nmy_x = zoom*sin(atan2(x3,y3))*p;\nmy_y = zoom*cos(atan2(x3,y3))*p;\n\nx = 0.5 + my_x;\ny = 0.5 + my_y;\n\nx = 0.5 + (x-0.5)/q2;\ny = 0.5 + (y-0.5)/q1;"},{"baseVals":{"sides":12,"additive":1,"num_inst":512,"y":0.55,"rad":0.05012,"tex_zoom":0.7874,"r":0,"g":0.02,"b":0.11,"g2":0,"border_a":0,"enabled":0},"init_eqs_str":"started = 0;\nt1 = 0.412; //seeds for pseudo random generator\nt2 = 0.4563;\nt3 = 0.6452;\nt4 = 0.2565;","frame_eqs_str":"rnd1 = if(equal(instance,0),t1,rnd1);\nrnd2 = if(equal(instance,0),t2,rnd2);\nrnd3 = if(equal(instance,0),t3,rnd3);\nrnd4 = if(equal(instance,0),t4,rnd4);\nrnd1 = 4*rnd1*(1-rnd1);\nrnd2 = 4*rnd2*(1-rnd2);\nrnd3 = 4*rnd3*(1-rnd3);\nrnd4 = 4*rnd4*(1-rnd4);\nt = .6;\nt =  (rnd1+time*t) - int(rnd1+time*t);\nt = t + rnd2*0.1;\nwh = rnd4*asin(1)*4;\nwv = 0.25 + rnd3*0.1;\n\nd = 1.4; // makes the perspective impact\nzoom = 1;\nl = 1;\n\n// Kardan angles\n\nw1 = q3; // first rotation: clockwise in the desktop pane\nw2 = q4; // rotation around vertical axis\nw3 = q5; // rotation around horizontal axis\n\n\n// definition of the 3D shape\n\ni = instance;\n\nmy_x = t *(cos(wh)*sin(wv)*l);\nmy_y = (-0.5 +(t-0.75)*(t-0.75))*cos(wv)*l;\nmy_z = t*(sin(wh)*sin(wv)*l);\n\n\n// 3D rotations\n\nx1 = cos(w1)*my_x + sin(w1)*my_y;\ny1 = -sin(w1)*my_x + cos(w1)*my_y;\nz1 = my_z;\n\nx2 = cos(w2)*x1 + sin(w2)*z1;\nz2 = -sin(w2)*x1 + cos(w2)*z1;\ny2 = y1;\n\ny3 = cos(w3)*y2 + sin(w3)*z2;\nz3 = -sin(w3)*y2 + cos(w3)*z2;\nx3 = x2;\n\n// perspective calculation\n\np = tan(asin(1) + atan2(d+z3,sqrt(x3*x3 + y3*y3)));\nd = sqrt(x3*x3 + y3*y3 + (z3+d)*(z3+d));\n\nrad = rad/d;\nmy_x = zoom*sin(atan2(x3,y3))*p;\nmy_y = zoom*cos(atan2(x3,y3))*p;\n\nx = 0.5 + my_x;\ny = 0.5 + my_y;\n\nx = 0.5 + (x-0.5)/q2;\ny = 0.5 + (y-0.5)/q1;","init_eqs_eel":"started = 0;\nt1 = 0.412; //seeds for pseudo random generator\nt2 = 0.4563;\nt3 = 0.6452;\nt4 = 0.2565;","frame_eqs_eel":"rnd1 = if(equal(instance,0),t1,rnd1);\nrnd2 = if(equal(instance,0),t2,rnd2);\nrnd3 = if(equal(instance,0),t3,rnd3);\nrnd4 = if(equal(instance,0),t4,rnd4);\nrnd1 = 4*rnd1*(1-rnd1);\nrnd2 = 4*rnd2*(1-rnd2);\nrnd3 = 4*rnd3*(1-rnd3);\nrnd4 = 4*rnd4*(1-rnd4);\nt = .6;\nt =  (rnd1+time*t) - int(rnd1+time*t);\nt = t + rnd2*0.1;\nwh = rnd4*asin(1)*4;\nwv = 0.25 + rnd3*0.1;\n\nd = 1.4; // makes the perspective impact\nzoom = 1;\nl = 1;\n\n// Kardan angles\n\nw1 = q3; // first rotation: clockwise in the desktop pane\nw2 = q4; // rotation around vertical axis\nw3 = q5; // rotation around horizontal axis\n\n\n// definition of the 3D shape\n\ni = instance;\n\nmy_x = t *(cos(wh)*sin(wv)*l);\nmy_y = (-0.5 +(t-0.75)*(t-0.75))*cos(wv)*l;\nmy_z = t*(sin(wh)*sin(wv)*l);\n\n\n// 3D rotations\n\nx1 = cos(w1)*my_x + sin(w1)*my_y;\ny1 = -sin(w1)*my_x + cos(w1)*my_y;\nz1 = my_z;\n\nx2 = cos(w2)*x1 + sin(w2)*z1;\nz2 = -sin(w2)*x1 + cos(w2)*z1;\ny2 = y1;\n\ny3 = cos(w3)*y2 + sin(w3)*z2;\nz3 = -sin(w3)*y2 + cos(w3)*z2;\nx3 = x2;\n\n// perspective calculation\n\np = tan(asin(1) + atan2(d+z3,sqrt(x3*x3 + y3*y3)));\nd = sqrt(x3*x3 + y3*y3 + (z3+d)*(z3+d));\n\nrad = rad/d;\nmy_x = zoom*sin(atan2(x3,y3))*p;\nmy_y = zoom*cos(atan2(x3,y3))*p;\n\nx = 0.5 + my_x;\ny = 0.5 + my_y;\n\nx = 0.5 + (x-0.5)/q2;\ny = 0.5 + (y-0.5)/q1;"}],"waves":[{"baseVals":{"samples":495,"sep":4,"spectrum":1,"thick":1,"additive":1,"scaling":100,"smoothing":1,"a":0.21,"enabled":0},"init_eqs_str":"t2 = 0;\nt3 = 0;\nt4 = 0;\nab = 1;","frame_eqs_str":"","point_eqs_str":"// lorenz-attractor calc\nxx1 = if(equal(sample,0),q11,xx1);\nyy1 = if(equal(sample,0),q12,yy1);\nzz1 = if(equal(sample,0),q13,zz1);\ndx1 = q14*(yy1-xx1);\ndy1 = xx1*(q15-zz1)-yy1;\ndz1 = xx1*yy1-q16*zz1;\nxx1 = xx1 + q17*dx1;\nyy1 = yy1 + q17*dy1;\nzz1 = zz1 + q17*dz1;\n\n// 3D model coordinates\nmy_x = xx1*0.1;\nmy_y = yy1*0.1;\nmy_z = zz1*0.1 - 3;\n\n\nd = 5; // distance of the camera (on the z-axis) to the origin\nzoom = 0.4;\n\n// solid angles\nw1 = q2;\nw2 = q3;\nw3 = q4;\n\n// rotations\nx1 = cos(w1)*my_x + sin(w1)*my_y;\ny1 = -sin(w1)*my_x + cos(w1)*my_y;\nz1 = my_z;\n\nx2 = cos(w2)*x1 + sin(w2)*z1;\nz2 = -sin(w2)*x1 + cos(w2)*z1;\ny2 = y1;\n\ny3 = cos(w3)*y2 + sin(w3)*z2;\nz3 = -sin(w3)*y2 + cos(w3)*z2;\nx3 = x2;\n\n// perspective calculation\n\nl = sqrt(x3*x3 + y3*y3);\nw = atan2(x3,y3);\np = tan(asin(1) + atan2(d+z3,l));\nd = sqrt(x3*x3 + y3*y3 + (z3+d)*(z3+d));\n\nmy_x = zoom*sin(w)*p;\nmy_y = zoom*cos(w)*p;\n\nx = 0.5 + my_x;\ny = 0.5 + my_y;","init_eqs_eel":"t2 = 0;\nt3 = 0;\nt4 = 0;\nab = 1;","frame_eqs_eel":"","point_eqs_eel":"// lorenz-attractor calc\nxx1 = if(equal(sample,0),q11,xx1);\nyy1 = if(equal(sample,0),q12,yy1);\nzz1 = if(equal(sample,0),q13,zz1);\ndx1 = q14*(yy1-xx1);\ndy1 = xx1*(q15-zz1)-yy1;\ndz1 = xx1*yy1-q16*zz1;\nxx1 = xx1 + q17*dx1;\nyy1 = yy1 + q17*dy1;\nzz1 = zz1 + q17*dz1;\n\n// 3D model coordinates\nmy_x = xx1*0.1;\nmy_y = yy1*0.1;\nmy_z = zz1*0.1 - 3;\n\n\nd = 5; // distance of the camera (on the z-axis) to the origin\nzoom = 0.4;\n\n// solid angles\nw1 = q2;\nw2 = q3;\nw3 = q4;\n\n// rotations\nx1 = cos(w1)*my_x + sin(w1)*my_y;\ny1 = -sin(w1)*my_x + cos(w1)*my_y;\nz1 = my_z;\n\nx2 = cos(w2)*x1 + sin(w2)*z1;\nz2 = -sin(w2)*x1 + cos(w2)*z1;\ny2 = y1;\n\ny3 = cos(w3)*y2 + sin(w3)*z2;\nz3 = -sin(w3)*y2 + cos(w3)*z2;\nx3 = x2;\n\n// perspective calculation\n\nl = sqrt(x3*x3 + y3*y3);\nw = atan2(x3,y3);\np = tan(asin(1) + atan2(d+z3,l));\nd = sqrt(x3*x3 + y3*y3 + (z3+d)*(z3+d));\n\nmy_x = zoom*sin(w)*p;\nmy_y = zoom*cos(w)*p;\n\nx = 0.5 + my_x;\ny = 0.5 + my_y;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"xx1 = if(equal(sample,0),q11,xx1);\nyy1 = if(equal(sample,0),q12,yy1);\nzz1 = if(equal(sample,0),q13,zz1);\n\ndx1 = q14*(yy1-xx1);\ndy1 = xx1*(q15-zz1)-yy1;\ndz1 = xx1*yy1-q16*zz1;\nxx1 = xx1 + q17*dx1;\nyy1 = yy1 + q17*dy1;\nzz1 = zz1 + q17*dz1;\n\nmy_x = xx1*0.02;\nmy_y = yy1*0.02;\nmy_z = zz1*0.02;\n\nx = 0.5 + my_x;\ny = 0.5 + my_y;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"xx1 = if(equal(sample,0),q11,xx1);\nyy1 = if(equal(sample,0),q12,yy1);\nzz1 = if(equal(sample,0),q13,zz1);\n\ndx1 = q14*(yy1-xx1);\ndy1 = xx1*(q15-zz1)-yy1;\ndz1 = xx1*yy1-q16*zz1;\nxx1 = xx1 + q17*dx1;\nyy1 = yy1 + q17*dy1;\nzz1 = zz1 + q17*dz1;\n\nmy_x = xx1*0.02;\nmy_y = yy1*0.02;\nmy_z = zz1*0.02;\n\nx = 0.5 + my_x;\ny = 0.5 + my_y;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.index2=0;a.index=0;a.q12=0;a.q22=0;a.q21=0;a.q13=0;a.q6=0;a.q1=0;a.dec_med=0;a.q5=0;a.movz=0;a.trel=0;a.q9=0;a.rott=0;a.vol__=0;a.is_beat=0;a.q23=0;a.k1=0;a.q24=0;a.trel_=0;a.vx=0;a.dec_slow=0;a.q11=0;a.q10=0;a.vy=0;a.q4=0;a.dir=0;a.dir_=0;a.p2=0;a.avg=0;a.trig=0;a.beat=0;a.vol=0;a.p1=0;a.peak=0;a.dec_fast=0;a.q2=0;a.q27=0;a.q3=0;a.t0=0;a.vol_=0;a.q7=0;a.q28=0;a.q20=0;a.q8=0;a.step=0;","frame_eqs_str":"a.dec_med=pow(.9,div(30,a.fps));a.dec_slow=pow(.96,div(30,a.fps));a.dec_fast=pow(.6,div(30,a.fps));a.beat=Math.max(Math.max(a.bass,a.mid),a.treb);a.avg=a.avg*a.dec_slow+a.beat*(1-a.dec_slow);a.is_beat=above(a.beat,0+a.avg+a.peak)*above(a.time,a.t0+.1);a.t0=a.is_beat*a.time+(1-a.is_beat)*a.t0;a.peak=a.is_beat*a.beat+(1-a.is_beat)*a.peak*a.dec_med;a.index=mod(a.index+a.is_beat,16);a.index2=mod(a.index2+a.is_beat*bnot(a.index),8);a.q20=a.avg;a.q21=a.beat;a.q22=a.peak;a.q24=a.is_beat;\na.vol=a.bass_att+a.mid_att+a.treb_att;a.vol_=a.dec_med*a.vol_+(1-a.dec_med)*a.vol;a.vol__=a.dec_med*a.vol__+(1-a.dec_med)*a.vol_;a.q27=a.index+1;a.q28=a.index2+1;a.q23=a.q22-div(.1,a.q22);a.q23=Math.max(a.q23,1);a.k1=a.is_beat*equal(mod(a.index,8),0);a.p1=a.k1*(a.p1+1)+(1-a.k1)*a.p1;a.p2=a.dec_fast*a.p2+(1-a.dec_fast)*a.p1;a.rott=div(3.1416*a.p2,4);a.q1=Math.cos(a.rott);a.q2=Math.sin(a.rott);a.q3=-a.q2;a.q4=a.q1;a.trig=a.q24*bnot(mod(a.index,2));a.vx=a.vx*bnot(a.trig)+a.trig*(div(Math.floor(rand(100)),\n100)-.5);a.vy=a.vy*bnot(a.trig)+a.trig*(div(Math.floor(rand(100)),100)-.5);a.q10=.2+a.vy*a.vy*2;a.q11=div(Math.sin(div(a.time,9)),2)+.4;a.movz-=div(1,a.fps)*(.3+a.vx);a.q9=a.movz;a.q12=2*Math.min(a.q22,6);a.q13=Math.min(2,1+Math.abs(8*a.vy*a.vx));a.dir_=a.bass-1;a.trig=bnot(mod(a.index,4))*a.q24;a.dir=bnot(a.trig)*a.dir+a.trig*(Math.floor(rand(10))-5);a.trel+=div(.1,a.fps)*a.dir;a.trel_=a.dec_med*a.trel_+(1-a.dec_med)*a.trel;a.q5=Math.cos(a.trel_);a.q6=Math.sin(a.trel_+0*a.q27*mod(a.q28,2));a.q7=\n-a.q6;a.q8=a.q5;a.zoom=1.02;a.rot=.5*Math.sin(bnot(mod(a.q28,2))*a.q28);a.rot=0*Math.sin(div(a.time,3));a.dx=0;a.monitor=a.q11;","pixel_eqs_str":"","init_eqs_eel":"step = 0;","frame_eqs_eel":"dec_med = pow (0.9, 30/fps);\ndec_slow = pow (0.96, 30/fps);\ndec_fast = pow (0.6, 30/fps);\nbeat = max (max (bass, mid), treb); \navg = avg*dec_slow + beat*(1-dec_slow);\nis_beat = above(beat, 0+avg+peak) * above (time, t0+.1);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\nindex = (index + is_beat) %16;\nindex2 = (index2 + is_beat*bnot(index))%8;\n\nq20 = avg;\nq21 = beat;\nq22 = peak;\nq24 = is_beat;\nvol = bass_att + mid_att + treb_att;\nvol_ = dec_med * vol_ + (1-dec_med)* vol;\nvol__ = dec_med * vol__ + (1-dec_med)* vol_;\nq27 = index + 1;\nq28 = index2 + 1;\nq23 = q22 -0.1/q22;\nq23 = max(q23,1);\n\nk1 =  is_beat*equal(index%8,0);\np1 =  k1*(p1+1) + (1-k1)*p1;\np2 = dec_fast * p2+ (1-dec_fast)*p1;\nrott = p2 * 3.1416/4;\n\nq1 = cos(rott);\nq2 = sin(rott);\nq3 = -q2;\nq4 = q1;\n\ntrig = q24 * bnot(index%2);\nvx = vx*bnot(trig) + trig* (int(rand(100))/100-.5);\nvy = vy*bnot(trig) + trig* (int(rand(100))/100-.5);\nq10 = 0.2+vy*vy*2;\nq11 = sin(time/9)/2+.4;\nmovz = movz-1/fps*(.3+vx);\nq9 = movz;\n\nq12 = min(q22,6)*2;\nq13 = min(2,1+abs(8*vy*vx));\n//dir_ = dec_med*dir_ + (1-dec_med)*(index2%2-.5);\ndir_ =  bass-1;\n\ntrig = bnot(index%4) * q24;\ndir = bnot(trig)*dir + trig*(int(rand(10))-5);\n\ntrel = trel + .1/fps*dir;\ntrel_ = dec_med*trel_ + (1-dec_med)*trel;\n\nq5 = cos(trel_);\nq6 = sin(trel_+0*q27*(q28%2));\nq7 = -q6;\nq8 = q5;\n\nzoom = 1.02;\nrot = .5*sin(bnot(q28%2)*q28) ;\nrot = .0*sin(time/3);\ndx = .0;\n\nmonitor = q11;","pixel_eqs_eel":"","warp":" shader_body { \n  vec2 tmpvar_1;\n  tmpvar_1 = ((uv * texsize.xy) * 0.08);\n  vec3 tmpvar_2;\n  tmpvar_2 = (texture (sampler_main, (uv - (\n    ((sin(tmpvar_1) / cos(tmpvar_1)) * texsize.zw)\n   * 3.0))).xyz + (vec3(dot (texture (sampler_noise_lq, \n    ((((texsize.xy * texsize_noise_lq.zw).x * uv) * 0.02) + (0.1 * rand_frame).xy)\n  ), vec4(0.32, 0.49, 0.29, 0.0))) / 30.0));\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = ((mix (tmpvar_2, \n    (1.0 - tmpvar_2.zyx)\n  , vec3(0.01, 0.01, 0.01)) - 0.03) - (0.2 * pow (\n    (1.0 - rad)\n  , 18.0)));\n  ret = tmpvar_3.xyz;\n }","comp":"vec3 xlat_mutableneu;\nvec2 xlat_mutablers0;\nvec2 xlat_mutablerss;\nvec2 xlat_mutableuv2;\n shader_body { \n  vec2 uv_1;\n  vec2 ofs_2;\n  vec3 ret1_3;\n  uv_1 = ((uv - 0.5) * aspect.xy);\n  vec2 tmpvar_4;\n  tmpvar_4.x = q5;\n  tmpvar_4.y = q6;\n  uv_1 = (uv_1 + (tmpvar_4 / 4.0));\n  mat2 tmpvar_5;\n  tmpvar_5[uint(0)] = _qb.xy;\n  tmpvar_5[1u] = _qb.zw;\n  uv_1 = (uv_1 * tmpvar_5);\n  float tmpvar_6;\n  float tmpvar_7;\n  tmpvar_7 = (min (abs(\n    (uv_1.y / uv_1.x)\n  ), 1.0) / max (abs(\n    (uv_1.y / uv_1.x)\n  ), 1.0));\n  float tmpvar_8;\n  tmpvar_8 = (tmpvar_7 * tmpvar_7);\n  tmpvar_8 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_8) + 0.05368138) * tmpvar_8) - 0.1173503)\n     * tmpvar_8) + 0.1938925) * tmpvar_8) - 0.3326756)\n   * tmpvar_8) + 0.9999793) * tmpvar_7);\n  tmpvar_8 = (tmpvar_8 + (float(\n    (abs((uv_1.y / uv_1.x)) > 1.0)\n  ) * (\n    (tmpvar_8 * -2.0)\n   + 1.570796)));\n  tmpvar_6 = (tmpvar_8 * sign((uv_1.y / uv_1.x)));\n  if ((abs(uv_1.x) > (1e-08 * abs(uv_1.y)))) {\n    if ((uv_1.x < 0.0)) {\n      if ((uv_1.y >= 0.0)) {\n        tmpvar_6 += 3.141593;\n      } else {\n        tmpvar_6 = (tmpvar_6 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_6 = (sign(uv_1.y) * 1.570796);\n  };\n  xlat_mutablers0.x = (((tmpvar_6 / 3.1416) * 6.0) * q28);\n  xlat_mutablers0.y = inversesqrt(dot (uv_1, uv_1));\n  vec2 tmpvar_9;\n  tmpvar_9.x = (xlat_mutablers0.x + (q9 * 8.0));\n  tmpvar_9.y = (xlat_mutablers0.y + ((q9 * q28) * 4.0));\n  xlat_mutablerss = (tmpvar_9 / 12.0);\n  vec2 tmpvar_10;\n  tmpvar_10.x = q5;\n  tmpvar_10.y = q6;\n  ofs_2 = (0.1 * tmpvar_10.yx);\n  float tmpvar_11;\n  float tmpvar_12;\n  tmpvar_12 = -(q9);\n  tmpvar_11 = fract(tmpvar_12);\n  mat2 tmpvar_13;\n  tmpvar_13[uint(0)].x = 1.0;\n  tmpvar_13[uint(0)].y = -0.0;\n  tmpvar_13[1u].x = 0.0;\n  tmpvar_13[1u].y = 1.0;\n  xlat_mutableuv2 = ((uv_1 * (\n    (q13 * tmpvar_11)\n   * tmpvar_13)) * aspect.yx);\n  vec2 tmpvar_14;\n  tmpvar_14 = fract(((xlat_mutableuv2 + 0.5) + ofs_2));\n  xlat_mutableneu = (texture (sampler_main, tmpvar_14).xyz + ((texture (sampler_blur1, tmpvar_14).xyz * scale1) + bias1));\n  ret1_3 = max (vec3(0.0, 0.0, 0.0), ((xlat_mutableneu * \n    (1.0 - (tmpvar_11 * tmpvar_11))\n  ) * 2.0));\n  float tmpvar_15;\n  tmpvar_15 = fract((tmpvar_12 + 0.3333333));\n  mat2 tmpvar_16;\n  tmpvar_16[uint(0)].x = -0.4990803;\n  tmpvar_16[uint(0)].y = -0.8665558;\n  tmpvar_16[1u].x = 0.8665558;\n  tmpvar_16[1u].y = -0.4990803;\n  xlat_mutableuv2 = ((uv_1 * (\n    (q13 * tmpvar_15)\n   * tmpvar_16)) * aspect.yx);\n  vec2 tmpvar_17;\n  tmpvar_17 = fract(((xlat_mutableuv2 + 0.5) + ofs_2));\n  xlat_mutableneu = (texture (sampler_main, tmpvar_17).xyz + ((texture (sampler_blur1, tmpvar_17).xyz * scale1) + bias1));\n  ret1_3 = max (ret1_3, ((xlat_mutableneu * \n    (1.0 - (tmpvar_15 * tmpvar_15))\n  ) * 2.0));\n  float tmpvar_18;\n  tmpvar_18 = fract((tmpvar_12 + 0.6666667));\n  mat2 tmpvar_19;\n  tmpvar_19[uint(0)].x = -0.5018377;\n  tmpvar_19[uint(0)].y = 0.8649619;\n  tmpvar_19[1u].x = -0.8649619;\n  tmpvar_19[1u].y = -0.5018377;\n  xlat_mutableuv2 = ((uv_1 * (\n    (q13 * tmpvar_18)\n   * tmpvar_19)) * aspect.yx);\n  vec2 tmpvar_20;\n  tmpvar_20 = fract(((xlat_mutableuv2 + 0.5) + ofs_2));\n  xlat_mutableneu = (texture (sampler_main, tmpvar_20).xyz + ((texture (sampler_blur1, tmpvar_20).xyz * scale1) + bias1));\n  ret1_3 = max (ret1_3, ((xlat_mutableneu * \n    (1.0 - (tmpvar_18 * tmpvar_18))\n  ) * 2.0));\n  float tmpvar_21;\n  tmpvar_21 = fract((tmpvar_12 + 1.0));\n  mat2 tmpvar_22;\n  tmpvar_22[uint(0)].x = 0.9999949;\n  tmpvar_22[uint(0)].y = 0.003185092;\n  tmpvar_22[1u].x = -0.003185092;\n  tmpvar_22[1u].y = 0.9999949;\n  xlat_mutableuv2 = ((uv_1 * (\n    (q13 * tmpvar_21)\n   * tmpvar_22)) * aspect.yx);\n  vec2 tmpvar_23;\n  tmpvar_23 = fract(((xlat_mutableuv2 + 0.5) + ofs_2));\n  xlat_mutableneu = (texture (sampler_main, tmpvar_23).xyz + ((texture (sampler_blur1, tmpvar_23).xyz * scale1) + bias1));\n  ret1_3 = max (ret1_3, ((xlat_mutableneu * \n    (1.0 - (tmpvar_21 * tmpvar_21))\n  ) * 2.0));\n  vec2 tmpvar_24;\n  tmpvar_24.x = (ret1_3.x + ret1_3.z);\n  tmpvar_24.y = (ret1_3.x - ret1_3.y);\n  vec4 tmpvar_25;\n  tmpvar_25.w = 1.0;\n  tmpvar_25.xyz = ((ret1_3 + (\n    ((bass_att * 0.004) / sqrt(dot (uv_1, uv_1)))\n   * roam_sin).xyz) + ((2.0 * \n    (bass_att * ((texture (sampler_blur1, fract(\n      (xlat_mutablerss + (tmpvar_24 / 2.0))\n    )).xyz * scale1) + bias1).zxy)\n  ) * clamp (\n    (1.0 - (ret1_3 * 4.0))\n  , 0.0, 1.0)));\n  ret = tmpvar_25.xyz;\n }","warp_hlsl":"shader_body {\nfloat corr = texsize.xy*texsize_noise_lq.zw;\nfloat2 uv1 = float2(uv.x-0.5,uv.y-0.5)*aspect.xy;\n\n\nfloat3 noiseVal =lum (tex2D(sampler_noise_lq, corr*uv*.02+ .1*rand_frame));\n\nfloat2 k1 = float2((uv.x), (uv.y));\n\nfloat3 ret1 = GetBlur1(uv) ;\n\nfloat k2 = (20*uv)%2;\n\nfloat2 zz = uv.xy * texsize.xy *.08;\nfloat h1 = (tan(zz.x));\nfloat h2 = (tan(zz.y));\n\nuv.xy -= float2(h1,h2)*texsize.zw * 3;\n\n\nfloat3 crisp = tex2D(sampler_main,uv) + noiseVal/30;\n\ncrisp = lerp (crisp, 1-crisp.zyx, 0.01);\n    \n ret = crisp -.03 - 0.2*pow(1-rad,18);\n}","comp_hlsl":"sampler sampler_pw_noise_lq;\n\nfloat3 neu, ret1;\nfloat2 rs2,rs0,rss,uv1,uv2, uv3, uv0;\nfloat ang2,c,s;\nfloat2x2 rota = float2x2(.7,.7,-.7,.7);\nshader_body\n{\nuv0 = uv;\nfloat2 uv5 = (uv-.5)*aspect.xy;\n\nuv -= 0.5;\nuv *= aspect.xy;    \nuv += float2 (q5,q6)/4;\nuv = mul(uv,float2x2(_qb));\nuv5 = uv;\n\nrs0.x = atan2(uv5.y, uv5.x)/3.1416*6*q28;\nrs0.y = 1/(length (uv));\n//rs0.y = q5* rs0.y + q6 * 1/rs0.y;\nrss = float2 (rs0.x+q9*8,rs0.y+q9*q28*4)/12;\n\n\nfloat3 ret1 = 0;\nint anz = 3;\nint n = 0;\nfloat2 ofs = .1*float2(q5,q6).yx;\nwhile (n <= anz) {\n    float dist = frac(-q9+1.0*n/anz);\n\n    ang2 = 6.28*n/anz;\n    c = cos(ang2);\n    s = sin(ang2);\n    uv2 = mul(uv,q13*dist*float2x2(c,s,-s,c))*aspect.yx;\n    uv3 = frac(uv2+.5+ofs) ; \n    neu = 1*GetPixel(uv3)+ GetBlur1(uv3)*1;\n    ret1 = max(ret1,neu* (1-dist*dist)*2);\nn++;\n}\n\nfloat2 dz = float2 (ret1.r+ret1.b, ret1.r-ret1.g)/2;\nret = ret1 \n+ bass_att*.004/length(uv)*roam_sin\n+ 2*(bass_att*GetBlur1(frac(rss+dz)).brg+.0*roam_sin*length(uv))*saturate(1-ret1*4);\n//+ .03/length(sin(float2(-rs0.x*.0,-rs0.y*5)))*(1/treb_att)*saturate(1-ret1*4);\n//ret = GetPixel(uv0)*2;\n}\n"}