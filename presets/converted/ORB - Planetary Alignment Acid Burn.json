{"version":2,"baseVals":{"rating":5,"decay":0.9,"echo_zoom":1.007,"echo_alpha":0.5,"echo_orient":1,"wave_mode":1,"wrap":0,"brighten":1,"wave_a":0.001,"zoom":0.96,"rot":-18.84024,"warp":0.00052,"wave_r":0,"wave_g":0,"wave_b":0,"ob_r":0.9,"ob_g":0.5,"ib_r":0,"ib_g":0,"ib_b":0,"ib_a":0.1,"mv_x":64,"mv_y":48,"mv_l":4.95,"mv_g":0.3,"mv_b":0.2,"mv_a":0},"shapes":[{"baseVals":{"textured":1,"rad":2.66718,"tex_zoom":0.45112,"g":1,"a":0.15,"g2":0,"a2":0.05,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"r = 0.1 + 0.5*sin(q1);\ng = 0.1 + 0.5*sin(q1*0.9878);\nb = 0.1 + 0.5*sin(q1*0.897);"},{"baseVals":{"sides":100,"x":0.35,"y":0,"rad":0.09959,"tex_zoom":0.42497,"r":0,"b":1,"g2":0,"a2":1,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"r = 0.1 + 0.5*sin(q1*0.01);\ng = 0.1 + 0.5*sin(q1*0.09878);\nb = 0.1 + 0.5*sin(q1*0.0897);\n\nr2 = 0.1 + 0.5*sin(q1*0.035);\ng2 = 0.1 + 0.5*sin(q1*0.09878);\nb2 = 0.1 + 0.5*sin(q1*0.0897);"},{"baseVals":{"sides":100,"y":0,"rad":0.10201,"a2":1,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"r = 0.1 + 0.5*sin(q1*0.01);\ng = 0.1 + 0.5*sin(q1*0.03878);\nb = 0.1 + 0.5*sin(q1*0.0497);\n\nr2 = 0.1 + 0.5*sin(q1*0.065);\ng2 = 0.1 + 0.5*sin(q1*0.07878);\nb2 = 0.1 + 0.5*sin(q1*0.0597);"},{"baseVals":{"sides":100,"x":0.65,"y":0,"g":1,"b":1,"r2":1,"g2":0,"b2":1,"a2":1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"//x = 0.5 + 0.02*sin(time*0.5 + 1.68);\n//y = 0.5 + 0.02*cos(time*0.5 + 1.68);\n\n\nr = 0.1 + 0.5*sin(q1*0.0144);\ng = 0.1 + 0.5*sin(q1*0.05878);\nb = 0.1 + 0.5*sin(q1*0.0797);\n\nr2 = 0.1 + 0.5*sin(q1*0.065);\ng2 = 0.1 + 0.5*sin(q1*0.07878);\nb2 = 0.1 + 0.5*sin(q1*0.0897);"}],"waves":[{"baseVals":{"enabled":1,"spectrum":1,"additive":1,"r":0,"g":0,"b":0},"init_eqs_eel":"time_delta = 2;","frame_eqs_eel":"","point_eqs_eel":"fire = above(q3, 3);\n\nexplode_time = 1.5;\n\nstate = if(below((timestart+explode_time) -(time*fire), 0), 0,  1);\ntimestart = if(below((timestart+explode_time) -(time*fire), 0), time,  timestart);\n\nxpos = if(equal(state, 0), 0.5 + 0.3*sin(rand(1000)), xpos);\nypos = if(equal(state, 0), 0.5 + 0.3*sin(rand(1000)), ypos);\nexplode = if(equal(state, 0), rand(100)*0.0000001, explode);\n\nsize = if(equal(state,1),size + 0.00001 + explode, 0);\n\n\nx =  xpos  + size*cos(sample*10);\ny =  ypos  + size*sin(sample*10);\n\nr = 0.5 + 0.5*sin(q2*1.2 + x + x);\ng = 0.5 + 0.5*sin(q2*1.5 + x + y);\nb = 0.5 + 0.5*sin(q2*1.36 + y + y);"},{"baseVals":{"enabled":1,"spectrum":1,"additive":1},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"fire = above(q3, 2.9);\n\nexplode_time = 1;\n\nstate = if(below((timestart+explode_time) -(time*fire), 0), 0,  1);\ntimestart = if(below((timestart+explode_time) -(time*fire), 0), time,  timestart);\n\nxpos = if(equal(state, 0), 0.5 + 0.3*sin(rand(1000)), xpos);\nypos = if(equal(state, 0), 0.5 + 0.3*sin(rand(1000)), ypos);\nexplode = if(equal(state, 0), rand(100)*0.0000001, explode);\n\nsize = if(equal(state,1),size + 0.00001 + explode, 0);\n\n\nx =  xpos  + size*cos(sample*10);\ny =  ypos  + size*sin(sample*10);\n\nr = 0.5 + 0.5*sin(q2*1.24 + x + x);\ng = 0.5 + 0.5*sin(q2*1.35 + x + y);\nb = 0.5 + 0.5*sin(q2*1.4666 + y + y);"},{"baseVals":{"enabled":1,"spectrum":1,"thick":1,"additive":1},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"fire = above(q3, 1.5);\n\nexplode_time = 1;\n\nstate = if(below((timestart+explode_time) -(time*fire), 0), 0,  1);\ntimestart = if(below((timestart+explode_time) -(time*fire), 0), time,  timestart);\n\nxpos = if(equal(state, 0), 0.5 + 0.3*sin(rand(1000)), xpos);\nypos = if(equal(state, 0), 0.5 + 0.3*sin(rand(1000)), ypos);\nexplode = if(equal(state, 0), rand(100)*0.0000001, explode);\n\nsize = if(equal(state,1),size + 0.00001 + explode, 0);\n\n\nx =  xpos  + size*cos(sample*10);\ny =  ypos  + size*sin(sample*10);\n\nr = 0.5 + 0.5*sin(q2*1.14 + x + x);\ng = 0.5 + 0.5*sin(q2*1.55 + x + y);\nb = 0.5 + 0.5*sin(q2*1.7666 + y + y);"},{"baseVals":{"spectrum":1,"usedots":1,"thick":1,"additive":1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"fire = above(q3, 1);\n\nexplode_time = 1;\n\nstate = if(below((timestart+explode_time) -(time*fire), 0), 0,  1);\ntimestart = if(below((timestart+explode_time) -(time*fire), 0), time,  timestart);\n\nxpos = if(equal(state, 0), 0.5 + 0.3*sin(rand(1000)), xpos);\nypos = if(equal(state, 0), 0.5 + 0.3*sin(rand(1000)), ypos);\nexplode = if(equal(state, 0), rand(100)*0.0000001, explode);\n\nsize = if(equal(state,1),size + 0.00001 + explode, 0);\n\n\nx =  xpos  + size*cos(sample*10);\ny =  ypos  + size*sin(sample*10);\n\nr = 0.5 + 0.5*sin(q2*1.24 + x + x);\ng = 0.5 + 0.5*sin(q2*1.35 + x + y);\nb = 0.5 + 0.5*sin(q2*1.4666 + y + y);"}],"init_eqs_eel":"state = 0;","frame_eqs_eel":"basstime = basstime + bass*0.06;\nq1 = basstime;\n\nq9 = basstime * 0.000005;\n\nbasstime = if(below(basstime,1000),1000,basstime);\n\nvol = pow(bass+mid+treb,2);\nbasssum = vol;\n\nstickybit = time%2;\n\n//avg vol\n//buffer 1\nvolAvg = volAvg + vol*equal(stickybit,1);\n//number of samples 1 or framerate\nsample1 = sample1 + equal(stickybit,1);\n//buffer 2\nvolAvg2 = volAvg2 + vol*equal(stickybit,0);\n//number of samples 2\nsample2 = sample2 + equal(stickybit,0);\n\n//transision\nedge = bnot(equal(bit2,stickybit));\n\nvolAvg = volAvg - volAvg*edge*stickybit;\nvolAvg2 = volAvg2 - volAvg2*edge*equal(stickybit,0);\n\nsample1 = sample1  - sample1*edge*stickybit;\nsample2 = sample2  - sample2*edge*equal(stickybit,0);\n\n//test vol against avg buffer lvl\ndiff = if(equal(stickybit,1), (basssum/(volAvg2/sample2)) , 0);\ndiff = if(equal(stickybit,0), (basssum/(volAvg/sample1)), diff);\n\nq3 = diff;\n\nbit2 = time%2;\n\ndifftime = difftime + diff*0.03;\nq2 = difftime;\n\n//fix a strange error\ndifftime = if(above(difftime,2000),0, difftime);\n\n//circle 1","pixel_eqs_eel":"zoom = 0.98;\nrot = 0;","warp":" shader_body { \n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  vec2 tmpvar_2;\n  tmpvar_2 = (uv - 0.5);\n  tmpvar_1.xyz = (texture (sampler_main, ((\n    ((((tmpvar_2 * \n      (0.97 + (rad * 0.02))\n    ) + 0.5) + ((\n      (texture (sampler_blur1, ((tmpvar_2 * 0.9) + 0.5)).xyz * scale1)\n     + bias1) * 0.1).xy) - 0.5)\n   * 0.98) + 0.5)).xyz - 0.002);\n  ret = tmpvar_1.xyz;\n }","comp":" shader_body { \n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  tmpvar_1.xyz = (texture (sampler_main, uv).xyz * 2.0);\n  ret = tmpvar_1.xyz;\n }"}