{"version":2,"baseVals":{"rating":0,"gammaadj":1.9,"echo_zoom":1.169,"wave_mode":2,"wave_a":0.027,"wave_scale":1.015,"wave_smoothing":0.522,"modwavealphastart":0.83,"modwavealphaend":1.31,"warpscale":3.138,"zoom":1.033,"warp":0.14837,"wave_r":0.5,"wave_g":0.5,"wave_b":0.5,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.dx_residual=0;a.dy_residual=0;a.bass_thresh=0;a.q6=0;a.q7=0;","frame_eqs_str":"a.wave_r=.85+.35*Math.sin(.437*a.time+1)+.55*Math.sin(.197*a.time+4);a.wave_g=.85+.35*Math.sin(.544*a.time+2)+.55*Math.sin(.143*a.time+5);a.wave_b=.85+.35*Math.sin(.751*a.time+3)+.55*Math.sin(.117*a.time+6);a.wave_r=sqrt(a.wave_r);a.wave_g=sqrt(a.wave_g);a.wave_b=sqrt(a.wave_b);a.rot+=.01*(.6*Math.sin(.381*a.time)+.4*Math.sin(.579*a.time));a.cx+=.21*(.6*Math.sin(.374*a.time)+.4*Math.sin(.294*a.time));a.cy+=.21*(.6*Math.sin(.393*a.time)+.4*Math.sin(.223*a.time));a.dx+=.003*(.6*\nMath.sin(.234*a.time)+.4*Math.sin(.277*a.time));a.dy+=.003*(.6*Math.sin(.284*a.time)+.4*Math.sin(.247*a.time));a.decay-=.01*equal(mod(a.frame,6),0);a.dx+=a.dx_residual;a.dy+=a.dy_residual;a.bass_thresh=2*above(a.bass_att,a.bass_thresh)+(1-above(a.bass_att,a.bass_thresh))*(.96*(a.bass_thresh-1.3)+1.3);a.dx_residual=.016*equal(a.bass_thresh,2.13)*Math.sin(7*a.time)+(1-equal(a.bass_thresh,2.13))*a.dx_residual;a.dy_residual=.012*equal(a.bass_thresh,2.13)*Math.sin(9*a.time)+(1-equal(a.bass_thresh,2.13))*\na.dy_residual;a.wave_x-=7*a.dx_residual;a.wave_y-=7*a.dy_residual;a.wave_mystery=.03*a.time;a.q6=.6*Math.cos(.83*a.time);a.q7=.6*Math.cos(.7*a.time);","pixel_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"wave_r = 0.85 + 0.35*sin(0.437*time+1) + 0.55*sin(0.197*time+4);\nwave_g = 0.85 + 0.35*sin(0.544*time+2) + 0.55*sin(0.143*time+5);\nwave_b = 0.85 + 0.35*sin(0.751*time+3) + 0.55*sin(0.117*time+6);\nwave_r = sqrt(wave_r);\nwave_g = sqrt(wave_g);\nwave_b = sqrt(wave_b);\nrot = rot + 0.010*( 0.60*sin(0.381*time) + 0.40*sin(0.579*time) );\ncx = cx + 0.210*( 0.60*sin(0.374*time) + 0.40*sin(0.294*time) );\ncy = cy + 0.210*( 0.60*sin(0.393*time) + 0.40*sin(0.223*time) );\ndx = dx + 0.003*( 0.60*sin(0.234*time) + 0.40*sin(0.277*time) );\ndy = dy + 0.003*( 0.60*sin(0.284*time) + 0.40*sin(0.247*time) );\ndecay = decay - 0.01*equal(frame%6,0);\ndx = dx + dx_residual;\ndy = dy + dy_residual;\nbass_thresh = above(bass_att,bass_thresh)*2 + (1-above(bass_att,bass_thresh))*((bass_thresh-1.3)*0.96+1.3);\ndx_residual = equal(bass_thresh,2.13)*0.016*sin(time*7) + (1-equal(bass_thresh,2.13))*dx_residual;\ndy_residual = equal(bass_thresh,2.13)*0.012*sin(time*9) + (1-equal(bass_thresh,2.13))*dy_residual;\nwave_x = wave_x - dx_residual*7;\nwave_y = wave_y - dy_residual*7;\nwave_mystery = time*0.03;\n\nq6 = 0.6*cos(time*0.83);\nq7 = 0.6*cos(time*0.70);","pixel_eqs_eel":"","warp":" shader_body { \n  vec3 ret_1;\n  ret_1 = (texture (sampler_main, uv).xyz + ((\n    (texture (sampler_noise_lq, (((uv_orig * texsize.xy) * texsize_noise_lq.zw) + rand_frame.xy)).xyz - 0.5)\n   / 256.0) * 3.0));\n  vec3 tmpvar_2;\n  tmpvar_2 = fract((ret_1 - 0.005));\n  ret_1 = tmpvar_2;\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = tmpvar_2;\n  ret = tmpvar_3.xyz;\n }","comp":" shader_body { \n  vec3 N_1;\n  vec3 ret_2;\n  vec2 tmpvar_3;\n  tmpvar_3 = (texsize.zw * 4.0);\n  N_1.x = (((\n    (texture (sampler_blur2, (uv + (vec2(1.0, 0.0) * tmpvar_3))).xyz * scale2)\n   + bias2) - (\n    (texture (sampler_blur2, (uv - (vec2(1.0, 0.0) * tmpvar_3))).xyz * scale2)\n   + bias2)).x * 0.7);\n  N_1.y = (((\n    (texture (sampler_blur2, (uv + (vec2(0.0, 1.0) * tmpvar_3))).xyz * scale2)\n   + bias2) - (\n    (texture (sampler_blur2, (uv - (vec2(0.0, 1.0) * tmpvar_3))).xyz * scale2)\n   + bias2)).x * 0.7);\n  N_1.x = (N_1.x + ((\n    ((texture (sampler_blur1, (uv + (vec2(1.0, 0.0) * tmpvar_3))).xyz * scale1) + bias1)\n   - \n    ((texture (sampler_blur1, (uv - (vec2(1.0, 0.0) * tmpvar_3))).xyz * scale1) + bias1)\n  ).x * 0.3));\n  N_1.y = (N_1.y + ((\n    ((texture (sampler_blur1, (uv + (vec2(0.0, 1.0) * tmpvar_3))).xyz * scale1) + bias1)\n   - \n    ((texture (sampler_blur1, (uv - (vec2(0.0, 1.0) * tmpvar_3))).xyz * scale1) + bias1)\n  ).x * 0.3));\n  N_1.z = -0.07;\n  vec3 tmpvar_4;\n  tmpvar_4 = normalize(N_1);\n  N_1 = tmpvar_4;\n  vec3 tmpvar_5;\n  tmpvar_5.z = -0.8;\n  tmpvar_5.x = q6;\n  tmpvar_5.y = q7;\n  vec3 tmpvar_6;\n  tmpvar_6.z = 0.0;\n  tmpvar_6.xy = ((uv_orig * 2.0) - 1.0);\n  vec3 tmpvar_7;\n  tmpvar_7 = normalize((tmpvar_5 - tmpvar_6));\n  vec3 tmpvar_8;\n  tmpvar_8 = normalize((tmpvar_6 - vec3(0.0, 0.0, 1.0)));\n  ret_2 = (vec3(clamp (dot (tmpvar_4, tmpvar_7), 0.0, 1.0)) * normalize((\n    ((texture (sampler_blur3, uv_orig).xyz * scale3) + bias3)\n  .yzx + 0.05)));\n  ret_2 = (ret_2 + (pow (\n    clamp (dot (normalize((tmpvar_8 + \n      ((2.0 * tmpvar_4) * dot (tmpvar_8, tmpvar_4))\n    )), tmpvar_7), 0.0, 1.0)\n  , 32.0) * 0.5));\n  vec4 tmpvar_9;\n  tmpvar_9.w = 1.0;\n  tmpvar_9.xyz = ret_2;\n  ret = tmpvar_9.xyz;\n }","warp_hlsl":"shader_body\n{\n    ret = tex2D( sampler_main, uv ).xyz;\n\n    // ERROR DIFFUSION DITHER - looks great\n    float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw + rand_frame.xy;\n    ret += (tex2D(sampler_noise_lq, dither_uv).xyz-0.5)/256.0*3;\n\n    // darken over time\n    //ret -= 0.004;\n    //ret *= 0.99;\n    //ret *= 0.97 + 0.03*saturate( length(uv - uv_orig)*200 );  // center only\n \n    ret = frac(ret - 0.005);\n}","comp_hlsl":"float2 uv_x, uv_y, uv_z, uv_echo;\nshader_body\n{\n    float rad_hq = length(uv-0.5);\n    float2 d = texsize.zw*4;\n    float f = 0.7;\n    float3 N;\n    N.x = ( GetBlur2(uv + float2(1,0)*d) - GetBlur2(uv-float2(1,0)*d) ).x*f;\n    N.y = ( GetBlur2(uv + float2(0,1)*d) - GetBlur2(uv-float2(0,1)*d) ).x*f;\n    N.x += ( GetBlur1(uv + float2(1,0)*d) - GetBlur1(uv-float2(1,0)*d) ).x*(1-f);\n    N.y += ( GetBlur1(uv + float2(0,1)*d) - GetBlur1(uv-float2(0,1)*d) ).x*(1-f);\n    N.z = -0.07;\n    N = normalize(N);\n\n    ret = N;\n\n    float3 light_pos = float3(q6,q7,-0.8);\n\n       \n    float3 P = float3(uv_orig.xy*2-1, 0);\n    float3 L = normalize(light_pos - P);\n    float3 E = float3(0,0,1);\n    float3 V = normalize(P-E);\n    float3 R = normalize( V + 2*N*dot(V,N) );\n\n    // diffuse lighting:\n    ret = saturate(dot(N,L));\n    //ret *= float3(1.2,0.9,0.6);    \n    ret *= normalize( GetBlur3(uv_orig).yzx + 0.05 );\n    //ret = 0;\n\n    // spec lighting:\n    ret += pow(saturate(dot(R,L)),32)*0.5;\n      \n    //ret *= 0.7;\n}"}