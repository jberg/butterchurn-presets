{"version":2,"baseVals":{"rating":2,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":7,"additivewave":1,"wave_thick":1,"modwavealphabyvolume":1,"wave_brighten":0,"wrap":0,"darken":1,"wave_a":0.001,"wave_scale":0.958,"wave_smoothing":0.45,"modwavealphastart":0,"modwavealphaend":1.32,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0,"wave_g":0,"wave_b":0,"ob_size":0,"ob_g":0.1,"ob_b":1,"ob_a":1,"ib_size":0,"ib_r":0,"ib_g":0,"ib_b":0,"mv_x":25.6,"mv_y":9.6,"mv_l":0,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"textured":1,"x":0.09,"y":0.9,"rad":0.22437,"tex_zoom":1.76002,"r2":1,"g2":0,"a2":0.6,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":100,"additive":1,"x":0.26,"y":0.2,"rad":0.39317,"tex_zoom":6.19589,"r":0,"g":0.55,"b":0.5,"g2":0.4,"b2":0.4,"a2":0.07,"border_r":0.3,"border_g":0.7,"border_b":0.8,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":44,"additive":1,"x":0.503,"rad":0.03886,"tex_zoom":0.60986,"g":0.1,"a":0.9,"r2":1,"b2":1,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":100,"rad":0.01,"tex_zoom":0.49981,"r":0,"g2":0,"border_r":0.2,"border_g":0.7,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"samples":282,"sep":20,"usedots":1,"thick":1,"additive":1,"scaling":3.91581,"smoothing":0.1,"r":0.2,"g":0.3,"a":0.6,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"usedots":1,"thick":1,"scaling":0.89152,"smoothing":0.82,"a":0.1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"thick":1,"scaling":0.89152,"smoothing":0.82,"r":0,"g":0.2,"b":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"usedots":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.n=0;a.reg26=0;a.uvx0=0;a.reg34=0;a.reg28=0;a.reg23=0;a.q25=0;a.angchg=0;a.reg20=0;a.reg15=0;a.reg10=0;a.q12=0;a.v3=0;a.q22=0;a.q21=0;a.diry=0;a.q13=0;a.q6=0;a.posx=0;a.fps_=0;a.reg25=0;a.uvx=0;a.q1=0;a.travel=0;a.posz=0;a.q5=0;a.movz=0;a.dirz=0;a.dec_s=0;a.reg16=0;a.slow=0;a.reg36=0;a.reg22=0;a.uvy=0;a.rotz=0;a.dist_=0;a.q23=0;a.q24=0;a.reg24=0;a.cran0=0;a.vx=0;a.ran2=0;a.q11=0;a.q10=0;a.reg14=0;a.posy=0;a.vy=0;a.vz=0;a.reg31=0;a.dirx=0;a.dec_m=0;a.q4=0;a.start=0;a.reg12=\n0;a.reg13=0;a.c2=0;a.reg37=0;a.s3=0;a.yslope=0;a.q16=0;a.xslope=0;a.q26=0;a.reg38=0;a.reg35=0;a.reg11=0;a.tx=0;a.avg=0;a.uvz=0;a.c3=0;a.uvy0=0;a.reg27=0;a.q19=0;a.beat=0;a.q17=0;a.vol=0;a.reg32=0;a.reg21=0;a.uvz0=0;a.len=0;a.reg18=0;a.reg30=0;a.q27=0;a.slen=0;a.q14=0;a.dist=0;a.reg17=0;a.v1=0;a.speed=0;a.s1=0;a.t0=0;a.s2=0;a.ran1=0;a.reg33=0;a.q7=0;a.ds=0;a.q28=0;a.ty=0;a.c1=0;a.v2=0;a.q20=0;a.q8=0;a.avg=.01;a.q7=.2;a.q8=div(rand(200),100)-1;a.q16=1.2;a.q18=rand(.8)+.1;a.q17=2.6;a.start=1;a.travel=\n0;a.rotz=0;a.look=0;a.slow=0;a.t0=a.time+3;a.lampx=.5;a.lampy=.5;a.cran0=rand(1);for(var b=a.n=0;1E4>b;b++)a.gmegabuf[Math.floor(a.n)]=0,a.n+=1;for(b=a.n=0;1E4>b;b++)a.megabuf[Math.floor(a.n)]=0,a.n+=1;a.trelx=0;a.trely=0;a.trelz=0;a.reg20=1;a.reg21=0;a.reg22=0;a.reg23=0;a.reg24=1;a.reg25=0;a.reg26=0;a.reg27=0;a.reg28=1;b=0;do{b+=1;var c;a.ran1=div(rand(800),100);a.ran2=div(rand(800),100);a.ran3=div(rand(800),100);a.posx=rand(10)-5;a.posy=rand(10)-5;a.posz=rand(10)-5;a.c1=Math.cos(a.ran1);a.c2=Math.cos(a.ran2);\na.c3=Math.cos(a.ran3);a.s1=Math.sin(a.ran1);a.s2=Math.sin(a.ran2);a.s3=Math.sin(a.ran3);a.reg20=a.c2*a.c1;a.reg21=a.c2*a.s1;a.reg22=-a.s2;a.reg23=a.s3*a.s2*a.c1-a.c3*a.s1;a.reg24=a.s3*a.s2*a.s1+a.c3*a.c1;a.reg25=a.s3*a.c2;a.reg26=a.c3*a.s2*a.c1+a.s3*a.s1;a.reg27=a.c3*a.s2*a.s1-a.s3*a.c1;a.reg28=a.c3*a.c2;a.dist=.001;var d=0;do{d+=1;a.uvx=div(a.reg26*a.dist,a.q7);a.uvy=div(a.reg27*a.dist,a.q7);a.uvz=div(a.reg28*a.dist,a.q7);a.uvx+=a.posx;a.uvy+=a.posy;a.uvz+=a.posz;a.uvx=8*(div(a.uvx,8)+30.5-Math.floor(div(a.uvx,\n8)+30.5)-.5);a.uvy=8*(div(a.uvy,8)+30.5-Math.floor(div(a.uvy,8)+30.5)-.5);a.uvz=8*(div(a.uvz,8)+30.5-Math.floor(div(a.uvz,8)+30.5)-.5);a.uvx0=a.uvx+a.q8;a.uvy0=a.uvy+a.q8;a.uvz0=a.uvz+a.q8;for(c=0;8>c;c++)a.uvx=.00001<Math.abs(1<a.uvx?1:0)?2-a.uvx:.00001<Math.abs(-1>a.uvx?1:0)?-2-a.uvx:a.uvx,a.uvy=.00001<Math.abs(1<a.uvy?1:0)?2-a.uvy:.00001<Math.abs(-1>a.uvy?1:0)?-2-a.uvy:a.uvy,a.uvz=.00001<Math.abs(1<a.uvz?1:0)?2-a.uvz:.00001<Math.abs(-1>a.uvz?1:0)?-2-a.uvz:a.uvz,a.slen=a.uvx*a.uvx+a.uvy*a.uvy+a.uvz*\na.uvz,a.uvx=(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvx:.00001<Math.abs(1>a.slen?1:0)?div(a.uvx,a.slen):a.uvx)*a.q17+a.uvx0,a.uvy=(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvy:.00001<Math.abs(1>a.slen?1:0)?div(a.uvy,a.slen):a.uvy)*a.q17+a.uvy0,a.uvz=(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvz:.00001<Math.abs(1>a.slen?1:0)?div(a.uvz,a.slen):a.uvz)*a.q17+a.uvz0;a.len=sqrt(a.uvx*a.uvx+a.uvy*a.uvy+a.uvz*a.uvz);a.dist*=1.05;c=(.6>a.dist?1:0)*(30<a.len?1:0)}while(.00001<Math.abs(c)&&1048576>d);d=.06>a.dist?1:0}while(.00001<\nMath.abs(d)&&1048576>b);","frame_eqs_str":"a.fps_=0*a.fps_+1*(.00001<Math.abs(25>=a.fps?1:0)?a.fps:25+.5*(a.fps-25));a.dec_s=1-div(.03*30,a.fps_);a.dec_m=1-div(3,a.fps_);a.beat=a.time>a.t0+3?1:0;a.t0=.00001<Math.abs(a.beat)?a.time:a.t0;a.speed=div(Math.min(.2,a.dist_-.02)*(1+2*a.avg)*(1-0*a.slow)*.1,a.q7);a.ds=a.ds*a.dec_s+div((1-a.dec_s)*a.speed*.4,a.fps_);a.rotz=.00001<Math.abs(2<a.travel?1:0)?.5:0;a.vol=a.vol*a.dec_m+div((1-a.dec_m)*(a.bass_att+a.mid_att+a.treb_att),4);a.q1=div(a.vol,2)+.3;a.dirx=a.reg26;a.diry=a.reg27;\na.dirz=a.reg28;a.posx+=a.ds*a.dirx;a.posy+=a.ds*a.diry;a.posz+=a.ds*a.dirz;a.q4=a.posx;a.q5=a.posy;a.q6=a.posz;a.angchg=(.1-a.dist_)*(.1>a.dist_?1:0);a.travel=.00001<Math.abs(0<a.angchg?1:0)?0:a.travel+a.ds;a.v1=a.v1*a.dec_s+div((1-a.dec_s)*a.rotz*a.ds,2);a.v2=a.v2*a.dec_s+div((1-a.dec_s)*a.angchg*a.xslope,a.fps_);a.v3=a.v3*a.dec_s+(1-a.dec_s)*(div(a.angchg*a.yslope,a.fps_)+2*a.v1*Math.sin(.1*a.time));a.reg30=a.reg20;a.reg31=a.reg21;a.reg32=a.reg22;a.reg33=a.reg23;a.reg34=a.reg24;a.reg35=a.reg25;\na.reg36=a.reg26;a.reg37=a.reg27;a.reg38=a.reg28;a.n=0;for(var b=a.avg=0;5>b;b++){a.n+=1;a.ran1=div(rand(100),100);a.ran2=div(rand(100),200)-.25;a.tx=Math.cos(1.57*a.n+a.ran2)*(4>=a.n?1:0)*a.ran1;a.ty=Math.sin(1.57*a.n+a.ran2)*(4>=a.n?1:0)*a.ran1;a.c1=Math.cos(a.v1);a.c2=Math.cos(a.v2+a.ty);a.c3=Math.cos(a.v3+a.tx);a.s1=Math.sin(a.v1);a.s2=Math.sin(a.v2+a.ty);a.s3=Math.sin(a.v3+a.tx);a.reg10=a.c2*a.c1;a.reg11=a.c2*a.s1;a.reg12=-a.s2;a.reg13=a.s3*a.s2*a.c1-a.c3*a.s1;a.reg14=a.s3*a.s2*a.s1+a.c3*a.c1;\na.reg15=a.s3*a.c2;a.reg16=a.c3*a.s2*a.c1+a.s3*a.s1;a.reg17=a.c3*a.s2*a.s1-a.s3*a.c1;a.reg18=a.c3*a.c2;a.reg20=a.reg30;a.reg21=a.reg31;a.reg22=a.reg32;a.reg23=a.reg33;a.reg24=a.reg34;a.reg25=a.reg35;a.reg26=a.reg36;a.reg27=a.reg37;a.reg28=a.reg38;a.q20=a.reg10*a.reg20+a.reg11*a.reg23+a.reg12*a.reg26;a.q21=a.reg10*a.reg21+a.reg11*a.reg24+a.reg12*a.reg27;a.q22=a.reg10*a.reg22+a.reg11*a.reg25+a.reg12*a.reg28;a.q23=a.reg13*a.reg20+a.reg14*a.reg23+a.reg15*a.reg26;a.q24=a.reg13*a.reg21+a.reg14*a.reg24+a.reg15*\na.reg27;a.q25=a.reg13*a.reg22+a.reg14*a.reg25+a.reg15*a.reg28;a.q26=a.reg16*a.reg20+a.reg17*a.reg23+a.reg18*a.reg26;a.q27=a.reg16*a.reg21+a.reg17*a.reg24+a.reg18*a.reg27;a.q28=a.reg16*a.reg22+a.reg17*a.reg25+a.reg18*a.reg28;a.reg20=a.q20;a.reg21=a.q21;a.reg22=a.q22;a.reg23=a.q23;a.reg24=a.q24;a.reg25=a.q25;a.reg26=a.q26;a.reg27=a.q27;a.reg28=a.q28;a.dist=.002;var c,d=0;do{d+=1;a.uvx=div(a.reg26*a.dist,a.q7);a.uvy=div(a.reg27*a.dist,a.q7);a.uvz=div(a.reg28*a.dist,a.q7);a.uvx+=a.posx;a.uvy+=a.posy;\na.uvz+=a.posz;a.uvx=8*(div(a.uvx,8)+30.5-Math.floor(div(a.uvx,8)+30.5)-.5);a.uvy=8*(div(a.uvy,8)+30.5-Math.floor(div(a.uvy,8)+30.5)-.5);a.uvz=8*(div(a.uvz,8)+30.5-Math.floor(div(a.uvz,8)+30.5)-.5);a.uvx0=a.uvx+a.q8;a.uvy0=a.uvy+a.q8;a.uvz0=a.uvz+a.q8;for(c=0;8>c;c++)a.uvx=.00001<Math.abs(1<a.uvx?1:0)?2-a.uvx:.00001<Math.abs(-1>a.uvx?1:0)?-2-a.uvx:a.uvx,a.uvy=.00001<Math.abs(1<a.uvy?1:0)?2-a.uvy:.00001<Math.abs(-1>a.uvy?1:0)?-2-a.uvy:a.uvy,a.uvz=.00001<Math.abs(1<a.uvz?1:0)?2-a.uvz:.00001<Math.abs(-1>\na.uvz?1:0)?-2-a.uvz:a.uvz,a.slen=a.uvx*a.uvx+a.uvy*a.uvy+a.uvz*a.uvz,a.uvx=(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvx:.00001<Math.abs(1>a.slen?1:0)?div(a.uvx,a.slen):a.uvx)*a.q17+a.uvx0,a.uvy=(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvy:.00001<Math.abs(1>a.slen?1:0)?div(a.uvy,a.slen):a.uvy)*a.q17+a.uvy0,a.uvz=(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvz:.00001<Math.abs(1>a.slen?1:0)?div(a.uvz,a.slen):a.uvz)*a.q17+a.uvz0;a.len=sqrt(a.uvx*a.uvx+a.uvy*a.uvy+a.uvz*a.uvz);a.dist*=1.1;c=(.6>a.dist?1:0)*(30<a.len?\n1:0)}while(.00001<Math.abs(c)&&1048576>d);a.megabuf[Math.floor(a.n)]=a.megabuf[Math.floor(a.n)]*a.dec_s+(1-a.dec_s)*a.dist;a.avg+=Math.abs(div(a.megabuf[Math.floor(a.n)],5))}a.n=0;for(b=a.avg=0;5>b;b++)a.n+=1,a.avg+=Math.abs(div(a.megabuf[Math.floor(a.n)],5));a.xslope=Math.min(Math.max(div(2,a.avg)*(a.megabuf[1]-a.megabuf[3]),-3),3);a.yslope=Math.min(Math.max(div(2,a.avg)*(a.megabuf[4]-a.megabuf[2]),-3),3);a.monitor=a.avg;a.dist_=a.dist_*a.dec_s+(1-a.dec_s)*a.dist;a.q10=a.ds*a.q7;a.q14=Math.abs(a.ds)+\n2*(Math.abs(a.v1)+Math.abs(a.v2)+Math.abs(a.v3))+.05*a.start;a.q19=.6+.4*Math.sin(.02*a.time+6*a.cran0);a.start*=.9;a.warp=0;a.zoom=1;a.dx=div(-a.v2,a.q16);a.dy=div(a.v3,a.q16);a.rot=a.v1;a.vx-=div(a.v2,a.q16);a.vy+=div(a.v3,a.q16);a.vz+=a.v1;a.q11=a.vx;a.q12=a.vy;a.movz+=a.ds;a.q13=a.movz;a.monitor=a.q13;","pixel_eqs_str":"","init_eqs_eel":"//******** INITIALIZATION *********\n//---------- some global vars, do not change -------------\navg = 0.01;\nq7 = .2; //MyZoom\nq8 =  rand(200)/100-1; //fractal modifier\n//q8 = -0; //#\nq16 = 1.2; //Tele\nq18 = rand(0.8)+.1; //brightness balance back/front\nq17 = 2.6; //fractal density factor ffac\nstart = 1; travel = 0; RotZ = 0; look = 0; slow = 0; t0 = time+3; lampx = .5; lampy = .5;\ncran0 = rand(1);\nn = 0; loop (10000, gmegabuf(n)=0; n=n+1; ); \nn = 0; loop (10000,  megabuf(n)=0; n=n+1; ); \ntrelx = 0;  trely = 0; trelz = 0;\nreg20 = 1; reg21 = 0; reg22 = 0; reg23 = 0; reg24 = 1; reg25 = 0; reg26 = 0; reg27 = 0; reg28 = 1;\n\n//Find random starting point\nwhile (exec2(\n  ran1 = rand(800)/100;  ran2 = rand(800)/100;  ran3 = rand(800)/100;\n  PosX = rand(10)-5;   PosY = rand(10)-5;   PosZ = rand(10)-5; \n\n//  PosX = 3.3; PosY = 2; PosZ = -2; ran1 = 0; ran2 = 0; ran3 = 0; //#\n\n  c1 = cos(ran1); c2 = cos(ran2); c3 = cos(ran3); \n  s1 = sin(ran1); s2 = sin(ran2); s3 = sin(ran3);\n\n  reg20 = c2*c1; reg21 = c2*s1; reg22 = -s2;\n  reg23 = s3*s2*c1 - c3*s1; reg24 = s3*s2*s1 + c3*c1; reg25 = s3*c2;\n  reg26 = c3*s2*c1 + s3*s1; reg27 = c3*s2*s1 - s3*c1; reg28 = c3*c2;\n\n  //***********BOT*************\n  //Coord. Trans. must exactly match def in warp S. !!!!\n  dist = 0.001;\n  while (exec2(\n    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;\n    uvx += PosX; uvy += PosY; uvz += PosZ;\n    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);\n    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);\n    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);\n    uvx0 = uvx+q8; uvy0 = uvy+q8; uvz0 = uvz+q8;\n    loop (7+1,\n      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));\n      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));\n      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));\n      slen = uvx*uvx + uvy*uvy + uvz*uvz;\n      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *q17 + uvx0; \n      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *q17 + uvy0; \n      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *q17 + uvz0; \n    );\n    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);\n    dist *= 1.05;\n  ,(dist < 0.6)*(len > 30)));\n,(dist < .06))); //end while","frame_eqs_eel":"fps_ = .0 * fps_ + 1*if(fps<=25,fps,25+.5*(fps-25)); \ndec_s = 1-.03*30/fps_;\ndec_m = 1-.1*30/fps_;\nbeat = (time >  t0+3); t0 = if(beat, time, t0);\n\nspeed = min(0.2,dist_-.02) * (1+2*avg) *(1-slow*.0)*.1/q7; //#\nds = ds * dec_s + (1-dec_s)*speed*.4/fps_; \nRotZ = if (travel > 2,.5,0);\nvol = vol*dec_m + (1-dec_m)*(bass_att +mid_att + treb_att)/4;\nq1 = vol/2+.3;\n//Position \nDirX= reg26; DirY= reg27; DirZ = reg28;\nPosX = PosX + ds*DirX ; PosY = PosY + ds*DirY; PosZ = PosZ + ds*DirZ; \nq4 = PosX; q5 = PosY; q6 = PosZ;\n\nangchg = (.1-dist_)*(dist_ < .1);\ntravel = if (angchg > 0,0,travel+ds);\nv1 = v1 * dec_s + (1-dec_s)* RotZ * ds/2;\nv2 = v2 *dec_s + (1-dec_s)*angchg *xslope/fps_;\nv3 = v3 *dec_s + (1-dec_s)*(angchg *yslope/fps_ + 2*v1*sin(time*.1));\n//v1 = 0.00;\n//push old RotMat\nreg30 =reg20; reg31 =reg21; reg32 =reg22; \nreg33 =reg23; reg34 =reg24; reg35 =reg25; \nreg36 =reg26; reg37 =reg27; reg38 =reg28; \n\nn = 0; avg = 0;\nloop (5,\n  n = n+1;\n  //new Rot. Mat for infinitesimal angles\n  ran1 = rand(100)/100;\n  ran2 = rand(100)/200-.25;\n  tx = cos(n*1.57+ran2) * (n <= 4)*ran1; ty = sin(n*1.57+ran2) * (n <= 4)*ran1;\n  c1 = cos(v1); c2 = cos(v2+ty); c3 = cos(v3+tx); \n  s1 = sin(v1); s2 = sin(v2+ty); s3 = sin(v3+tx);\n  reg10 = c2*c1; reg11 = c2*s1; reg12 = -s2;\n  reg13 = s3*s2*c1 - c3*s1; reg14 = s3*s2*s1 + c3*c1; reg15 = s3*c2;\n  reg16 = c3*s2*c1 + s3*s1; reg17 = c3*s2*s1 - s3*c1; reg18 = c3*c2;\n\n  //pop old RotMat\n  reg20 =reg30; reg21 =reg31; reg22 =reg32; \n  reg23 =reg33; reg24 =reg34; reg25 =reg35; \n  reg26 =reg36; reg27 =reg37; reg28 =reg38; \n\n  //Multiply new RotMat by old one\n  q20 = reg10*reg20 + reg11*reg23 + reg12*reg26;\n  q21 = reg10*reg21 + reg11*reg24 + reg12*reg27;\n  q22 = reg10*reg22 + reg11*reg25 + reg12*reg28;\n  q23 = reg13*reg20 + reg14*reg23 + reg15*reg26;\n  q24 = reg13*reg21 + reg14*reg24 + reg15*reg27;\n  q25 = reg13*reg22 + reg14*reg25 + reg15*reg28;\n  q26 = reg16*reg20 + reg17*reg23 + reg18*reg26;\n  q27 = reg16*reg21 + reg17*reg24 + reg18*reg27;\n  q28 = reg16*reg22 + reg17*reg25 + reg18*reg28;\n\n  reg20 =q20; reg21 =q21; reg22 =q22;\n  reg23 =q23; reg24 =q24; reg25 =q25;\n  reg26 =q26; reg27 =q27; reg28 =q28;\n\n  //***********BOT*************\n  //Coord. Trans. must exactly match def in warp S. !!!!\n  dist = 0.002;\n  while (exec2(\n    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;\n    uvx += PosX; uvy += PosY; uvz += PosZ;\n    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);\n    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);\n    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);\n    uvx0 = uvx+q8; uvy0 = uvy+q8; uvz0 = uvz+q8;\n    loop (7+1,\n      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));\n      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));\n      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));\n      slen = uvx*uvx + uvy*uvy + uvz*uvz;\n      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *q17 + uvx0; \n      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *q17 + uvy0; \n      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *q17 + uvz0; \n    );\n    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);\n    dist *= 1.1;\n  ,(dist < 0.6)*(len > 30)));\n  megabuf(n) = megabuf(n)*dec_s + (1-dec_s)*dist; //stores the 4 trial points\n  avg = avg+abs(megabuf(n)/5);\n); //end loop 5\n\nn = 0; avg = 0; loop (5, n=n+1; avg = avg+abs(megabuf(n)/5));\n\nxslope = min(max(2/avg*(megabuf(1)-megabuf(3)),-3),3);\nyslope = min(max(2/avg*(megabuf(4)-megabuf(2)),-3),3);\nmonitor = avg;\ndist_ = dist_*dec_s + (1-dec_s)*dist;\n\nq10 = ds*q7; //compensation of lin. movement in GetDist and zoom uv\nq14 = 1*abs(ds) + 2*(abs(v1) + abs(v2) + abs(v3)) + start*.05; \nq19 = .6 + .4*sin(time*.02+cran0*6); //brightness backgd\nstart = start * .9;\n\nwarp = 0.0; zoom = 1; \ndx = -v2/q16; dy = v3/q16; rot = v1;\nvx = vx -v2/q16; vy = vy +v3/q16; vz = vz + v1;\nq11 = vx;  q12 = vy;\nmovz = movz + ds;\nq13 = movz;\nmonitor = q13;","pixel_eqs_eel":"","warp":"float sustain;\nfloat ffac;\nfloat xlat_mutabledist;\nfloat xlat_mutablelimit;\nfloat xlat_mutablestruc;\nvec2 xlat_mutableuv1;\nvec3 xlat_mutableuv2;\n shader_body { \n  mat3 tmpvar_1;\n  tmpvar_1[uint(0)].x = q20;\n  tmpvar_1[uint(0)].y = q23;\n  tmpvar_1[uint(0)].z = q26;\n  tmpvar_1[1u].x = q21;\n  tmpvar_1[1u].y = q24;\n  tmpvar_1[1u].z = q27;\n  tmpvar_1[2u].x = q22;\n  tmpvar_1[2u].y = q25;\n  tmpvar_1[2u].z = q28;\n  vec3 tmpvar_2;\n  tmpvar_2.x = q4;\n  tmpvar_2.y = q5;\n  tmpvar_2.z = q6;\n  sustain = (0.98 - q14);\n  ffac = q17;\n  vec2 uv_3;\n  uv_3 = (((uv - 0.5) * (1.0 - \n    (q10 / (1.0 - ((texture (sampler_blur1, uv).xyz * scale1) + bias1).z))\n  )) + 0.5);\n  xlat_mutableuv1 = (((uv_orig - 0.5) * aspect.xy) * q16);\n  vec4 tmpvar_4;\n  tmpvar_4 = fract((8.0 * texture (sampler_noise_lq, (uv_3 + rand_frame.yz))));\n  vec3 tmpvar_5;\n  tmpvar_5 = tmpvar_4.xyz;\n  if ((tmpvar_4.y > (0.4 * rad))) {\n    vec3 tmpvar_6;\n    tmpvar_6 = (tmpvar_4.xyz - vec3(0.5, 0.5, 0.5));\n    vec4 nb2_7;\n    vec4 nb_8;\n    vec2 tmpvar_9;\n    tmpvar_9 = (0.0078125 * floor((\n      (128.0 * texture (sampler_pc_main, (uv_3 - texsize.zw)).yz)\n     + vec2(0.5, 0.5))));\n    nb_8.x = (1.0 - (tmpvar_9.y + (0.015625 * \n      (tmpvar_9.x - 0.5)\n    )));\n    vec2 tmpvar_10;\n    tmpvar_10 = (0.0078125 * floor((\n      (128.0 * texture (sampler_pc_main, (uv_3 + (texsize.zw * vec2(1.0, -1.0)))).yz)\n     + vec2(0.5, 0.5))));\n    nb_8.y = (1.0 - (tmpvar_10.y + (0.015625 * \n      (tmpvar_10.x - 0.5)\n    )));\n    vec2 tmpvar_11;\n    tmpvar_11 = (0.0078125 * floor((\n      (128.0 * texture (sampler_pc_main, (uv_3 + texsize.zw)).yz)\n     + vec2(0.5, 0.5))));\n    nb_8.z = (1.0 - (tmpvar_11.y + (0.015625 * \n      (tmpvar_11.x - 0.5)\n    )));\n    vec2 tmpvar_12;\n    tmpvar_12 = (0.0078125 * floor((\n      (128.0 * texture (sampler_pc_main, (uv_3 + (texsize.zw * vec2(-1.0, 1.0)))).yz)\n     + vec2(0.5, 0.5))));\n    nb_8.w = (1.0 - (tmpvar_12.y + (0.015625 * \n      (tmpvar_12.x - 0.5)\n    )));\n    vec2 tmpvar_13;\n    tmpvar_13 = (0.0078125 * floor((\n      (128.0 * texture (sampler_pc_main, (uv_3 + (texsize.zw * vec2(0.0, -1.0)))).yz)\n     + vec2(0.5, 0.5))));\n    nb2_7.x = (1.0 - (tmpvar_13.y + (0.015625 * \n      (tmpvar_13.x - 0.5)\n    )));\n    vec2 tmpvar_14;\n    tmpvar_14 = (0.0078125 * floor((\n      (128.0 * texture (sampler_pc_main, (uv_3 + (texsize.zw * vec2(1.0, 0.0)))).yz)\n     + vec2(0.5, 0.5))));\n    nb2_7.y = (1.0 - (tmpvar_14.y + (0.015625 * \n      (tmpvar_14.x - 0.5)\n    )));\n    vec2 tmpvar_15;\n    tmpvar_15 = (0.0078125 * floor((\n      (128.0 * texture (sampler_pc_main, (uv_3 + (texsize.zw * vec2(0.0, 1.0)))).yz)\n     + vec2(0.5, 0.5))));\n    nb2_7.z = (1.0 - (tmpvar_15.y + (0.015625 * \n      (tmpvar_15.x - 0.5)\n    )));\n    vec2 tmpvar_16;\n    tmpvar_16 = (0.0078125 * floor((\n      (128.0 * texture (sampler_pc_main, (uv_3 + (texsize.zw * vec2(-1.0, 0.0)))).yz)\n     + vec2(0.5, 0.5))));\n    nb2_7.w = (1.0 - (tmpvar_16.y + (0.015625 * \n      (tmpvar_16.x - 0.5)\n    )));\n    vec4 tmpvar_17;\n    tmpvar_17 = min (nb_8, nb2_7);\n    nb_8.zw = tmpvar_17.zw;\n    nb_8.xy = min (tmpvar_17.xy, tmpvar_17.zw);\n    xlat_mutabledist = (min (nb_8.x, nb_8.y) + ((0.006 * tmpvar_6.x) * abs(tmpvar_6.y)));\n  } else {\n    xlat_mutabledist = tmpvar_5.x;\n  };\n  vec2 tmpvar_18;\n  tmpvar_18 = (0.0078125 * floor((\n    (128.0 * texture (sampler_pc_main, uv_3).yz)\n   + vec2(0.5, 0.5))));\n  xlat_mutabledist = (min (xlat_mutabledist, (1.0 - \n    (tmpvar_18.y + (0.015625 * (tmpvar_18.x - 0.5)))\n  )) - (q10 * 0.8));\n  xlat_mutablelimit = (15.0 + (10.0 * xlat_mutabledist));\n  vec3 tmpvar_19;\n  tmpvar_19.xy = (xlat_mutableuv1 * xlat_mutabledist);\n  tmpvar_19.z = xlat_mutabledist;\n  xlat_mutableuv2 = (((tmpvar_19 / q7) * tmpvar_1) + tmpvar_2);\n  xlat_mutableuv2 = ((fract(\n    ((xlat_mutableuv2 / 8.0) + 0.5)\n  ) - 0.5) * 8.0);\n  int iterations_21;\n  vec3 zz0_22;\n  vec3 zz_23;\n  zz_23 = xlat_mutableuv2;\n  zz0_22 = (xlat_mutableuv2 + q8);\n  iterations_21 = int((8.0 - float(\n    (xlat_mutabledist > 0.8)\n  )));\n  for (int n_20 = 0; n_20 <= iterations_21; n_20++) {\n    zz_23 = ((2.0 * clamp (zz_23, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - zz_23);\n    zz_23 = (zz_23 * (clamp (\n      max ((0.25 / dot (zz_23, zz_23)), 0.25)\n    , 0.0, 1.0) * 4.0));\n    zz_23 = ((ffac * zz_23) + zz0_22);\n  };\n  xlat_mutablestruc = (sqrt(dot (zz_23.xz, zz_23.xz)) / xlat_mutablelimit);\n  vec2 tmpvar_24;\n  tmpvar_24 = (0.0078125 * floor((\n    (128.0 * vec2((1.0 - xlat_mutabledist)))\n   + vec2(0.5, 0.5))));\n  vec2 tmpvar_25;\n  tmpvar_25.x = ((64.0 * (\n    (1.0 - xlat_mutabledist)\n   - tmpvar_24.x)) + 0.5);\n  tmpvar_25.y = tmpvar_24.x;\n  vec3 tmpvar_26;\n  float tmpvar_27;\n  tmpvar_27 = (q14 * 2.0);\n  tmpvar_26.x = (((1.0 - sustain) * xlat_mutablestruc) + (sustain * mix (texture (sampler_main, uv_3).xyz, \n    ((texture (sampler_blur1, uv_3).xyz * scale1) + bias1)\n  , vec3(tmpvar_27)).x));\n  tmpvar_26.yz = tmpvar_25;\n  vec3 tmpvar_28;\n  tmpvar_28.y = 1.0;\n  tmpvar_28.x = sustain;\n  tmpvar_28.z = 1.0;\n  vec3 tmpvar_29;\n  tmpvar_29.y = 0.0;\n  tmpvar_29.x = 0.003921569;\n  tmpvar_29.z = (0.01568628 * (0.2 + rad));\n  vec4 tmpvar_30;\n  tmpvar_30.w = 1.0;\n  tmpvar_30.xyz = mix (tmpvar_26, ((\n    mix (texture (sampler_main, uv_3).xyz, ((texture (sampler_blur1, uv_3).xyz * scale1) + bias1), vec3(tmpvar_27))\n   * tmpvar_28) - tmpvar_29), vec3(clamp ((\n    sqrt(dot (zz_23, zz_23))\n   - xlat_mutablelimit), 0.0, 1.0)));\n  ret = tmpvar_30.xyz;\n }","comp":"float xlat_mutableinten;\nfloat xlat_mutabletmp;\nvec2 xlat_mutableuv1;\nvec2 xlat_mutableuv2;\nfloat xlat_mutablez;\n shader_body { \n  float t_rel_2;\n  vec3 ret1_3;\n  float struc_4;\n  xlat_mutableuv1 = ((uv * aspect.xy) - vec2(0.5, 0.5));\n  vec4 tmpvar_5;\n  tmpvar_5 = texture (sampler_main, uv);\n  float tmpvar_6;\n  vec4 tmpvar_7;\n  tmpvar_7 = texture (sampler_blur1, uv);\n  tmpvar_6 = mix (min ((1.0 - tmpvar_5.z), (1.0 - \n    ((texture (sampler_blur2, uv).xyz * scale2) + bias2)\n  .z)), (1.0 - (\n    (tmpvar_7.xyz * scale1)\n   + bias1).z), 0.5);\n  struc_4 = ((mix (tmpvar_5.xyz, \n    ((tmpvar_7.xyz * scale1) + bias1)\n  , vec3(tmpvar_6)).x * (1.0 - tmpvar_6)) * tmpvar_6);\n  vec2 tmpvar_8;\n  tmpvar_8.x = q11;\n  tmpvar_8.y = q12;\n  xlat_mutableuv2 = ((xlat_mutableuv1 * 0.2) - (tmpvar_8 * 0.2));\n  vec2 uvi_9;\n  uvi_9 = (xlat_mutableuv2 * 4.0);\n  float zv_10;\n  zv_10 = (0.008 * time);\n  xlat_mutabletmp = clamp (dot ((texture (sampler_noise_hq, \n    (xlat_mutableuv2 + (0.03 * ((\n      (dot (texture (sampler_noise_hq, uvi_9), vec4(0.32, 0.49, 0.29, 0.0)) + (dot (texture (sampler_noise_hq, (\n        (uvi_9 * 2.0)\n       + zv_10)), vec4(0.32, 0.49, 0.29, 0.0)) / 2.0))\n     + \n      (dot (texture (sampler_noise_hq, ((uvi_9 * 4.0) + (2.0 * zv_10))), vec4(0.32, 0.49, 0.29, 0.0)) / 4.0)\n    ) + (\n      dot (texture (sampler_noise_hq, ((uvi_9 * 8.0) + (4.0 * zv_10))), vec4(0.32, 0.49, 0.29, 0.0))\n     / 8.0))))\n  ) - 0.4), vec4(0.32, 0.49, 0.29, 0.0)), 0.0, 1.0);\n  float tmpvar_11;\n  tmpvar_11 = clamp ((pow (xlat_mutabletmp, 1.2) * sign(xlat_mutabletmp)), 0.0, 1.0);\n  xlat_mutabletmp = tmpvar_11;\n  vec3 tmpvar_12;\n  tmpvar_12.xy = vec2(0.1, 0.1);\n  tmpvar_12.z = (1.2 - uv.y);\n  ret1_3 = ((tmpvar_12 + 0.07) + ((\n    clamp (((tmpvar_6 * 2.0) - 1.5), 0.0, 1.0)\n   * tmpvar_11) * 4.0));\n  t_rel_2 = (q13 * 6.0);\n  for (int n_1 = 1; n_1 <= 3; n_1++) {\n    xlat_mutablez = (1.0 - fract((\n      (float(n_1) / 3.0)\n     - \n      (fract(-(t_rel_2)) / 3.0)\n    )));\n    xlat_mutableinten = (((1.0 - xlat_mutablez) * xlat_mutablez) * 2.0);\n    vec2 tmpvar_13;\n    tmpvar_13.x = q11;\n    tmpvar_13.y = q12;\n    xlat_mutableuv2 = (((xlat_mutablez * xlat_mutableuv1) / 4.0) - (tmpvar_13 / 6.0));\n    vec2 uvi_14;\n    uvi_14 = (xlat_mutableuv2 * 4.0);\n    float zv_15;\n    zv_15 = (0.008 * time);\n    xlat_mutabletmp = clamp (dot ((\n      (texture (sampler_noise_hq, (xlat_mutableuv2 + (0.03 * (\n        ((dot (texture (sampler_noise_hq, uvi_14), vec4(0.32, 0.49, 0.29, 0.0)) + (dot (texture (sampler_noise_hq, \n          ((uvi_14 * 2.0) + zv_15)\n        ), vec4(0.32, 0.49, 0.29, 0.0)) / 2.0)) + (dot (texture (sampler_noise_hq, (\n          (uvi_14 * 4.0)\n         + \n          (2.0 * zv_15)\n        )), vec4(0.32, 0.49, 0.29, 0.0)) / 4.0))\n       + \n        (dot (texture (sampler_noise_hq, ((uvi_14 * 8.0) + (4.0 * zv_15))), vec4(0.32, 0.49, 0.29, 0.0)) / 8.0)\n      )))) - (xlat_mutablez * 0.5))\n     - 0.3), vec4(0.32, 0.49, 0.29, 0.0)), 0.0, 1.0);\n    xlat_mutabletmp = (((\n      clamp ((xlat_mutabletmp * sign(xlat_mutabletmp)), 0.0, 1.0)\n     * xlat_mutableinten) * q1) * 2.0);\n    ret1_3 = (((ret1_3 + \n      ((vec3(4.0, 3.0, 0.8) * q1) * struc_4)\n    ) * clamp (\n      (1.0 - xlat_mutabletmp)\n    , 0.0, 1.0)) + xlat_mutabletmp);\n  };\n  vec4 tmpvar_16;\n  tmpvar_16.w = 1.0;\n  tmpvar_16.xyz = (1.0 - exp((-1.6 * ret1_3)));\n  ret = tmpvar_16.xyz;\n }","warp_hlsl":"float limit, dist, struc, len; float2 uv0, uv1; float3 uv2; float4 box;\nstatic const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);\n\nstatic const float3 CamPos = float3(q4,q5,q6);\nstatic const float myzoom = q7,  res = 128, res2 = 64, tele = q16;\nstatic const float sustain = .98 - q14, change = q14, ds = q10, tic8 = 1.0/255, ffac = q17;\n\nfloat2 fstep2 (float2 xy) {return 1.0/res*round(res*xy);}\n\nfloat GetDist(float2 uvi) {float2 tmp; tmp = fstep2(tex2D (sampler_pc_main, uvi).gb); \n  return 1-(tmp.y + 1.0/res2*(tmp.x-.50));}\n\nfloat2 PutDist(float x) {float tmp; tmp = fstep2(1-x);\n  return (float2(res2*((1-x)-tmp)+.5,tmp));}\n\nfloat MinDist (float2 uvi) \n{\n   float tmp; float4 nb; float4 nb2; float2 pix;\n   pix = texsize.zw*(1+length(uvi-0.5)*.0);   \n   nb.x = GetDist(uvi+pix*float2(-1,-1));   nb.y = GetDist(uvi+pix*float2(1,-1));\n   nb.z = GetDist(uvi+pix*float2(1,1));     nb.w = GetDist(uvi+pix*float2(-1,1));         \n   nb2.x = GetDist(uvi+pix*float2(0,-1));   nb2.y = GetDist(uvi+pix*float2(1,0));          \n   nb2.z = GetDist(uvi+pix*float2(0,1));    nb2.w = GetDist(uvi+pix*float2(-1,0));\n   //Eo.S. more efficient usage of min to get min value of all 8 GetDist() calls, removes 11ALU\n   nb = min( nb, nb2 );\n   nb.xy = min( nb.xy, nb.zw );\n   return min( nb.x, nb.y );\n}\n\nfloat3 Get1 (float2 uvi) {return lerp (GetPixel(uvi), GetBlur1(uvi),change*2);} \n\nfloat4 mbox (float3 uvi) {float3 zz, zz0; float tmp, li;\n  zz = uvi; zz0 = zz+q8; li=0; int iterations = 8 - (dist>.8);\n  for (int n = 0; n <= iterations; n++) {\n    zz = 2.0*clamp(zz,-1,1)-zz;  tmp = dot(zz,zz);\n    zz *= clamp(max(.25/tmp, .25), 0.0, 1.0)*4; //############\n    zz = ffac*zz + zz0 ;}\nreturn float4(zz,li);}\n\nshader_body {uv0 = uv_orig;\nuv = (uv-.5)*(1-ds/(1-GetBlur1(uv).b)) + .5;\nuv1 = (uv0-.5)*aspect.xy*tele;\nfloat3 noise = frac(8*tex2D (sampler_noise_lq,uv+rand_frame.yz)); \n\n   if (noise.g > .4*rad) \n   {\n       float3 noiseBiased = noise - float3( 0.5, 0.5, 0.5 );\n      //Eo.S. combine the subtraction on noise to a single float3 \n      //to ensure compiler does the subtraction in a single ALU\n      dist = MinDist(uv) +  0.006 * (noiseBiased.x) * abs(noiseBiased.y);\n   }    \n   else {dist = noise.r;}\ndist = min(dist,GetDist(uv)) - ds*.8;\n\nlimit = 15 + 10 * dist;\nfloat tdist = dist+.000;\nuv2 = mul(float3(uv1*tdist,tdist)/myzoom,RotMat)+CamPos;\nuv2 = (frac(uv2/8.0+.5)-.5)*8.0;\nbox = mbox (uv2);\nlen = (length(box.xyz));\nstruc = length(box.xz) /limit;\n\nfloat3 inside  = float3 ((1-sustain)*struc+sustain*(Get1(uv).r), PutDist(dist));\nfloat3 outside = Get1(uv)*float3(sustain,1,sustain*0+1)-float3(tic8,0,change/4*0+tic8*4*(.2+rad));\nret = lerp (inside,outside,saturate(1*(len-limit+struc*-0)));\n}","comp_hlsl":"#define sat saturate\nsampler sampler_pw_noise_lq;\nstatic const float2 pix = texsize.zw;\nfloat glow, tmp, lamp, dist, bdist, b2dist, dist_c, cloud, inten, z;\nfloat2 dz, uv1,uv2, uv3, uv4;\nstatic const float3 CamPos = float3(q4,q5,q6);\nstatic const float myzoom = q7;\nstatic const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);\nstatic const float3 col_struc =  float3(1,.7,.3) + .2*(rand_preset.xyz-.5);\n\nfloat3 GetBlurX (float2 uvi, float x) {return lerp (GetPixel(uvi), GetBlur1(uvi), x);}\nfloat GetDist(float2 uvi)   {return 1-GetPixel(uvi).b;}\nfloat GetDistB(float2 uvi)  {return 1-GetBlur1(uvi).b;}\nfloat GetDistB2(float2 uvi) {return 1-GetBlur2(uvi).b;}\n\nfloat MinDistB (float2 uvi) {float tmp; float4 nb; //##nicht ideal\n  tmp = GetDist(uvi);\n  tmp = min(tmp,GetDistB2(uvi)*1) ;\n  return tmp;}\n\nfloat noise4 (float2 uvi) { float n1,n2,n3,n4,zv; zv = 0.008*time;\n  n1 = lum(tex2D(sampler_noise_hq, (uvi)));\n  n2 = lum(tex2D(sampler_noise_hq, (uvi*2+zv)));\n  n3 = lum(tex2D(sampler_noise_hq, (uvi*4+2*zv)));\n  n4 = lum(tex2D(sampler_noise_hq, (uvi*8+4*zv)));\n  return n1 + n2/2 + n3/4 + n4/8;}\n\nfloat shadow (float2 uvi) {int n; float dark, dx; float2 uvc;\n  dark = 0; n = 1;\n  while ( (n <= 8)) \n     {dx = .002*n; \n      uvc = uvi + float2(dx,0); \n      dark = dark + (GetDistB(uvi)-GetDistB(uvc) <= dx*4); \n      n++;\n     ;}\n  return dark/8;\n}\n\nshader_body {uv1= (uv-.5)*aspect.xy;\nuv1 = uv*aspect.xy-float2(.5,.5);\n\n\ndist = MinDistB(uv);\nbdist = lerp(dist,GetDistB(uv),.5);\nfloat struc0 = GetBlurX(uv,bdist).r;\nfloat struc = struc0 * (1-bdist)*bdist;\n\ntmp = 0;\nfor (int k = 1; k <= 1; k++) {\n  uv2 = (uv1*(1-.1*tmp))*.2-float2(q11,q12)*.2;\n  tmp = saturate(lum(tex2D (sampler_noise_hq,uv2 +.03*noise4(uv2*4))-.4));}\ntmp = saturate(pow(tmp,1.2) * sign(tmp));\n\nfloat3 ret1 = float3 (0.1,0.1,1.2-uv.y)+.07 + sat(bdist*2-1.5)*tmp*4;;\n\n//ret1 = 0;\nint anz = 3; float t_rel = q13*6;\nfor (int n=1;n<=anz;n++) {\n//    int m =  n-int(t_rel);\n\n    z = 1-frac(1.0*n/anz-1.0*frac(-t_rel)/anz); \n\n    inten =  (1-z)*z*2;\n    tmp = 0;\n    for (int k = 1; k <= 1; k++) {\n      uv2 = z*(uv1*(1-.1*tmp))/4-float2(q11,q12)/6;\n      tmp = saturate(lum(tex2D (sampler_noise_hq,uv2 +.03*noise4(uv2*4))-z*.5-.3)+0*struc);}\n    tmp = saturate(pow(tmp,1) * sign(tmp)) *inten*(1+struc*0)*q1*2;\n      \n    ret1 = (ret1+struc*4*q1*float3(1,.75,.2))*sat(1-tmp) + tmp;\n}\n\n\nret = 1-exp((-1.6)*ret1);\n}\n\n//-------------------------------------------\n//Written by martin\n"}