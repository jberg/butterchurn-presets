{"version":2,"baseVals":{"rating":4,"gammaadj":1.98,"decay":0.5,"echo_zoom":0.952,"echo_alpha":0.5,"echo_orient":3,"wave_mode":4,"additivewave":1,"modwavealphabyvolume":1,"wave_brighten":0,"darken_center":1,"darken":1,"wave_a":0.001,"wave_scale":2.107,"wave_smoothing":0,"wave_mystery":-0.22,"modwavealphastart":0.81,"modwavealphaend":1.4,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0.6,"wave_g":0.5,"wave_b":0,"ob_size":0,"ob_a":1,"ib_size":0.26,"mv_x":64,"mv_y":48,"mv_l":1.85,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"enabled":1,"sides":16,"textured":1,"num_inst":5,"x":0.73,"rad":0.29466,"tex_zoom":2.79176,"r":0.7,"g":0.7,"b":1,"g2":0,"border_b":0,"border_a":0},"init_eqs_eel":"","frame_eqs_eel":"trig = q25;\na = trig*min(bass+treb,1); a2 = trig*0;\n//a = min(bass+treb-1,1);\nx0 = x0 *bnot(trig) + trig*int(rand(100))/100;\ny0 = y0 *bnot(trig) + trig*int(rand(100))/100;\n\n\nk1 = instance/num_inst*6.28;\nampl = .1*q22+.1;\n\n\nx0 = .5 +q15*ampl *cos(k1+q17); y0 = .5+ q16*ampl*sin(k1+q17);\n\n\ntex_ang = int(rand(20))/3;\n//tex_ang = time;\nrad = .1 + int(rand(8))/12;\n\nx = x0; y = y0;\nr = .7+.3*sin(time/12);\nb = .7+.3*sin(time/15);\ng = .7+.3*sin(time/8);\nr2 = r; b2 = b; g2 = g;"},{"baseVals":{"enabled":1,"sides":32,"num_inst":37,"rad":0.0364,"ang":0.81681,"tex_ang":0.37699,"tex_zoom":1.02841,"g":1,"b":1,"a":0.05,"r2":1,"b2":1,"border_a":0},"init_eqs_eel":"","frame_eqs_eel":"k1 = instance/num_inst*6.28;\ntmp = q17/32+time*.1;\ntrel = tmp-int(tmp);\n\nyes = above(sin(time/9.5),0);\n\nbright = 6*q2*q2*yes+.1*min(q8,1);\nborder_a = bright;\n\ntmp = 2*sin(time/12)-1;\na = .5*yes*pow(2,-18*abs(k1-6.28*trel)) * above(tmp,0)*tmp*tmp;\nampl = .1;\nrad = .02+.0*sin(k1*4+time);\nx = .5 +q15*ampl *cos(k1+q17); y = .5+ q16*ampl*sin(k1+q17);\n\nr0 = sin(time/7);\ng0 = sin(time/5);\nb0 = sin(time/9);\n\nborder_r = .8 + .2*r0;\nborder_g = .8 + .2*g0;\nborder_b = .8 + .2*b0;\n\n\n//r = .5*r0; g = .5*g0; b = 0.5*b0; ;\n\n//r2 = 0; g2 = 0; b2 = 0;\n\na2 = 0;\n"},{"baseVals":{"enabled":1,"sides":32,"additive":1,"thickoutline":1,"num_inst":33,"r":0,"g":0.5,"g2":0.5,"border_a":0},"init_eqs_eel":"","frame_eqs_eel":"trans = int(rand(int(q1)))/5+instance-instance;\ntrans2 = int(rand(int(q1)))/5+instance-instance;\ntrans3 = int(rand(int(q1)))/5+instance-instance;\na = trans;\n\nx = (sin(q23)+1.57)*.3 + int(rand(15))*0.004*(bass_att+treb_att+mid_att)*if(equal(int(rand(2)),1),1,-1)+instance-instance;\ny = (cos(q23)+1.57)*.3 + int(rand(15))*0.004*(bass_att+treb_att+mid_att)*if(equal(int(rand(2)),1),1,-1)+instance-instance;\nrad = .09 + int(rand(int(q1)))/15+instance-instance;\nr=int(rand(q1))*.1+instance-instance;\ng=int(rand(q1))*.1+instance-instance;\nb=int(rand(q1))*.1+instance-instance;\nr2=int(rand(q1))*.1+instance-instance;\ng2=int(rand(q1))*.1+instance-instance;\nb2=int(rand(q1))*.1+instance-instance;\nborder_r=int(rand(q1))*.1+instance-instance;\nborder_g=int(rand(q1))*.1+instance-instance;\nborder_b=int(rand(q1))*.1+instance-instance;"},{"baseVals":{"enabled":1,"sides":3,"thickoutline":1,"textured":1,"num_inst":311,"rad":0.01,"tex_ang":0.62832,"r":0,"g2":0,"border_r":0,"border_g":0,"border_b":0,"border_a":0},"init_eqs_eel":"","frame_eqs_eel":"ma=ma+(above(bass,1)*3.1415*.01*bass);\nma=ma-(above(treb,1)*3.1415*.01*treb);\n\nmx=mx+(.0002*cos(ma));\nmy=my+(.0002*tan(ma));\n\nmx=if(above(mx,.9),(.9-mx),mx);\nmy=if(above(my,.9),(.9-my),my);\nmx=if(below(mx,.1),(.9+mx),mx);\nmy=if(below(my,.1),(.9+my),my);\n\nx=1-mx;\ny=1-my;\n\nang=(sin(time*.35)+1)*3;\n//a=(above(bass+mid+treb,.8));\npi23=4*asin(1)*.333333333;\nt1=bass+mid+treb;"}],"waves":[{"baseVals":{"enabled":1,"sep":256,"spectrum":1,"smoothing":0.8,"a":0.04},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"sw = (1-sw)*above(sample,0);\n\nosa = sample*above(sample,0);\n\nmod = pow(value1*2,2)*sign(value1)*.5;\n\nmod = value1;\nmod = mod*sw;\n\ny = if(sw,osa,sample*.5+.25);\ny = sample*.5+.25;\ny = (y-0.5)/(q32) + 0.5;\nx = 1 - mod*.5;\n\nosa = sample;\n\nmo = 3.7 + mod*6 + q1;\n\nr = .5 + sin(q23*.9 +mo)*.5;\ng = .5 + sin(q23*.89+mo + 1.5472)*.5;\nb = .5 + sin(q23*.88+mo + 2.8944)*.5;\n\n//a = 3 - abs(mod)*12;\n//a = 3-sw;\n//a = max(0,min(a,1));"},{"baseVals":{"enabled":1,"sep":256,"spectrum":1,"smoothing":0.8,"a":0.04},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"sw = (1-sw)*below(sample,1);\n\nosa = sample*above(sample,0);\n\nmod = pow(value2*2,2)*sign(value2)*.5;\n\nmod = value2;\nmod = mod*sw;\n\ny = if(sw,osa,sample*.5+.25);\ny = sample*.5+.25;\ny = (y-0.5)/(q32) + 0.5;\nx = 0+ mod*.5;\n\nosa = sample;\n\nmo = 3.7 + mod*6 + q1;\n\nr = .5 + sin(q23*.95+mo)*.5;\ng = .5 + sin(q23*.96+mo + 1.5472)*.5;\nb = .5 + sin(q23*.97+mo + 2.8944)*.5;\n\n//a = 3 - abs(mod)*12;\n//a = 3-sw;\n//a = max(0,min(a,1));"},{"baseVals":{"thick":1,"scaling":0.89152,"smoothing":0.82,"a":0.1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"usedots":1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"avg = 1;\nindex = int(rand(8));\nindex2 = int(rand(8));\nran = 1;\nspb_=.3;\nsdev = .1;\ntrel2 = rand (100)/100;","frame_eqs_eel":"vol=bass+treb+mid;\nq1=max(1,min(5.5,vol*1.15));\natime=atime+vol;\nq23=atime*.02;\ndec_med = pow (0.9, 30/fps); dec_slow = pow (0.98, 30/fps);\nbeat = bass+mid+treb;\navg = avg*dec_slow + beat*(1-dec_slow);\nis_beat = above(beat, .2+avg+peak) * above (time, t0+.1);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\nindex = (index + is_beat) %16;\nindex2 = (index2 + is_beat*bnot(index))%12;\n\nspb = min(t0-t0a + .01,2); t0a = t0;\nspb_ = if(is_beat,spb_ *.9 +.1*spb, spb_);\nmindev = min(min(abs(spb-spb_),abs(spb*2-spb_)),abs(spb-spb_*2));\nsdev = if(is_beat,sdev * .9 + .1*pow(mindev+.02,2),sdev);\n\nq20 = avg; q21 = beat;\nq22 = peak+.1; \nq24 = is_beat;\nq27 = index; q28 = index2;\n\ntrel = trel + 1/fps/spb_*4; itrel = int(trel);\nq25 =  above(itrel, itrel_);\nq30 = itrel%2;\nitrel_ = itrel;\nq31 = itrel;\n\nma = ma + peak/fps ;\nmx=mx*dec_med+(1-dec_med)*cos(ma);\nmy=my*dec_med+(1-dec_med)*sin(ma+trel/16);\nq15 = mx ; q16 = my ; q17 = ma;\n\n//first par: off; second: on\nsw1 = if(sw1,bnot(q24*bnot(int(rand(20)))),q24*bnot(int(rand(20))));\nsw2 = if(sw2,bnot(q24*bnot(int(rand(10)))),q24*bnot(int(rand(80))));\nsw3 = if(sw3,bnot(q24*bnot(int(rand(10)))),q24*bnot(int(rand(100+10000*sdev))));\n\n//********* variation parameters warp shader\nq6 = sin(time/15)*sin(time/27)*.2; //zz weighting\nq10 = sin(time/8); //ring\nq10 = q10*q10*.1; \nq11 = 1.5+sin(time/7.8); //zoom uv2\nq12 = if(below(sdev,.015)*bnot(q8),q25,1); //go\nq13 = .5+sin(time/17); //pow noise warp s\nq19 = sin(time/5.3)*.2; //sunpos\n\n//********* variation parameters comp shader\nq3 = sw1;//mirror \nq4 = .02/sdev; //unused ###\nq5 = max(min(4*sin(trel/64)-3,1),0)*.4; //water\nq7 = below(sdev,.004)*(index2%2); //flash\nq2 = abs(q19)*sqrt(q15*q15+q16*q16); //avoid black - frame eq2\n\ntrel2 = trel2+.003*q22*q22/fps;\ntmp = sin(trel2);\ntmp = 20*tmp-19;\nq8 =  tmp*above(tmp,0)*(4/max(q22-4,0.2)+4); // dyn zoom\nq26 = above(q22,12)*(q22-12)*2; //# ok???\n\ntmp = index2/6;\nq14 = abs((tmp-int(tmp))-.5)*6+1; //ang multi\n\ntmp =sin(trel/4*3.14); //sym rot\njmp = jmp + above(tmp,.5)*tmp/fps*8*sw2;\nq9 = jmp*equal(q14,1)*below(sdev,0.04)+time*above(sin(q17/23),.9);\nq18 = tmp * bnot(q8) * sw3; //waber\n\nmonitor = sw1;\nrot = .003;\nwarp = .0;\nzoom = 1+(avg-log(sdev))/200;\n//dx = tmp*.01*above(abs(tmp),.95);\nq32=aspecty;monitor=vol;\nchng=sin(time*.5);\ncthr=.99;\nmq21=if(above(chng,cthr),rand(3),mq21);\nmq22=if(above(chng,cthr),rand(3),mq22);\nmq23=if(above(chng,cthr),rand(3),mq23);\nmq24=if(above(chng,cthr),rand(2),mq24);\nmq25=if(above(chng,cthr),rand(2),mq25);\nmq26=if(above(chng,cthr),rand(2),mq26);\nmq27=if(above(chng,cthr),rand(1),mq27);\nmq28=if(above(chng,cthr),rand(1),mq28);\nmq29=if(above(chng,cthr),rand(1)*.3,mq29);\nmq30=if(above(chng,cthr),rand(1)*.3,mq30);\nmonitor=chng;\nq21=mq21;q22=mq22;q23=mq23;q24=mq24;q25=mq25;q26=mq26;\nq27=mq27;q28=mq28;q29=mq29;q30=mq30;\n\nmonitor=mq1;","pixel_eqs_eel":"","warp":"mat2 ofs;\nfloat xlat_mutablenoise;\nvec2 xlat_mutableuv1;\nvec2 xlat_mutableuv2;\nfloat xlat_mutablezv;\n shader_body { \n  vec2 tmpvar_1;\n  tmpvar_1.x = q15;\n  tmpvar_1.y = q16;\n  mat2 tmpvar_2;\n  tmpvar_2[uint(0)].x = texsize.z;\n  tmpvar_2[uint(0)].y = 0.0;\n  tmpvar_2[1u].x = 0.0;\n  tmpvar_2[1u].y = texsize.w;\n  ofs = (tmpvar_2 * 2.0);\n  vec3 ret_3;\n  xlat_mutableuv1 = (uv - 0.5);\n  vec2 v_4;\n  v_4.x = ofs[0].x;\n  v_4.y = ofs[1].x;\n  vec2 v_5;\n  v_5.x = ofs[0].x;\n  v_5.y = ofs[1].x;\n  vec2 v_6;\n  v_6.x = ofs[0].y;\n  v_6.y = ofs[1].y;\n  vec2 v_7;\n  v_7.x = ofs[0].y;\n  v_7.y = ofs[1].y;\n  vec2 tmpvar_8;\n  tmpvar_8.x = (texture (sampler_main, (uv + v_4)) - texture (sampler_main, (uv - v_5))).z;\n  tmpvar_8.y = (texture (sampler_main, (uv + v_6)) - texture (sampler_main, (uv - v_7))).z;\n  xlat_mutablezv = (time * 0.1);\n  xlat_mutableuv2 = ((q11 * xlat_mutableuv1) + (0.04 * time));\n  vec3 tmpvar_9;\n  tmpvar_9.xy = xlat_mutableuv2;\n  tmpvar_9.z = xlat_mutablezv;\n  vec3 tmpvar_10;\n  tmpvar_10.xy = (xlat_mutableuv2 * vec2(2.0, 2.0));\n  tmpvar_10.z = (xlat_mutablezv * 2.0);\n  vec3 tmpvar_11;\n  tmpvar_11.xy = (xlat_mutableuv2 * vec2(4.0, 4.0));\n  tmpvar_11.z = (xlat_mutablezv * 3.0);\n  vec3 tmpvar_12;\n  tmpvar_12.xy = (xlat_mutableuv2 * vec2(8.0, 8.0));\n  tmpvar_12.z = (xlat_mutablezv * 7.0);\n  xlat_mutablenoise = (((\n    (texture (sampler_noisevol_hq, tmpvar_9).z + (texture (sampler_noisevol_hq, tmpvar_10).z / 2.0))\n   + \n    (texture (sampler_noisevol_hq, tmpvar_11).z / 4.0)\n  ) + (texture (sampler_noisevol_hq, tmpvar_12).z / 8.0)) - 1.0);\n  float tmpvar_13;\n  tmpvar_13 = pow (xlat_mutablenoise, q13);\n  xlat_mutablenoise = tmpvar_13;\n  xlat_mutableuv2 = ((xlat_mutableuv1 * (1.0 + \n    (0.5 * q2)\n  )) + (tmpvar_13 * 0.1));\n  float tmpvar_14;\n  tmpvar_14 = (((texture (sampler_blur3, \n    ((xlat_mutableuv1 / 4.0) + 0.5)\n  ).xyz * scale3) + bias3) + 0.2).x;\n  vec2 x_15;\n  x_15 = (xlat_mutableuv2 - (tmpvar_1 * q19));\n  ret_3 = ((q12 * (\n    ((((\n      clamp ((0.0005 / abs((\n        sqrt(dot (x_15, x_15))\n       - \n        (q10 / q22)\n      ))), 0.0, 1.0)\n     * \n      (0.5 + normalize(roam_cos))\n    .xyz) / tmpvar_14) + (texture (sampler_main, (\n      (xlat_mutableuv1 + 0.5)\n     + \n      (q6 * tmpvar_8)\n    )) * 0.98).xyz) - 0.01)\n   - \n    (tmpvar_14 * 0.1)\n  )) + ((1.0 - q12) * texture (sampler_main, uv).xyz));\n  vec4 tmpvar_16;\n  tmpvar_16 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * uv.xyy) * (\n    (q27 * texsize.xyy)\n   * texsize_noisevol_hq.zww)) + ((time * vec3(0.0, 0.0, 1.0)) * q29)));\n  if (((ret_3.x > (q21 * roam_cos.y)) && (ret_3.x <= (q24 * roam_sin.x)))) {\n    ret_3.y = (ret_3.y - (tmpvar_16.x * 0.5));\n  };\n  if (((ret_3.y > (q22 * roam_sin.x)) && (ret_3.y <= (q25 * roam_cos.x)))) {\n    ret_3.z = (ret_3.z - (tmpvar_16.y * 0.5));\n  };\n  if (((ret_3.z > (q23 * roam_cos.x)) && (ret_3.z <= (q26 * roam_sin.y)))) {\n    ret_3.x = (ret_3.x - (tmpvar_16.z * 0.5));\n  };\n  vec4 tmpvar_17;\n  tmpvar_17.w = 1.0;\n  tmpvar_17.xyz = ret_3;\n  ret = tmpvar_17.xyz;\n }","comp":"float xlat_mutableang2;\nvec3 xlat_mutableret1;\nvec2 xlat_mutableuv2;\n shader_body { \n  vec2 uv_1;\n  vec3 ret_2;\n  uv_1 = ((uv - 0.5) * aspect.xy);\n  vec2 tmpvar_3;\n  tmpvar_3.x = ((0.1 / rad) * q15);\n  tmpvar_3.y = ((ang * 0.2) * q22);\n  uv_1 = (uv_1 / (1.0 + (q8 * \n    sqrt(dot (uv_1, uv_1))\n  )));\n  uv_1 = (uv_1 * (1.0 - (\n    (float(mod (q28, 2.0)))\n   / 4.0)));\n  uv_1 = (uv_1 * (1.0 + (\n    (q5 * texture (sampler_noise_mq, tmpvar_3).x)\n   * rad)));\n  xlat_mutableret1 = vec3(0.0, 0.0, 0.0);\n  xlat_mutableang2 = ((1.57 * q14) + ((q28 * 3.14) / 4.0));\n  float tmpvar_4;\n  tmpvar_4 = cos(xlat_mutableang2);\n  float tmpvar_5;\n  tmpvar_5 = sin(xlat_mutableang2);\n  xlat_mutableuv2.x = ((uv_1.x * tmpvar_4) - (uv_1.y * tmpvar_5));\n  xlat_mutableuv2.y = ((uv_1.x * tmpvar_5) + (uv_1.y * tmpvar_4));\n  xlat_mutableuv2 = (xlat_mutableuv2 / (1.0 + (q26 * \n    sqrt(dot (uv_1, uv_1))\n  )));\n  xlat_mutableuv2 = (xlat_mutableuv2 * (1.0 + (0.5 * q18)));\n  if ((q3 == 1.0)) {\n    xlat_mutableuv2 = xlat_mutableuv2.yx;\n  };\n  xlat_mutableret1 = max (vec3(0.0, 0.0, 0.0), texture (sampler_main, (xlat_mutableuv2 + 0.5)).xyz);\n  float tmpvar_6;\n  tmpvar_6 = (q28 * 3.14);\n  xlat_mutableang2 = ((3.14 * q14) + (tmpvar_6 / 4.0));\n  float tmpvar_7;\n  tmpvar_7 = cos(xlat_mutableang2);\n  float tmpvar_8;\n  tmpvar_8 = sin(xlat_mutableang2);\n  xlat_mutableuv2.x = ((uv_1.x * tmpvar_7) - (uv_1.y * tmpvar_8));\n  xlat_mutableuv2.y = ((uv_1.x * tmpvar_8) + (uv_1.y * tmpvar_7));\n  xlat_mutableuv2 = (xlat_mutableuv2 * (1.0 + (-0.5 * q18)));\n  xlat_mutableret1 = max (xlat_mutableret1, texture (sampler_main, (xlat_mutableuv2 + 0.5)).xyz);\n  xlat_mutableang2 = ((4.71 * q14) + (tmpvar_6 / 4.0));\n  float tmpvar_9;\n  tmpvar_9 = cos(xlat_mutableang2);\n  float tmpvar_10;\n  tmpvar_10 = sin(xlat_mutableang2);\n  xlat_mutableuv2.x = ((uv_1.x * tmpvar_9) - (uv_1.y * tmpvar_10));\n  xlat_mutableuv2.y = ((uv_1.x * tmpvar_10) + (uv_1.y * tmpvar_9));\n  xlat_mutableuv2 = (xlat_mutableuv2 / (1.0 + (q26 * \n    sqrt(dot (uv_1, uv_1))\n  )));\n  xlat_mutableuv2 = (xlat_mutableuv2 * (1.0 + (0.5 * q18)));\n  if ((q3 == 1.0)) {\n    xlat_mutableuv2 = xlat_mutableuv2.yx;\n  };\n  xlat_mutableret1 = max (xlat_mutableret1, texture (sampler_main, (xlat_mutableuv2 + 0.5)).xyz);\n  xlat_mutableang2 = ((6.28 * q14) + ((q28 * 3.14) / 4.0));\n  float tmpvar_11;\n  tmpvar_11 = cos(xlat_mutableang2);\n  float tmpvar_12;\n  tmpvar_12 = sin(xlat_mutableang2);\n  xlat_mutableuv2.x = ((uv_1.x * tmpvar_11) - (uv_1.y * tmpvar_12));\n  xlat_mutableuv2.y = ((uv_1.x * tmpvar_12) + (uv_1.y * tmpvar_11));\n  xlat_mutableuv2 = (xlat_mutableuv2 * (1.0 + (-0.5 * q18)));\n  xlat_mutableret1 = max (xlat_mutableret1, texture (sampler_main, (xlat_mutableuv2 + 0.5)).xyz);\n  xlat_mutableret1 = (xlat_mutableret1 * ((1.0 - q7) + (\n    (q7 * q25)\n   / 2.0)));\n  ret_2 = (1.0 - exp((\n    -(xlat_mutableret1)\n   * 4.0)));\n  vec3 tmpvar_13;\n  tmpvar_13 = pow (ret_2, vec3(1.5, 1.5, 1.5));\n  vec3 tmpvar_14;\n  tmpvar_14 = mix (vec3(dot (tmpvar_13, vec3(0.32, 0.49, 0.29))), tmpvar_13, vec3(clamp ((q20 / 3.0), 0.0, 1.0)));\n  ret_2 = tmpvar_14;\n  vec4 tmpvar_15;\n  tmpvar_15 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * uv_1.xyy) * (\n    (q28 * texsize.xyy)\n   * texsize_noisevol_hq.zww)) + ((time * vec3(0.0, 0.0, 1.0)) * q30)));\n  if (((tmpvar_14.x > (q26 * roam_cos.y)) && (tmpvar_14.x <= (q23 * roam_sin.x)))) {\n    ret_2.z = (tmpvar_14.z - (tmpvar_15.x * 0.5));\n  };\n  if (((tmpvar_14.y > (q25 * roam_sin.x)) && (tmpvar_14.y <= (q22 * roam_cos.x)))) {\n    ret_2.x = (tmpvar_14.x - (tmpvar_15.y * 0.5));\n  };\n  if (((ret_2.z > (q24 * roam_cos.x)) && (ret_2.z <= (q21 * roam_sin.y)))) {\n    ret_2.y = (tmpvar_14.y - (tmpvar_15.z * 0.5));\n  };\n  vec4 tmpvar_16;\n  tmpvar_16.w = 1.0;\n  tmpvar_16.xyz = ret_2;\n  ret = tmpvar_16.xyz;\n }"}