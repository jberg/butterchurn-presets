{"version":2,"baseVals":{"rating":3,"gammaadj":1,"decay":0.997,"echo_zoom":0.997,"echo_orient":1,"wave_thick":1,"wave_brighten":0,"darken":1,"wave_a":0.001,"wave_scale":0.01,"wave_smoothing":0.27,"wave_mystery":-0.38,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpscale":1.331,"zoom":0.99951,"warp":0.01,"ob_size":0.5,"ob_r":0.01,"ib_size":0.26,"ib_r":1,"ib_g":1,"ib_b":1,"mv_x":64,"mv_y":48,"mv_l":0.85,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0},"shapes":[{"baseVals":{"sides":3,"rad":0.34,"ang":0.53,"r":0.56,"g":0.36,"r2":0.9,"border_r":0,"border_g":0,"border_b":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"ang = ang + time;","init_eqs_eel":"","frame_eqs_eel":"ang = ang + time;"},{"baseVals":{"sides":3,"rad":0.41,"r":0,"g":0.8,"b":0.7,"g2":0.4,"b2":1,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"ang = ang - time*.333;","init_eqs_eel":"","frame_eqs_eel":"ang = ang - time*.333;"},{"baseVals":{"sides":3,"rad":0.21,"r":0.84,"r2":1,"g2":0.58,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"ang = ang + time*4;","init_eqs_eel":"","frame_eqs_eel":"ang = ang + time*4;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"a.x=.5+.2*a.bass*Math.sin(20*a.sample*a.time*a.treb);a.y=.5+.2*a.bass*Math.cos(20*a.sample*a.time*a.treb);a.r=1+.5*Math.sin(.1*a.sample+10*a.time*a.bass);a.g=1+.5*Math.sin(2*a.sample+50*a.time*a.treb);a.b=1+.5*Math.sin(5*a.sample+20*a.time*a.mid);a.a=a.r;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"x = .5 + (bass*.2)*sin(sample*2*(time*10*treb));\ny = .5 + (bass*.2)*cos(sample*2*(time*10*treb));\nr = 1 + .5*sin(sample*.10+(time*10*bass));\ng = 1 + .5*sin(sample*2+(time*50*treb));\nb = 1 + .5*sin(sample*5+(time*20*mid));\na = r;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"","frame_eqs_str":"a.warp=0;a.decay=.92;","pixel_eqs_str":"a.zoom+=.03*a.bass_att*a.bass_att*a.rad;a.rot+=a.rad*bitand(-2.5,5*Math.cos(a.time))*.01;","init_eqs_eel":"","frame_eqs_eel":"warp = 0;\ndecay = .92;","pixel_eqs_eel":"zoom = zoom + (.03*(bass_att*bass_att))*rad;\nrot = rot + rad*(-2.5&(cos(time)*5))*.01;","warp":" shader_body { \n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  tmpvar_1.xyz = texture (sampler_main, uv).xyz;\n  ret = tmpvar_1.xyz;\n }","comp":" shader_body { \n  vec2 uv1_1;\n  vec3 ret_2;\n  vec3 tmpvar_3;\n  tmpvar_3 = texture (sampler_main, uv).xyz;\n  vec2 tmpvar_4;\n  tmpvar_4.x = (texture (sampler_main, (uv - vec2(0.001, 0.0))).xyz - texture (sampler_main, (uv + vec2(0.001, 0.0))).xyz).x;\n  tmpvar_4.y = (texture (sampler_main, (uv - vec2(0.0, 0.001))).xyz - texture (sampler_main, (uv + vec2(0.0, 0.001))).xyz).x;\n  uv1_1 = ((0.5 * cos(\n    (((uv - 0.5) * 1.5) + 1.6)\n  )) - (3.0 * tmpvar_4));\n  ret_2 = (0.8 * ((0.3 * \n    dot (tmpvar_3, vec3(0.32, 0.49, 0.29))\n  ) + (\n    (clamp ((0.01 / sqrt(\n      dot (uv1_1, uv1_1)\n    )), 0.0, 1.0) * tmpvar_3)\n   * \n    ((4.0 + bass) + (mid + treb_att))\n  )));\n  ret_2 = (ret_2 * 0.77);\n  vec4 tmpvar_5;\n  tmpvar_5.w = 1.0;\n  tmpvar_5.xyz = ret_2;\n  ret = tmpvar_5.xyz;\n }","warp_hlsl":"shader_body\n{\n    // sample previous frame\n    ret = tex2D( sampler_main, uv ).xyz;\n    \n    // darken (decay) over time\n    ret -= 0.0;\n}","comp_hlsl":"shader_body\n{\n    float2 uv1 = uv-.5;\n    float3 ret1 = tex2D(sampler_main, uv) + GetBlur1(uv)*0;\n    float2 uv_noise = uv_orig*texsize.xy*texsize_noise_lq.zw + rand_frame.xy;\n    half4 noiseVal = tex2D(sampler_noise_lq, uv_noise);\n    \n    float2 hor = float2 (.001,0);\n    float2 ver = float2 (0,.001);\n    float dx = GetPixel (uv-hor) - GetPixel (uv+hor);\n    float dy = GetPixel (uv-ver) - GetPixel (uv+ver);    \n    float2 dz = float2 (dx,dy);\n\n    uv1 = uv1*0+.5*cos(uv1*1.5+1.6) - 3*dz;\n    float dots = saturate(.01/length(uv1));\n\n    ret1 = 0.3*lum(ret1)+dots*ret1*(4+(bass+mid)+treb_att);\n    //ret1 = lerp(noiseVal,ret1,abs(ret1-1));\n    ret = .8*ret1;\n\n    ret *= .77;\n}\n\n//Props to martin for code I used to create the glossy effect.  Learning this pixel shader stuff!"}