{"version":2,"baseVals":{"rating":0,"gammaadj":1.980001,"decay":0.5,"echo_zoom":0.999998,"echo_alpha":0.5,"echo_orient":3,"wave_mode":4,"additivewave":1,"wave_dots":1,"modwavealphabyvolume":1,"darken":1,"wave_a":0.33064,"wave_scale":0.897961,"wave_smoothing":0.108,"wave_mystery":0.1,"modwavealphastart":0.72,"modwavealphaend":1.28,"warpanimspeed":1.4595,"warpscale":2.0067,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0,"wave_g":0.5,"wave_b":0.5,"wave_y":0.54,"ob_r":1,"ob_g":1,"ob_b":1,"ib_size":0.26,"mv_x":24.799994,"mv_dy":0.16,"mv_l":1.5,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"sides":3,"rad":0.312746,"tex_zoom":0.179142,"r":0.82,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"xy=0.5+rand_frame;","init_eqs_eel":"","frame_eqs_eel":"xy=0.5+rand_frame;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"samples":352,"usedots":1,"additive":1,"scaling":0.038558,"smoothing":0.2,"g":0},"init_eqs_str":"a.t02=0;a.q1=0;a.ratio=0;a.ampl=0;a.x1=0;a.y1=0;","frame_eqs_str":"a.q1=a.bass_att;","point_eqs_str":"a.r=Math.abs(Math.sin(div(a.frame,38)));a.g=.5*Math.abs(Math.cos(div(a.frame,45)));a.b=.5*Math.abs(Math.sin(div(a.frame,133)));a.a=.3;a.t02+=div(a.q1,10);a.ratio=Math.sin(div(a.frame,49));a.ampl=.01+.4*sqr(Math.sin(div(a.frame,18))*Math.cos(div(a.frame,123)));a.x1=div(a.r-.5,15)+.5+a.ampl*Math.sin(6.28*a.sample);a.y1=div(a.b-.5,15)+.5+a.ampl*Math.cos(6.28*a.sample);a.x=a.x1+.2*(a.ampl+a.ratio)*Math.sin(6.28*a.sample*a.ratio*7.3);a.y=a.y1+.2*(a.ampl+a.ratio)*Math.cos(37.68*a.sample);\n","init_eqs_eel":"","frame_eqs_eel":"q1=bass_att;","point_eqs_eel":"r = abs (sin (frame /38));\ng = 0.5*abs (cos (frame /45));\nb = 0.5*abs (sin (frame / 133));\na = 0.3;\nt02 = t02 + q1/10;\nratio = sin (frame/49);\n\nampl = 0.01+0.4*sqr(sin ((frame ) / 18)* cos (frame / 123));\n\nx1 = (r-0.5)/15 +0.5 + ampl* sin (sample*6.28);\ny1 = (b-0.5)/15+0.5 + ampl* cos (sample*6.28);\n\nx =  x1+1*0.2*(ampl+ratio )*sin ( sample*6.28 * ratio*7.3);\ny =  y1+1*0.2*(ampl+ratio )*cos ( sample*6.28*6);\n"},{"baseVals":{"samples":15,"scaling":2.063781,"smoothing":0.8,"r":0.8,"g":0,"b":0.6,"a":0.9,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"samples":112,"additive":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.index2=0;a.q25=0;a.index=0;a.q18=0;a.q22=0;a.q21=0;a.q29=0;a.q6=0;a.movex=0;a.q1=0;a.dec_med=0;a.q5=0;a.index3=0;a.rott=0;a.is_beat=0;a.q23=0;a.k1=0;a.q24=0;a.dec_slow=0;a.q4=0;a.q26=0;a.p2=0;a.mov=0;a.avg=0;a.beat=0;a.p1=0;a.dx1=0;a.peak=0;a.q2=0;a.q27=0;a.clear=0;a.p3=0;a.q3=0;a.t0=0;a.rot1=0;a.q32=0;a.q28=0;a.q20=0;a.clear=.5;","frame_eqs_str":"a.dec_med=pow(.96,div(30,a.fps));a.dec_slow=pow(.99,div(30,a.fps));a.beat=Math.max(Math.max(a.bass,a.mid),a.treb);a.avg=a.avg*a.dec_slow+a.beat*(1-a.dec_slow);a.is_beat=above(a.beat,.2+a.avg+a.peak)*above(a.time,a.t0+.2);a.t0=a.is_beat*a.time+(1-a.is_beat)*a.t0;a.peak=a.is_beat*a.beat+(1-a.is_beat)*a.peak*a.dec_med;a.index=mod(a.index+a.is_beat,4);a.index2=mod(a.index2+a.is_beat*bnot(a.index),8);a.index3=mod(a.index3+a.is_beat*bnot(a.index)*bnot(a.index2),3);a.q20=a.avg;a.q21=\na.beat;a.q22=a.peak;a.q23=a.index;a.q24=a.is_beat;a.q26=a.bass+a.mid+a.treb;a.k1=a.is_beat*equal(a.index,0);a.p1=a.k1*(a.p1+1)+(1-a.k1)*a.p1;a.p2=a.dec_med*a.p2+(1-a.dec_med)*a.p1;a.p3=a.dec_med*a.p3+(1-a.dec_med)*a.p2;a.rott=div(3.1416*a.p3,4);a.rot1+=a.q26;a.q25=.01*a.rot1;a.q27=8-a.index;a.q28=a.index3;a.dx1=a.dec_med*a.dx1+(1-a.dec_med)*bnot(a.index2);a.q29=a.dx1;a.monitor=a.q29;a.q1=Math.cos(a.rott);a.q2=Math.sin(a.rott);a.q3=-a.q2;a.q4=a.q1;a.q5=1.5*Math.cos(div(a.time,9));a.q6=.5*Math.sin(div(a.time,\n7));a.clear=a.clear*a.dec_med+1-a.dec_med;a.q32=a.clear;a.mov=bnot(a.q24)*a.movex+(div(rand(100),100)-50)*a.q2;a.movex+=div(.2,a.fps)*a.q2;a.q18=a.movex;","pixel_eqs_str":"","init_eqs_eel":"clear = 0.5;","frame_eqs_eel":"dec_med = pow (0.96, 30/fps);\ndec_slow = pow (0.99, 30/fps);\nbeat = max (max (bass, mid), treb); \navg = avg*dec_slow + beat*(1-dec_slow);\nis_beat = above(beat, .2+avg+peak) * above (time, t0+.2);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\nindex = (index + is_beat) %4;\nindex2 = (index2 + is_beat*bnot(index))%8;\nindex3 = (index3 + is_beat*bnot(index)*bnot(index2))%3;\n\n\nq20 = avg;\nq21 = beat;\nq22 = peak;\nq23 = index;\nq24 = is_beat;\nq26 = bass + mid + treb;\n\n//k1 =  is_beat*bnot(index)*bnot(index2);\n\nk1 =  is_beat*equal(index,0);\np1 =  k1*(p1+1) + (1-k1)*p1;\np2 = dec_med * p2+ (1-dec_med)*p1;\np3 = dec_med * p3+ (1-dec_med)*p2;\nrott = p3*3.1416/4;\n\nrot1 = rot1 + q26;\nq25 = .01*rot1;\n\nq27 = 8-index;\nq28 = index3;\n\ndx1 = dec_med*dx1 + (1-dec_med)*bnot(index2);\nq29 = dx1;\nmonitor = q29;\n\nq1 = cos(rott);\nq2 = sin(rott);\nq3 = -q2;\nq4 = q1;\n\n\nq5 = 1.5*cos(time/9);\nq6 = .5*sin(time/7);\n\nclear = clear *dec_med + 1-dec_med;\nq32 = clear;\n\nmov = bnot(q24)*movex + (rand(100)/100-50)*q2;\nmovex = movex + .2/fps *q2;\nq18 = movex;","pixel_eqs_eel":"","warp":" shader_body { \n  vec2 uv6_1;\n  vec2 tmpvar_2;\n  tmpvar_2 = ((uv - 0.5) * aspect.xy);\n  float tmpvar_3;\n  tmpvar_3 = (rand_frame * 64.0).x;\n  uv6_1 = (0.5 * cos((\n    ((tmpvar_2 * mat2(0.7, -0.7, 0.7, 0.7)) * 17.0)\n   + \n    (rand_frame * 6.0)\n  .xy)));\n  float x_4;\n  x_4 = (uv6_1.x + uv6_1.y);\n  vec4 tmpvar_5;\n  tmpvar_5.w = 1.0;\n  tmpvar_5.xyz = ((0.147 * (\n    (texture (sampler_main, (uv + clamp ((\n      (sin(tmpvar_3) / cos(tmpvar_3))\n     * \n      normalize(tmpvar_2)\n    ), vec2(-8.0, -8.0), vec2(8.0, 8.0)))).xyz + (0.15 * (vec3((0.01 / \n      sqrt((x_4 * x_4))\n    )) * roam_cos.xyz)))\n   - 0.02)) + ((0.85 * \n    (texture (sampler_main, uv_orig).xyz - 0.002)\n  ) * q32));\n  ret = tmpvar_5.xyz;\n }","comp":"vec2 xlat_mutabledz;\nvec3 xlat_mutableret1;\nvec2 xlat_mutableuv3;\nvec2 xlat_mutableuv4;\n shader_body { \n  vec2 uv_1;\n  float inten_2;\n  float dist_3;\n  vec3 ret_4;\n  uv_1 = (uv - 0.5);\n  float tmpvar_5;\n  tmpvar_5 = (time / 2.0);\n  dist_3 = (1.0 - fract(tmpvar_5));\n  inten_2 = ((sqrt(dist_3) * (1.0 - dist_3)) * 2.0);\n  vec2 tmpvar_6;\n  tmpvar_6.y = 0.4;\n  tmpvar_6.x = q18;\n  xlat_mutableuv3 = (((2.0 * uv_1) * dist_3) + tmpvar_6);\n  vec2 tmpvar_7;\n  tmpvar_7.y = 0.0;\n  tmpvar_7.x = texsize.z;\n  vec2 tmpvar_8;\n  tmpvar_8.y = 0.0;\n  tmpvar_8.x = texsize.z;\n  xlat_mutabledz.x = (inten_2 * dot ((texture (sampler_main, \n    (xlat_mutableuv3 + tmpvar_7)\n  ).xyz - texture (sampler_main, \n    (xlat_mutableuv3 - tmpvar_8)\n  ).xyz), vec3(0.32, 0.49, 0.29)));\n  vec2 tmpvar_9;\n  tmpvar_9.x = 0.0;\n  tmpvar_9.y = texsize.w;\n  vec2 tmpvar_10;\n  tmpvar_10.x = 0.0;\n  tmpvar_10.y = texsize.w;\n  xlat_mutabledz.y = (inten_2 * dot ((texture (sampler_main, \n    (xlat_mutableuv3 + tmpvar_9)\n  ).xyz - texture (sampler_main, \n    (xlat_mutableuv3 - tmpvar_10)\n  ).xyz), vec3(0.32, 0.49, 0.29)));\n  xlat_mutableret1 = max (vec3(0.0, 0.0, 0.0), (texture (sampler_main, xlat_mutableuv3).xyz * inten_2));\n  dist_3 = (1.0 - fract((0.3333333 + tmpvar_5)));\n  inten_2 = ((sqrt(dist_3) * (1.0 - dist_3)) * 2.0);\n  vec2 tmpvar_11;\n  tmpvar_11.y = 0.4;\n  tmpvar_11.x = q18;\n  xlat_mutableuv3 = (((2.0 * uv_1) * dist_3) + tmpvar_11);\n  vec2 tmpvar_12;\n  tmpvar_12.y = 0.0;\n  tmpvar_12.x = texsize.z;\n  vec2 tmpvar_13;\n  tmpvar_13.y = 0.0;\n  tmpvar_13.x = texsize.z;\n  xlat_mutabledz.x = (xlat_mutabledz.x + (inten_2 * dot (\n    (texture (sampler_main, (xlat_mutableuv3 + tmpvar_12)).xyz - texture (sampler_main, (xlat_mutableuv3 - tmpvar_13)).xyz)\n  , vec3(0.32, 0.49, 0.29))));\n  vec2 tmpvar_14;\n  tmpvar_14.x = 0.0;\n  tmpvar_14.y = texsize.w;\n  vec2 tmpvar_15;\n  tmpvar_15.x = 0.0;\n  tmpvar_15.y = texsize.w;\n  xlat_mutabledz.y = (xlat_mutabledz.y + (inten_2 * dot (\n    (texture (sampler_main, (xlat_mutableuv3 + tmpvar_14)).xyz - texture (sampler_main, (xlat_mutableuv3 - tmpvar_15)).xyz)\n  , vec3(0.32, 0.49, 0.29))));\n  xlat_mutableret1 = max (xlat_mutableret1, (texture (sampler_main, xlat_mutableuv3).xyz * inten_2));\n  dist_3 = (1.0 - fract((0.6666667 + tmpvar_5)));\n  inten_2 = ((sqrt(dist_3) * (1.0 - dist_3)) * 2.0);\n  vec2 tmpvar_16;\n  tmpvar_16.y = 0.4;\n  tmpvar_16.x = q18;\n  xlat_mutableuv3 = (((2.0 * uv_1) * dist_3) + tmpvar_16);\n  vec2 tmpvar_17;\n  tmpvar_17.y = 0.0;\n  tmpvar_17.x = texsize.z;\n  vec2 tmpvar_18;\n  tmpvar_18.y = 0.0;\n  tmpvar_18.x = texsize.z;\n  xlat_mutabledz.x = (xlat_mutabledz.x + (inten_2 * dot (\n    (texture (sampler_main, (xlat_mutableuv3 + tmpvar_17)).xyz - texture (sampler_main, (xlat_mutableuv3 - tmpvar_18)).xyz)\n  , vec3(0.32, 0.49, 0.29))));\n  vec2 tmpvar_19;\n  tmpvar_19.x = 0.0;\n  tmpvar_19.y = texsize.w;\n  vec2 tmpvar_20;\n  tmpvar_20.x = 0.0;\n  tmpvar_20.y = texsize.w;\n  xlat_mutabledz.y = (xlat_mutabledz.y + (inten_2 * dot (\n    (texture (sampler_main, (xlat_mutableuv3 + tmpvar_19)).xyz - texture (sampler_main, (xlat_mutableuv3 - tmpvar_20)).xyz)\n  , vec3(0.32, 0.49, 0.29))));\n  xlat_mutableret1 = max (xlat_mutableret1, (texture (sampler_main, xlat_mutableuv3).xyz * inten_2));\n  dist_3 = (1.0 - fract((1.0 + tmpvar_5)));\n  inten_2 = ((sqrt(dist_3) * (1.0 - dist_3)) * 2.0);\n  vec2 tmpvar_21;\n  tmpvar_21.y = 0.4;\n  tmpvar_21.x = q18;\n  xlat_mutableuv3 = (((2.0 * uv_1) * dist_3) + tmpvar_21);\n  vec2 tmpvar_22;\n  tmpvar_22.y = 0.0;\n  tmpvar_22.x = texsize.z;\n  vec2 tmpvar_23;\n  tmpvar_23.y = 0.0;\n  tmpvar_23.x = texsize.z;\n  xlat_mutabledz.x = (xlat_mutabledz.x + (inten_2 * dot (\n    (texture (sampler_main, (xlat_mutableuv3 + tmpvar_22)).xyz - texture (sampler_main, (xlat_mutableuv3 - tmpvar_23)).xyz)\n  , vec3(0.32, 0.49, 0.29))));\n  vec2 tmpvar_24;\n  tmpvar_24.x = 0.0;\n  tmpvar_24.y = texsize.w;\n  vec2 tmpvar_25;\n  tmpvar_25.x = 0.0;\n  tmpvar_25.y = texsize.w;\n  xlat_mutabledz.y = (xlat_mutabledz.y + (inten_2 * dot (\n    (texture (sampler_main, (xlat_mutableuv3 + tmpvar_24)).xyz - texture (sampler_main, (xlat_mutableuv3 - tmpvar_25)).xyz)\n  , vec3(0.32, 0.49, 0.29))));\n  xlat_mutableret1 = max (xlat_mutableret1, (texture (sampler_main, xlat_mutableuv3).xyz * inten_2));\n  uv_1 = (uv_1 + xlat_mutabledz);\n  vec2 tmpvar_26;\n  tmpvar_26.x = q5;\n  tmpvar_26.y = q6;\n  xlat_mutableuv4 = (uv_1 - (0.4 * tmpvar_26));\n  float tmpvar_27;\n  tmpvar_27 = (0.1 * clamp ((1.0/(\n    (abs(uv_1.y) + 0.1)\n  )), 0.0, 12.0));\n  vec2 tmpvar_28;\n  tmpvar_28.x = (uv_1.x * tmpvar_27);\n  tmpvar_28.y = tmpvar_27;\n  vec3 tmpvar_29;\n  tmpvar_29.xy = vec2(0.0, 0.0);\n  tmpvar_29.z = clamp ((1.0 - (3.0 * uv_1.y)), 0.0, 1.0);\n  ret_4 = (vec3(0.0, 0.1, 0.1) + (0.1 * tmpvar_29));\n  ret_4 = (ret_4 + (vec3(dot (texture (sampler_noise_hq, \n    (tmpvar_28 + (0.1 * time))\n  ), vec4(0.32, 0.49, 0.29, 0.0))) * (\n    (clamp ((1.0 - (12.0 * uv_1.y)), 0.0, 1.0) * 0.1)\n   / \n    (0.05 + sqrt(dot (xlat_mutableuv4, xlat_mutableuv4)))\n  )));\n  ret_4 = (ret_4 + ((0.4 * xlat_mutableret1) + (xlat_mutableret1 * q22)));\n  vec4 tmpvar_30;\n  tmpvar_30.w = 1.0;\n  tmpvar_30.xyz = ret_4;\n  ret = tmpvar_30.xyz;\n }","warp_hlsl":"sampler sampler_worms;\nfloat3 color, mus;\nfloat dx,dy;\nshader_body {\nfloat2 uv1 = (uv-.5) * aspect.xy;\n\n\nfloat2 uv6 = uv1;\nfloat z = 0*length(uv1)+rand_frame * 64;\nfloat2 d = normalize(uv1);\nfloat clp = 8;\nfloat2 rs = clamp(tan(z)*d,-clp,clp);\nuv += rs;\n\nuv1 = mul(uv1,float2x2(.7,.7,-.7,.7));\n\nuv6 = .5*cos(uv1*17+rand_frame*6);\nmus = .01/(length(uv6.x+uv6.y));\nmus *= roam_cos;\n\nfloat3 crisp= tex2D(sampler_main,uv);\n\nfloat3 ret1 = crisp + .15*mus;\nq25 = q24; q25 = .15;\nret = q25*(ret1-.02)*.98 + (1-q25)* (GetPixel(uv_orig)-.002) * q32;\n}","comp_hlsl":"float3 ret1, neu, dx, dy;\nfloat2 rs,rs2,uv1,uv2, uv3,uv4,dz;\nshader_body\n{\nfloat2 uv2;\nfloat ang2, c, s;\nuv -= 0.5;\n//uv *= aspect.xy;    \ndz = 0;\nfloat2 tmp = uv;\nfloat dist = 1;\nfloat inten = 1;\nfloat mask = 0;\nret1 = 0;\nint anz = 3;\nfloat n = 0;\nwhile (n <= anz) {\n    ang2 = 6.28*n/anz*0;\n    dist = 1-frac(1.0/anz*n+time/2); //evtl sqrt !;\n\n    inten =  sqrt(dist)*(1-dist)*2;\n\n    uv3 = 2*uv*dist + float2(q18,0.4);\n    neu = GetPixel(uv3);\n    dz.x += inten*lum(GetPixel(uv3+float2(texsize.z,0)) \n          - GetPixel (uv3-float2(texsize.z,0)));\n    dz.y += inten*lum(GetPixel(uv3+float2(0,texsize.w)) \n          - GetPixel (uv3-float2(0,texsize.w)));\n    ret1 = max(ret1,neu*inten) ;\nn++;\n}\n\n\n//clouds\n//dz = dz * (abs(dz) >=.04);\n\nuv += dz;\nuv4 = uv-.4*float2 (q5,q6);\nfloat z = .1*clamp(1/(abs(uv.y)+.1),0,12);\nrs = float2(uv.x * z, z);\nfloat3 clouds = lum(tex2D (sampler_noise_hq,rs+.1*time));\nclouds *= saturate(1-12*uv.y) * 0.1/(.05+length(uv4));\n\nfloat3 sky = .1*float3 (0,0,saturate(1-3*uv.y));\nret = .1*float3(0,1,1)+ sky;\nret += clouds;\n\nret += 0.4*ret1 + ret1*q22;\n\n}"}