{"version":2,"baseVals":{"rating":3,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"additivewave":1,"wave_thick":1,"modwavealphabyvolume":1,"darken":1,"wave_a":0.005,"wave_scale":0.118,"wave_smoothing":0.9,"wave_mystery":-0.48,"modwavealphastart":0.4,"modwavealphaend":1.6,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0,"wave_g":0,"wave_b":0,"ob_size":0.15,"ob_r":0.2,"ob_g":0.2,"ob_b":0.2,"ib_size":0.1,"ib_r":0.6,"ib_g":0.6,"ib_b":0.6,"mv_x":64,"mv_y":48,"mv_l":2.5,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0,"b3x":0.7,"b1ed":0},"shapes":[{"baseVals":{"sides":34,"additive":1,"thickoutline":1,"x":0.9,"rad":0.10864,"tex_ang":1.00531,"tex_zoom":0.12726,"g":1,"b":1,"a":0,"r2":0.1,"g2":0,"b2":0.3,"border_a":0.4,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"num_inst":100,"x":0.26,"y":0.2,"rad":0.02007,"tex_zoom":0.9355,"r2":0.4,"g2":0,"a2":1,"border_g":0,"border_b":0,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":14,"num_inst":400,"x":0.65,"y":0.38,"rad":0.01645,"tex_zoom":0.73678,"r":0.6,"g":0.4,"b":1,"a":0.2,"g2":0,"a2":0.4,"border_r":0.5,"border_g":0.5,"border_b":0,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":10,"thickoutline":1,"num_inst":400,"x":0.8,"y":0.75,"rad":0.07316,"tex_zoom":1.04372,"g":1,"b2":1,"a2":1,"border_g":0.8,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"thick":1,"additive":1,"scaling":1.07408,"smoothing":0,"r":0,"g":0.5},"init_eqs_eel":"","frame_eqs_eel":"t1 = 0;\nt2 = 0;\nt3 = 0;","point_eqs_eel":"num_inst = reg00;\ninstance = t1;\n\nrx1 = gmegabuf (instance*8+5);\nrx2 = gmegabuf ((num_inst-instance-1)*8+5); //mirrored\n\nry1 = gmegabuf (instance*8+6);\nry2 = gmegabuf ((num_inst-instance-1)*8+6);//mirrored\n\nkx = 0.1* q1;\nky = 0.15 * q1;\n\n\nx0 = (rx1 - rx2)*kx * (abs (sample-0.5)*2+0);;\n\ncx = 0.75 ;\nx = x0+(1-cx)/2 + cx*sample + q13*q3 * (abs(sample-0.5)-0.);\n\n\ny0 = (ry1+ry2)*ky + .0*q13*(abs(sample-0.5)-0.3);\ny = y0+0.55;\n\n\nang1 = atan2 (x0,y0);\n\na = 0.5 + sin(ang1)/3;\n\nr = 0.5 + 0.3*sin(rx1*12+sample*12+2);\ng = 0.5 + 0.3*sin(rx2*12+sample*12+1);\nb = 0.5 + 0.3*sin(ry1*12+sample*12);\n\n\nt1 += 1;"},{"baseVals":{"samples":128,"scaling":0.89152,"smoothing":0.82,"a":0.1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"samples":32,"scaling":0.89152,"smoothing":0.82,"r":0,"g":0.2,"b":0.6,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"additive":1,"scaling":1.81669,"smoothing":0,"r":0.8,"g":0.4,"b":0.7,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"n = -10000; loop (20000, megabuf(n)=0; gmegabuf(n)=0; n +=1; );\n\nMINBPM = 35; MAXBPM = 220; num_res = 512; \nindex = 0;\nloop (num_res,\n  n = index*8;\n  BPM      = minbpm * pow(maxbpm/minbpm,index/(num_res-1));\n  megabuf(n) = BPM;\n  index += 1;\n);\n\n\n//structure of resonator data, starting at megabuf (0)\n//size = 8\n//0: BPM\n//1: v\n//2: y\n//3: amplitude\n//4: amplitude after harmonics post processing\n//5: beatcos\n//6: beatsin\n\n\npi = 3.1416;\nreg00 = num_res;","frame_eqs_eel":"dt = min (1/fps,0.1) ; //Stability !\ndec_m = 1 - 4*dt; dec_s = 1 - 1.25*dt;\nvol =  (bass+mid+treb); \n\nvol_ = vol_*dec_m + (1-dec_m)*vol; exc = vol-vol_;\nexcite = atan (exc*2)/1.6;\n\nindex=0; ratio = log(maxbpm/minbpm); maxquad = .5; meanquad = 0;\nloop (num_res,\n  n = index*8;\n  omega      =   megabuf(n) * 6.2832/60;\n  megabuf (n+1) *= 1-0.22*dt; //damping\n  EC_Steps = int (10*omega*dt)+1; \n  loop (EC_Steps, // Euler-Cauchy steps\n    megabuf (n+1) += (excite - sqr(omega)*megabuf(n + 2)) * dt/EC_Steps;\n    megabuf (n+2) += megabuf(n+1) * dt/EC_Steps);\n  beatcos  = megabuf(n+1);  \n  beatsin = megabuf(n+2)*omega; //2pi/60\n  quad     = sqrt (pow(beatsin,2) + pow(beatcos,2)) ;\n  if (maxquad < quad, maxquad = quad, 0);\n  meanquad += quad / num_res;\n  megabuf (n+3) = megabuf(n+3) *dec_s +  quad* (1-dec_s);\n  megabuf (n+4) = megabuf(n+3);\n  megabuf (n+5) = beatcos;\n  megabuf (n+6) = beatsin ;\n  index += 1;\n);\n\nn = 0; maxind = 0;\nloop (num_res,\n  scale =  (1+megabuf(n+3)/2)/3; \n  if (megabuf(n+3) > megabuf(maxind+3), maxind = n, 0);\n  gmegabuf(n+5) = megabuf(n+5) * scale;\n  gmegabuf(n+6) = megabuf(n+6) * scale;\nn+=8;);\n\n\nsig0 = sig;\nsig = megabuf(maxind+6);\ngp = (maxquad* (1+gp*0.3) > 3.5*meanquad );\nprog += (sig*sig0 <0) * gp;\nq27 = ((prog%8)/4-1);\n\ngp2 = (maxquad* (1+gp2*0.3) > 7*meanquad );\nprog2 += (sig*sig0 <0) * gp2;\nq28 = prog2/3;\nflash = if ((sig*sig0 < 0)* (maxquad > 8.5*meanquad),4, flash * 0.5) ;\nq29 = flash;\nmaxind0 = maxind;\n\nn = 0; imax = 0;\nloop (num_res,\n  q12 += megabuf(n*8+1);\n  q13 += megabuf(n*8+2);\nn+=1;);\n\nmaxquad_ = maxquad_*dec_m + (1-dec_m)*maxquad;\nq1 = sqrt(3/maxquad_);\ntr2 += maxquad_/fps;\nq2 = tr2*1.85; //vert. mov. muster\n\nq3 = 0.01; //scale x-shift shapes\n\nq32 = aspecty;\n\n\nmonitor = q15;","pixel_eqs_eel":"rot = 0; warp = 0; dy = -0.00;  dx = 0.00;\n\nzoom = 1.03;","warp":" shader_body { \n  vec3 ret_1;\n  vec4 tmpvar_2;\n  tmpvar_2.w = 1.0;\n  tmpvar_2.xyz = ret_1;\n  ret = tmpvar_2.xyz;\n }","comp":"float iter;\nvec2 xlat_mutableuv2;\nfloat xlat_mutablez;\n shader_body { \n  iter = floor((10.0 * clamp (\n    (texsize.x / 2048.0)\n  , 0.0, 1.0)));\n  vec2 uv_1;\n  uv_1 = uv;\n  float noise_3;\n  vec3 ret_4;\n  xlat_mutablez = (1.0/((uv.y - 0.2)));\n  vec2 tmpvar_5;\n  tmpvar_5.x = (xlat_mutablez * (uv.x - 0.5));\n  tmpvar_5.y = xlat_mutablez;\n  vec2 tmpvar_6;\n  tmpvar_6.x = 0.0;\n  tmpvar_6.y = q2;\n  xlat_mutableuv2 = ((tmpvar_5 + q28) + tmpvar_6);\n  noise_3 = (texture (sampler_noise_lq, xlat_mutableuv2).x - (texture (sampler_noise_lq, (xlat_mutableuv2 + \n    (texsize.z * 8.0)\n  )).x * 0.8));\n  noise_3 = (noise_3 * (1.0 - (\n    (float((texture (sampler_pw_noise_lq, (\n      (noise_3 * 0.001)\n     + \n      (xlat_mutableuv2 * vec2(0.08, 0.008))\n    )).x > 0.85)) * float((xlat_mutablez >= 0.0)))\n   / xlat_mutablez)));\n  noise_3 = (noise_3 * (float(\n    (xlat_mutablez > 0.0)\n  ) / xlat_mutablez));\n  ret_4 = texture (sampler_main, uv).xyz;\n  for (int n_2 = 1; float(n_2) < iter; n_2++) {\n    vec2 tmpvar_7;\n    tmpvar_7.y = 0.0;\n    tmpvar_7.x = float(n_2);\n    vec2 tmpvar_8;\n    tmpvar_8.y = 0.0;\n    tmpvar_8.x = float(-(n_2));\n    ret_4 = max (max (ret_4, texture (sampler_main, (uv_1 + \n      (texsize.zw * tmpvar_7)\n    )).xyz), texture (sampler_main, (uv_1 + (texsize.zw * tmpvar_8))).xyz);\n  };\n  float tmpvar_9;\n  tmpvar_9 = clamp ((1.0 - (16.0 * \n    dot (ret_4, vec3(0.32, 0.49, 0.29))\n  )), 0.0, 1.0);\n  float x_10;\n  x_10 = ((uv.y * 8.0) - (dot (ret_4, vec3(0.32, 0.49, 0.29)) * 5.0));\n  ret_4 = (ret_4 * vec3((0.1 + (0.15 / \n    sqrt((x_10 * x_10))\n  ))));\n  ret_4 = (ret_4 + ((noise_3 * tmpvar_9) / 5.0));\n  vec2 tmpvar_11;\n  tmpvar_11.y = -0.5;\n  tmpvar_11.x = (q27 + 0.5);\n  vec2 x_12;\n  x_12 = (uv - tmpvar_11);\n  float tmpvar_13;\n  tmpvar_13 = (1.0 - uv.y);\n  ret_4 = (ret_4 + ((\n    (((rand_preset / 2.0) * 2.0) * (tmpvar_13 * tmpvar_13))\n   / 4.0) * tmpvar_9).xyz);\n  ret_4 = (ret_4 + ((\n    (pow (sqrt(dot (x_12, x_12)), -2.0) * vec3(0.4, 0.8, 1.0))\n   * \n    (0.2 + noise_3)\n  ) * tmpvar_9));\n  ret_4 = (ret_4 + ((\n    (64.0 * ((texture (sampler_blur3, (\n      (tmpvar_5 * vec2(0.33, 0.16))\n     + vec2(0.5, 0.1))).xyz * scale3) + bias3))\n   * tmpvar_9) * clamp (noise_3, 0.0, 1.0)));\n  vec2 tmpvar_14;\n  tmpvar_14.y = -0.1;\n  float tmpvar_15;\n  tmpvar_15 = (q27 / 5.0);\n  tmpvar_14.x = (0.5 + tmpvar_15);\n  ret_4 = (ret_4 * (1.0 - (\n    dot (vec3(greaterThan ((\n      (texture (sampler_blur1, ((tmpvar_5 * vec2(0.5, 0.37)) + tmpvar_14)).xyz * scale1)\n     + bias1), vec3(0.02, 0.02, 0.02))), vec3(0.32, 0.49, 0.29))\n   * 0.2)));\n  vec2 tmpvar_16;\n  tmpvar_16.y = -0.1;\n  tmpvar_16.x = (0.505 + tmpvar_15);\n  ret_4 = (ret_4 * (1.0 - (\n    dot (vec3(greaterThan ((\n      (texture (sampler_blur1, ((tmpvar_5 * vec2(0.5, 0.37)) + tmpvar_16)).xyz * scale1)\n     + bias1), vec3(0.02, 0.02, 0.02))), vec3(0.32, 0.49, 0.29))\n   * 0.2)));\n  vec2 tmpvar_17;\n  tmpvar_17.y = -0.1;\n  tmpvar_17.x = (0.51 + tmpvar_15);\n  ret_4 = (ret_4 * (1.0 - (\n    dot (vec3(greaterThan ((\n      (texture (sampler_blur1, ((tmpvar_5 * vec2(0.5, 0.37)) + tmpvar_17)).xyz * scale1)\n     + bias1), vec3(0.02, 0.02, 0.02))), vec3(0.32, 0.49, 0.29))\n   * 0.2)));\n  vec4 tmpvar_18;\n  tmpvar_18.w = 1.0;\n  tmpvar_18.xyz = ret_4;\n  ret = tmpvar_18.xyz;\n }"}