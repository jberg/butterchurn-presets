{"version":2,"baseVals":{"rating":5,"gammaadj":1.56,"decay":1,"echo_zoom":0.362,"echo_orient":1,"wave_thick":1,"wave_brighten":0,"darken":1,"wave_a":0.001,"wave_scale":1.599,"wave_smoothing":0,"wave_mystery":-0.5,"modwavealphastart":2,"modwavealphaend":2,"warpscale":0.107,"zoomexp":0.1584,"fshader":1,"warp":0.01,"wave_r":0.51,"wave_g":0.5,"ob_size":0,"ob_a":1,"ib_r":0,"ib_g":0,"ib_b":0,"ib_a":1,"mv_x":64,"mv_y":48,"mv_l":0.5,"mv_r":0,"mv_g":0,"mv_b":0,"mv_a":0},"shapes":[{"baseVals":{"sides":100,"thickoutline":1,"rad":0.50126,"tex_zoom":0.99996,"g":1,"b":1,"r2":1,"g2":0,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"x = 0.5+sin(time*0.618)*0.2;\ny = 0.5+cos(time*1.618)*0.2;\nrad = bass*0.05;\nborder_r = 1-(sin(time*1.25)*0.3+0.7);\nborder_g = 1-(sin(time)*0.3+0.3);\nborder_b = 1-(sin(time/3)*0.5+0.5);"},{"baseVals":{"sides":100,"thickoutline":1,"rad":0.50126,"g":1,"b":1,"g2":0,"b2":1,"border_g":0,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"x = 0.5+sin(time*2.618)*0.3;\ny = 0.5+cos(time*3.14)*0.3;\nrad = bass*0.05;\nborder_r = 1-(sin(time*1.25)*0.3+0.7);\nborder_g = 1-(sin(time)*0.3+0.3);\nborder_b = 1-(sin(time/3)*0.5+0.5);\n"},{"baseVals":{"sides":100,"thickoutline":1,"rad":0.50126,"tex_zoom":0.9998,"g":1,"b":1,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"x = 0.5+sin(-time*2.618)*0.4;\ny = 0.5+cos(-time*1.14)*0.4;\nrad = bass*0.05;\nborder_r = 1-(sin(time*1.25)*0.3+0.7);\nborder_g = 1-(sin(time)*0.3+0.3);\nborder_b = 1-(sin(time/3)*0.5+0.5);"},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"scaling":0.16188,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"thick":1,"additive":1,"scaling":25.12601,"smoothing":1,"a":0.1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"q11 = 0.5/asin(1);","frame_eqs_eel":"//zoom = 0.99;\nib_r = sin(time*1.25*4)*0.3+0.7;\nib_g = sin(time*4)*0.3+0.3;\nib_b = sin(time/3*4)*0.5+0.5;\n\nxx1 = xx1*0.9 + (bass)*0.01;\nxx2 = xx2*0.9 + (treb)*0.01;\nyy1 = yy1*0.94 + (treb+bass)*0.0075;\n\nx1 = 0.5 + (xx1-xx2)*3;\ny1 = 0.4 + yy1;\n\nx1 = max(0,min(1,x1)); y1 = max(0,min(1,y1));\n\nspring = 25;\ngrav = 1.1;\nresist = 1;\nbounce = 0.85;\ndt = 0.0002*(60/fps);\n\nvx2 = vx2*(1-resist*dt) + dt*((x1+x3-2*x2)*spring);\nvy2 = vy2*(1-resist*dt) + dt*((y1+y3-2*y2)*spring-grav);\nvx3 = vx3*(1-resist*dt) + dt*((x2+x4-2*x3)*spring);\nvy3 = vy3*(1-resist*dt) + dt*((y2+y4-2*y3)*spring-grav);\nvx4 = vx4*(1-resist*dt) + dt*((x3-x4)*spring);\nvy4 = vy4*(1-resist*dt) + dt*((y3-y4)*spring-grav);\n\nx2 = x2 + vx2;\ny2 = y2 + vy2;\nx3 = x3 + vx3;\ny3 = y3 + vy3;\nx4 = x4 + vx4;\ny4 = y4 + vy4;\n\nvx2 = if(above(x2,0),vx2,abs(vx2)*bounce);\nvx2 = if(below(x2,1),vx2,-abs(vx2)*bounce);\nvx3 = if(above(x3,0),vx3,abs(vx3)*bounce);\nvx3 = if(below(x3,1),vx3,-abs(vx3)*bounce);\nvx4 = if(above(x4,0),vx4,abs(vx4)*bounce);\nvx4 = if(below(x4,1),vx4,-abs(vx4)*bounce);\nvy2 = if(above(y2,0),vy2,abs(vy2)*bounce);\nvy2 = if(below(y2,1),vy2,-abs(vy2)*bounce);\nvy3 = if(above(y3,0),vy3,abs(vy3)*bounce);\nvy3 = if(below(y3,1),vy3,-abs(vy3)*bounce);\nvy4 = if(above(y4,0),vy4,abs(vy4)*bounce);\nvy4 = if(below(y4,1),vy4,-abs(vy4)*bounce);\nq4 = x4;\nq8 = y4;\n\nq1 = aspectx;\nq2 = aspecty;\n\nzoom = 1;\nwarp = 0;\nbb = bb*0.99 + bass*0.02;\nmm = mm*0.99 + mid*0.02;\ntt = tt*0.99 + treb*0.02;\n\nmx = max(max(bb,mm),tt);\nmn = min(min(bb,mm),tt);\n\nob_r = (bb-mn)/(mx-mn);\nob_b = (mm-mn)/(mx-mn);\nob_g = (tt-mn)/(mx-mn);\nq6 = atan2(vx4,vy4);\nq5 = sqrt(vx4*vx4 + vy4*vy4);\n\na = a*0.95 + q5;\n\ns = s*0.9 + a;\nq3 = s*0.1;\nt = t + 0.1/fps;\nt = if(above(t,2),t-2,t);\nq12 = -t;\nmonitor = t;\nwave_a = 0;","pixel_eqs_eel":"x = 0.5 + (x-0.5)*q1;\ny = 0.5 + (y-0.5)*q2;\n\ndir = -q6*1 + asin(1)*0;\n\nxx = q4;\nyy = 1-q8;\n\ndx = 0; dy = 0;\n\nd = sqrt((x-xx)*(x-xx)+(y-yy)*(y-yy));\n\nr = 0.08;\nv = -15*q5;\ndx = v*sin(dir)*(r-d)*(1-sigmoid(d-r,200))*q2;\ndy = v*cos(dir)*(r-d)*(1-sigmoid(d-r,200))*q1;","warp":" shader_body { \n  vec3 tmpvar_1;\n  vec4 tmpvar_2;\n  tmpvar_2 = texture (sampler_main, uv);\n  tmpvar_1 = vec3((((tmpvar_2.x + tmpvar_2.y) + tmpvar_2.z) * 0.33333));\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = ((texture (sampler_main, clamp (\n    (uv - ((vec2(0.0, 0.0168) * (tmpvar_1 - 0.35).xy) * (tmpvar_1 - 0.4).xy))\n  , 0.0, 1.0)).xyz - 0.001) + ((texture (sampler_noise_lq, \n    (((uv_orig * texsize.xy) * (texsize_noise_lq.zw * 2.0)) + rand_frame.xy)\n  ) - 0.5) * 0.04).xyz);\n  ret = tmpvar_3.xyz;\n }","comp":" shader_body { \n  vec2 tmpvar_1;\n  tmpvar_1 = ((uv - 0.5).yx * aspect.zw);\n  float tmpvar_2;\n  float tmpvar_3;\n  tmpvar_3 = (min (abs(\n    (tmpvar_1.x / tmpvar_1.y)\n  ), 1.0) / max (abs(\n    (tmpvar_1.x / tmpvar_1.y)\n  ), 1.0));\n  float tmpvar_4;\n  tmpvar_4 = (tmpvar_3 * tmpvar_3);\n  tmpvar_4 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_4) + 0.05368138) * tmpvar_4) - 0.1173503)\n     * tmpvar_4) + 0.1938925) * tmpvar_4) - 0.3326756)\n   * tmpvar_4) + 0.9999793) * tmpvar_3);\n  tmpvar_4 = (tmpvar_4 + (float(\n    (abs((tmpvar_1.x / tmpvar_1.y)) > 1.0)\n  ) * (\n    (tmpvar_4 * -2.0)\n   + 1.570796)));\n  tmpvar_2 = (tmpvar_4 * sign((tmpvar_1.x / tmpvar_1.y)));\n  if ((abs(tmpvar_1.y) > (1e-08 * abs(tmpvar_1.x)))) {\n    if ((tmpvar_1.y < 0.0)) {\n      if ((tmpvar_1.x >= 0.0)) {\n        tmpvar_2 += 3.141593;\n      } else {\n        tmpvar_2 = (tmpvar_2 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_2 = (sign(tmpvar_1.x) * 1.570796);\n  };\n  vec2 tmpvar_5;\n  tmpvar_5.x = (tmpvar_2 * q11);\n  tmpvar_5.y = (((0.5 * \n    log(sqrt(dot (tmpvar_1, tmpvar_1)))\n  ) - (tmpvar_2 * q11)) + q12);\n  vec4 tmpvar_6;\n  tmpvar_6.w = 1.0;\n  tmpvar_6.xyz = pow (texture (sampler_main, (0.5 + (\n    (0.5 - abs(((\n      fract((tmpvar_5 * 0.5))\n     * 2.0) - 1.0)))\n   * vec2(0.96, 1.0)))).xyz, vec3(0.618034, 0.618034, 0.618034));\n  ret = tmpvar_6.xyz;\n }"}