{"version":2,"baseVals":{"rating":0,"gammaadj":1.980001,"decay":0.5,"echo_zoom":0.999998,"echo_alpha":0.5,"echo_orient":3,"wave_mode":6,"additivewave":1,"wave_thick":1,"modwavealphabyvolume":1,"wave_brighten":0,"wrap":0,"darken":1,"wave_a":0.001,"wave_scale":2.103075,"wave_smoothing":0.54,"wave_mystery":0.38,"modwavealphastart":0.81,"modwavealphaend":1.4,"warpanimspeed":1.4595,"warpscale":2.0067,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0,"wave_g":0,"wave_b":0,"ob_size":0,"ob_b":1,"ob_a":0.3,"ib_size":0.26,"mv_x":64,"mv_y":48,"mv_l":1.85,"mv_r":0.4999,"mv_g":0.4999,"mv_b":0.4999,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"sides":18,"textured":1,"rad":0.154155,"tex_ang":3.769911,"tex_zoom":5.277839,"g":1,"b":1,"a":0.7,"r2":1,"b2":1,"border_b":0,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"tex_ang = 3+2*q1;"},{"baseVals":{"sides":32,"rad":0.06892,"tex_zoom":1.831505,"g":1,"b":1,"a":0.9,"g2":0,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"a = q24/2; a2 = 0;\n\nr = rand(10)/10;\ng = rand(10)/10;\nb = rand(10)/10;\n\nrad = .06*q22;"},{"baseVals":{"sides":63,"x":0.123,"y":0,"rad":0.273185,"tex_zoom":0.499805,"g":1,"b":1,"r2":1,"b2":1,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"x = .5 + .1* sin (time*73);\ny = .5 + .1* sin (time*23);\n\nr = 0; g = 0; b = 0;\nr2 = 1; g2 = 1; b2 = 1;\n\nrad = mid_att/100;\na = .7;\na2 = a;"},{"baseVals":{"y":0.51,"rad":0.198688,"tex_ang":1.00531,"tex_zoom":0.499805,"g":0.4,"a":0.7,"r2":1,"b2":1,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"x = 0.05 + rand(900)/1000;\ny = 0.05 + rand(900)/1000;\n"}],"waves":[{"baseVals":{"enabled":1,"samples":128,"additive":1,"scaling":0.891519,"smoothing":0,"g":0,"b":0},"init_eqs_eel":"t1 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt2 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt3 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt4 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt5 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt6 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt7 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt8 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\n","frame_eqs_eel":"","point_eqs_eel":"x = sample ;\ny = .5+ value2*.01;\n\na = 1*q24*((q27+1)%2);\n\nr = .5+.5*sin(time/5);\ng = .5+.5*sin(time/6);\nb = .5+.5*sin(time/13);"},{"baseVals":{"enabled":1,"samples":128,"thick":1,"scaling":0.891519,"smoothing":0,"r":0,"g":0,"a":0.1},"init_eqs_eel":"t","frame_eqs_eel":"","point_eqs_eel":"y = sample ;\nx = .5+ value2*0.01;\n\na = 1*q24*(q27%2);\n\nr = .5+.5*sin(time/7);\ng = .5+.5*sin(time/9);\nb = .5+.5*sin(time/11);"},{"baseVals":{"thick":1,"scaling":0.891519,"smoothing":0.82,"a":0.1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"usedots":1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"ra = .8;\nrb = .5;\npib = 6.28318530718;\n\n\ntic = min(time-tin,.1);\ntin = if(equal(sample,0),time,tin);\n\nmod = 1.5 + .5*sin(time*.15);\nmed = 1.5 + .5*sin(time*.134);\nmed = 5;\namod = 3;\n\nvr = rand(10001)*.0001;\nrb = rb + rand(10001)*.0001*.1;\n\na = vr;\n\nsa = vr*pib*.5;\nsp = sa*mod + q1*1.3;\nsam = sa*med - q1*.219;\n\nox = ra*sin(sam*pib);\noy = ra*cos(sam*pib);\nox = ox + rb*-cos(sp)*sin(sam*pib);\noz = rb*-sin(sp);\noy = oy + rb*-cos(sp)*cos(sam*pib);\n\n\nxang = time*.132;\nxang = q2;\nyang = time*.153;\nyang = q3;\nzang = time*.110;\nzang = q4;\nfov = 0.6 + 0.2*sin(time);\nfov = .5;\n\nmx = ox*cos(zang) - oy*sin(zang);\nmy = ox*sin(zang) + oy*cos(zang);\nox = mx;\noy = my;\nmx = ox*cos(yang) + oz*sin(yang);\nmz = -ox*sin(yang) + oz*cos(yang);\nox = mx;\noz = mz;\nmy = oy*cos(xang) - oz*sin(xang);\nmz = oy*sin(xang) + oz*cos(xang);\noy = my;\noz = mz;\n\noz = oz - 2;\nx = ox*fov/oz + 0.5;\nx = (x-.5)*0.75 + 0.5;\ny = oy*fov/oz + 0.5;\n"}],"init_eqs_eel":"prox = 1;","frame_eqs_eel":"dec_med = pow (0.8, 30/fps);\ndec_slow = pow (0.95, 30/fps);\n//dec_xlow = pow (0.999, 30/fps);\nbeat = max (max (bass, mid), treb);\navg = avg*dec_slow + beat*(1-dec_slow);\nis_beat = above(beat, .2+avg+peak) * above (time, t0+.2);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\nindex = (index + is_beat) %32;\nindex2 = (index2 + is_beat*bnot(index))%4;\n\nq22 = peak;\nq24 = is_beat;\nq26 = bass_att + mid_att + treb_att;\nvol = vol*dec_med + (1-dec_med)*q26;\nq27 = index + 1;\nq28 = index2 +1;\n\np2 = .3*sin(time) + .3*cos(time/3);\n//*****tunnel tilting\nq1 = cos(p2 * 3.1416/4);\nq2 = sin(p2 * 3.1416/4);\nq3 = -q2;\nq4 = q1;\n\n//****tunnel viewpoint x,y\nvtrig = is_beat * bnot(index%2);\nvx = vx * bnot(vtrig) + vtrig * (rand(100)/100-.5);\nvy = vy * bnot(vtrig) + vtrig * (rand(100)/100-.5);\nvx = vx* below(index%15,5); //###\nvy = vy* below(index%15,5);\nq5 = vx*10;\nq6 = vy*12;\n\n//***tunnel width\nq21 = (1+sin(time/12))/8+.01;\n\n//**floor proximity\nprox = prox - above(vy,.3)*prox*2;\nq32 = .5 + .2*prox;\nmonitor = prox;\n\n//****tunnel rotation\nrota = rota +.01*below(index%16,8)/fps*30;\nrota1 = rota1*dec_med + (1-dec_med)*rota;\nq7 = rota1;\n\n//****tunnel speed\nmovez = movez + 1.2/(1+abs(vx)+abs(vy))/fps;\nq8 = movez * (1+q21/4);\n//dyn. Aenderung von q21 bewirkt auch Richt.wechsel\n\n//***********************\ntrig1= q24*bnot(index%12);\ntrig2= q24*bnot((index+4)%12);\ntrig3= q24*bnot((index+8)%12);\ntrel = trel + vol/fps;\nz0 = 1;\nspeed = vol/2;\nhx = sin(trel);\nhy = cos(trel);\n\np1z = bnot(trig1)* (p1z + (5+p1z)*speed/fps)+trig1*z0;\np1z = max(p1z,.1);\nq9 = hx/(p1z);\nq10 = hy/(p1z);\nq11 = p1z;\nq12 = .1+.02*q26*bnot((index+2)%3)*p1z*exp(-p1z/100);\n\np2z = bnot(trig2)* (p2z + (5+p2z)*speed/fps)+trig2*z0;\np2z = max(p2z,.1);\nq13 = 2*hx/(p2z);\nq14 = -.5*hy/(p2z);\nq15 = p2z;\nq16 = .1+.02*q26*bnot((index+2)%3)*p2z*exp(-p2z/100);\n\n\np3z = bnot(trig3)* (p3z + (5+p3z)*speed/fps)+trig3*z0;\np3z = max(p3z,.1);\nq17 = -1.4*hx/(p3z);\nq18 = 2*hy/(p3z);\nq19 = p3z;\nq20 = .1+.02*q26*bnot((index+2)%3)*p3z*exp(-p3z/100);","pixel_eqs_eel":"","warp":" shader_body { \n  vec2 uv6_1;\n  vec2 uv1_2;\n  vec2 tmpvar_3;\n  tmpvar_3 = (uv - 0.5);\n  float x_4;\n  x_4 = (abs(tmpvar_3.x) - abs(tmpvar_3.y));\n  float tmpvar_5;\n  tmpvar_5 = (14.0 * sqrt((x_4 * x_4)));\n  uv1_2 = (tmpvar_3 - (clamp (\n    ((sin(tmpvar_5) / cos(tmpvar_5)) * normalize(tmpvar_3))\n  , vec2(-2.0, -2.0), vec2(2.0, 2.0)) / 40.0));\n  uv6_1 = (0.4 * cos((uv1_2 * 4.0)));\n  vec4 tmpvar_6;\n  tmpvar_6.w = 1.0;\n  tmpvar_6.xyz = (((texture (sampler_main, \n    ((uv1_2 * ((0.95 - \n      (q28 / 16.0)\n    ) + (0.4 * tmpvar_5))) + 0.5)\n  ).xyz + \n    (vec3((0.003 / sqrt(dot (uv6_1, uv6_1)))) * (1.0 + roam_cos).xyz)\n  ) * 0.99) - 0.025);\n  ret = tmpvar_6.xyz;\n }","comp":"vec2 xlat_mutableKugel1;\nvec2 xlat_mutableKugel2;\nfloat xlat_mutablerad1;\nfloat xlat_mutablerad2;\nfloat xlat_mutablerad3;\nvec3 xlat_mutableret2;\nvec2 xlat_mutablers;\nvec2 xlat_mutablers0;\nvec2 xlat_mutablersk;\nvec2 xlat_mutablerss;\nvec2 xlat_mutablerss0;\nvec2 xlat_mutableuv2;\nvec2 xlat_mutableuv4;\n shader_body { \n  vec2 uv_1;\n  float z_2;\n  vec3 dots_3;\n  vec2 uv1_4;\n  vec3 ret_5;\n  mat2 tmpvar_6;\n  tmpvar_6[uint(0)] = _qa.xy;\n  tmpvar_6[1u] = _qa.zw;\n  uv_1 = ((uv * aspect.xy) * tmpvar_6);\n  vec2 tmpvar_7;\n  tmpvar_7.x = q5;\n  tmpvar_7.y = q6;\n  uv_1 = (uv_1 - (0.1 * tmpvar_7));\n  vec2 tmpvar_8;\n  tmpvar_8 = (uv_1 - 0.5);\n  vec2 tmpvar_9;\n  tmpvar_9.x = q9;\n  tmpvar_9.y = q10;\n  xlat_mutablersk = (tmpvar_8 + tmpvar_9);\n  vec2 tmpvar_10;\n  tmpvar_10 = normalize(xlat_mutablersk);\n  xlat_mutablerad1 = (q11 * sqrt(dot (xlat_mutablersk, xlat_mutablersk)));\n  xlat_mutableuv4 = ((sin(xlat_mutablerad1) / cos(xlat_mutablerad1)) * tmpvar_10);\n  xlat_mutableKugel1 = (xlat_mutableuv4 * clamp ((8.0 - \n    (8.0 * xlat_mutablerad1)\n  ), 0.0, 1.0));\n  vec2 tmpvar_11;\n  tmpvar_11.x = q13;\n  tmpvar_11.y = q14;\n  xlat_mutablersk = (tmpvar_8 + tmpvar_11);\n  vec2 tmpvar_12;\n  tmpvar_12 = normalize(xlat_mutablersk);\n  xlat_mutablerad2 = (q15 * sqrt(dot (xlat_mutablersk, xlat_mutablersk)));\n  xlat_mutableuv4 = ((sin(xlat_mutablerad2) / cos(xlat_mutablerad2)) * tmpvar_12);\n  xlat_mutableKugel2 = (xlat_mutableuv4 * clamp ((8.0 - \n    (8.0 * xlat_mutablerad2)\n  ), 0.0, 1.0));\n  vec2 tmpvar_13;\n  tmpvar_13.x = q17;\n  tmpvar_13.y = q18;\n  xlat_mutablersk = (tmpvar_8 + tmpvar_13);\n  vec2 tmpvar_14;\n  tmpvar_14 = normalize(xlat_mutablersk);\n  xlat_mutablerad3 = (q19 * sqrt(dot (xlat_mutablersk, xlat_mutablersk)));\n  xlat_mutableuv4 = ((sin(xlat_mutablerad3) / cos(xlat_mutablerad3)) * tmpvar_14);\n  uv1_4 = (tmpvar_8 + ((\n    (xlat_mutableKugel2 + xlat_mutableKugel1)\n   + \n    (xlat_mutableuv4 * clamp ((8.0 - (8.0 * xlat_mutablerad3)), 0.0, 1.0))\n  ) * 0.2));\n  float tmpvar_15;\n  float tmpvar_16;\n  tmpvar_16 = (min (abs(\n    (uv1_4.x / uv1_4.y)\n  ), 1.0) / max (abs(\n    (uv1_4.x / uv1_4.y)\n  ), 1.0));\n  float tmpvar_17;\n  tmpvar_17 = (tmpvar_16 * tmpvar_16);\n  tmpvar_17 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_17) + 0.05368138) * tmpvar_17) - 0.1173503)\n     * tmpvar_17) + 0.1938925) * tmpvar_17) - 0.3326756)\n   * tmpvar_17) + 0.9999793) * tmpvar_16);\n  tmpvar_17 = (tmpvar_17 + (float(\n    (abs((uv1_4.x / uv1_4.y)) > 1.0)\n  ) * (\n    (tmpvar_17 * -2.0)\n   + 1.570796)));\n  tmpvar_15 = (tmpvar_17 * sign((uv1_4.x / uv1_4.y)));\n  if ((abs(uv1_4.y) > (1e-08 * abs(uv1_4.x)))) {\n    if ((uv1_4.y < 0.0)) {\n      if ((uv1_4.x >= 0.0)) {\n        tmpvar_15 += 3.141593;\n      } else {\n        tmpvar_15 = (tmpvar_15 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_15 = (sign(uv1_4.x) * 1.570796);\n  };\n  xlat_mutablerss0.x = (tmpvar_15 / 3.1416);\n  xlat_mutablerss0.y = ((0.1 * q21) / sqrt(dot (uv1_4, uv1_4)));\n  vec2 tmpvar_18;\n  tmpvar_18.x = xlat_mutablerss0.x;\n  tmpvar_18.y = (xlat_mutablerss0.y + time);\n  xlat_mutablerss = (tmpvar_18 * mat2(0.7, -0.7, 0.7, 0.7));\n  vec4 tmpvar_19;\n  tmpvar_19 = vec4(greaterThanEqual ((texture (sampler_pw_noise_lq, \n    (xlat_mutablerss / 32.0)\n  ) - 0.5), vec4(0.0, 0.0, 0.0, 0.0)));\n  vec2 tmpvar_20;\n  tmpvar_20 = abs((fract(\n    (xlat_mutablerss * 8.0)\n  ) - 0.5));\n  vec2 tmpvar_21;\n  tmpvar_21.x = xlat_mutablerss0.x;\n  tmpvar_21.y = (xlat_mutablerss0.y + (time / 4.0));\n  xlat_mutablerss = (tmpvar_21 * mat2(0.7, -0.7, 0.7, 0.7));\n  vec2 tmpvar_22;\n  tmpvar_22 = abs((fract(\n    (xlat_mutablerss * 8.0)\n  ) - 0.5));\n  dots_3 = (vec3((clamp (\n    (0.04 / sqrt(dot (tmpvar_20, tmpvar_20)))\n  , 0.0, 1.0) * tmpvar_19.x)) + (clamp (\n    (0.02 / sqrt(dot (tmpvar_22, tmpvar_22)))\n  , 0.0, 1.0) * vec4(\n    greaterThanEqual ((texture (sampler_pw_noise_lq, (xlat_mutablerss / 32.0)) - 0.5), vec4(0.0, 0.0, 0.0, 0.0))\n  ).x));\n  dots_3 = (dots_3 * clamp ((0.2 / \n    abs(xlat_mutablerss0.y)\n  ), 0.0, 1.0));\n  dots_3 = (dots_3 * (dots_3 * 0.6));\n  float tmpvar_23;\n  tmpvar_23 = (q32 / (uv1_4.y - 0.02));\n  float tmpvar_24;\n  tmpvar_24 = clamp ((4.0 / tmpvar_23), 0.0, 1.0);\n  xlat_mutablers0.x = (uv1_4.x * tmpvar_23);\n  xlat_mutablers0.y = (tmpvar_23 / 4.0);\n  xlat_mutablers.x = xlat_mutablers0.x;\n  xlat_mutablers.y = (xlat_mutablers0.y + (q8 * 3.0));\n  vec3 tmpvar_25;\n  tmpvar_25 = vec3((dot (texture (sampler_pw_noise_lq, (0.02 * xlat_mutablers)), vec4(0.32, 0.49, 0.29, 0.0)) - 0.5));\n  z_2 = (0.2 / (sqrt(\n    dot (uv1_4, uv1_4)\n  ) - q21));\n  xlat_mutableuv2.y = (z_2 + q8);\n  xlat_mutableuv2.x = (xlat_mutablerss0.x + q7);\n  ret_5 = (max ((\n    (texture (sampler_main, fract(xlat_mutableuv2)) / z_2)\n  .xyz * \n    (1.0 - (0.5 * tmpvar_24))\n  ), (tmpvar_25 * tmpvar_24)) + dots_3);\n  ret_5 = (ret_5 + ((\n    abs((((\n      (inversesqrt(xlat_mutablerad1) * tmpvar_10.x)\n     * roam_sin).xyz + (\n      (inversesqrt(xlat_mutablerad2) * tmpvar_12.y)\n     * roam_sin.xzy)) + ((\n      inversesqrt(xlat_mutablerad3)\n     * tmpvar_14.x) * roam_sin.zyx)))\n   * \n    (0.2 + (tmpvar_25 * tmpvar_24))\n  ) * (q22 * 2.0)));\n  xlat_mutableret2 = (vec3(clamp ((\n    (((0.02 * q22) * q21) / sqrt(dot (uv1_4, uv1_4)))\n   * \n    dot (texture (sampler_main, (uv1_4 + 0.5)), vec4(0.32, 0.49, 0.29, 0.0))\n  ), 0.0, 1.0)) / (sqrt(\n    dot (uv1_4, uv1_4)\n  ) + 0.02));\n  float tmpvar_26;\n  tmpvar_26 = dot (xlat_mutableret2, vec3(0.32, 0.49, 0.29));\n  vec3 tmpvar_27;\n  tmpvar_27.x = 1.0;\n  tmpvar_27.y = tmpvar_26;\n  tmpvar_27.z = (tmpvar_26 / 2.0);\n  ret_5 = (ret_5 + (tmpvar_26 * tmpvar_27));\n  vec4 tmpvar_28;\n  tmpvar_28.w = 1.0;\n  tmpvar_28.xyz = ret_5;\n  ret = tmpvar_28.xyz;\n }"}