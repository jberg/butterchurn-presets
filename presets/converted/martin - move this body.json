{"version":2,"baseVals":{"rating":0,"gammaadj":1.780001,"decay":0.5,"echo_zoom":0.999998,"echo_alpha":0.5,"echo_orient":3,"wave_mode":6,"additivewave":1,"wave_thick":1,"modwavealphabyvolume":1,"wave_brighten":0,"darken":1,"wave_a":0.3116,"wave_scale":1.22891,"wave_smoothing":0,"wave_mystery":0.2,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpanimspeed":1.4595,"warpscale":2.0067,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0,"wave_g":0,"wave_b":0,"ob_r":0.3999,"ob_b":0.5,"ib_size":0,"mv_x":12.799999,"mv_y":9.600006,"mv_l":0.05,"mv_b":0.4999,"mv_a":0,"b1x":0.6999,"b1ed":0},"shapes":[{"baseVals":{"sides":100,"x":0.4999,"rad":0.143922,"tex_zoom":4.574821,"g":1,"b":1,"a":0.1,"r2":0.84,"g2":0.93,"b2":1,"border_r":0.8,"border_g":0,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":1,"sides":63,"additive":1,"rad":1.998625,"tex_zoom":0.499805,"g":1,"b":1,"a":0.1,"r2":1,"b2":1,"a2":0.6,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0},"init_eqs_eel":"","frame_eqs_eel":"\ntrel = time/2+q20;\n\nx = .5+sin(trel);\ny = .5+cos(trel*1.3 +q28/3);\nrad = .03;\na = q26/4+.2;  a2 = 0;\na = .3;"},{"baseVals":{"sides":63,"textured":1,"x":0.123,"y":0,"rad":0.273185,"tex_zoom":0.499805,"g":1,"b":1,"r2":1,"b2":1,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":63,"textured":1,"y":1,"rad":0.548217,"tex_zoom":0.499805,"g":1,"b":1,"r2":1,"b2":1,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"thick":1,"scaling":0.891519,"smoothing":0.82,"a":0.6},"init_eqs_eel":"","frame_eqs_eel":"t1 = 1*cos(time/3);\nt2 = 1*sin(time/7);\n\nvol = mid_att + treb_att;\nvol_m = vol_m*0.999+vol*0.001;\nexc = above (vol, vol_m*1.1);\n\npulse = 0.95*pulse + 0.05*exc;\nwinkel = winkel + pulse/3;\nt3 = winkel;\n\n\n","point_eqs_eel":"  //Alle Funktionen muessen rel. zu t_rel sein\n\n\nt_abs = sample;\nt_rel = sample-time/6;\nampl = sin(t_abs*3)-0.0;\n\nox = 3*sin (time) + ampl*(sin (t_rel*267)) ;\noy = 3*cos (time) + ampl*(cos (t_rel*277)) ;\noz = 0*cos (t_rel*time/23)+t_abs*4 ;\n\n\nr = (1+sqr(sin(t_rel*3.4)))/2;\ng = (1+sqr(sin(t_rel*2.3)))/2;\nb = (1+sqr (cos(t_rel*.9)))/2;\n\na = .1;\n\nxang = t2+t3/3;\nyang = t1*t2-t3/4;\nzang = t3;\nfov = 0.2;\n\n\n// Rotation um x,y,z\n\nmx = ox*cos(zang) - oy*sin(zang);\nmy = ox*sin(zang) + oy*cos(zang);\n\nox = mx;\noy = my;\nmx = ox*cos(yang) + oz*sin(yang);\nmz = -ox*sin(yang) + oz*cos(yang);\nox = mx;\noz =  mz;\nmy = oy*cos(xang) - oz*sin(xang);\nmz = oy*sin(xang) + oz*cos(xang);\noy = my;\noz = mz;\n\noz = oz - 6;\nx = ox*fov/oz +0.5;\n//x = (x-.5)*0.75 + 0.5;\ny = oy*fov/oz + 0.5;\n"},{"baseVals":{"samples":232,"usedots":1,"additive":1,"scaling":0.891519,"smoothing":0.82,"a":0.1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"t1 = 2*sin(time/15);\nt2 = 2*sin(time/11);\nmonitor = time;","point_eqs_eel":"\nt_abs = sample;\nt_rel = sample-time/5;\nampl = time;\n\nox = ampl*10*sin (t_abs*68);\noy = ampl*10*cos (t_abs*28);\noz = ampl*10*cos (t_abs*128);\n\n\nr = sin(t_abs*1335)+1;\ng = sin(t_abs*1783)+1 ;\nb = rand(5)/5 ;\n\na=0.5+0.25 * sin(t_rel*15);\nxang = t1 ;\nyang = t1;\nzang = t1;\nfov = 0.12;\n\n\n// Rotation um x,y,z\n\nmx = ox*cos(zang) - oy*sin(zang);\nmy = ox*sin(zang) + oy*cos(zang);\n\nox = mx;\noy = my;\nmx = ox*cos(yang) + oz*sin(yang);\nmz = -ox*sin(yang) + oz*cos(yang);\nox = mx;\noz = mz;\nmy = oy*cos(xang) - oz*sin(xang);\nmz = oy*sin(xang) + oz*cos(xang);\noy = my;\noz = mz;\n\noz = oz - 6;\nx = ox*fov/oz +0.5;\n//x = (x-.5)*0.75 + 0.5;\ny = oy*fov/oz + 0.5;"},{"baseVals":{"scaling":0.891519,"smoothing":0.82,"a":0.1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"ampl = time - int(time);\naml = ampl/2;\nx = .5 + ampl * sin(sample*230);\ny = .5 + ampl * cos(sample*230);\na = .03;"},{"baseVals":{"spectrum":1,"usedots":1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"","frame_eqs_eel":"dec_med = pow (0.8, 30/fps);\ndec_slow = pow (0.99, 30/fps);\nbeat = max (max (bass, mid), treb);\navg = avg*dec_slow + beat*(1-dec_slow);\nis_beat = above(beat, .2+avg+peak) * above (time, t0+.2);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\nindex = (index + is_beat) %8;\nindex2 = (index2 + is_beat*bnot(index))%2;\nindex3 = (index3 + is_beat*bnot(index)*bnot(index2))%3;\n\nmonitor = index4;\n\nq20 = avg;\nq21 = beat;\nq22 = peak;\nq23 = index;\nq24 = is_beat;\nq26 = bass + mid + treb;\nq11 = min(q22,3);\n\n//k1 =  is_beat*bnot(index)*bnot(index2);\n\nk1 =  is_beat*equal(index,0);\np1 =  k1*(p1+1) + (1-k1)*p1;\np2 = dec_med * p2+ (1-dec_med)*p1;\nrott = p2 * 3.14159265359/2;\n\nq27 = 8-index;\nq28 = index2;\n\nq1 = cos(rott);\nq2 = sin(rott);\nq3 = -q2;\nq4 = q1;\n\nrota = rota*dec_med + (1-dec_med)*q22/2;\n\nzoom = 1.0 + .02*q1;\nrot = .01*q2+rota/12*q2;\ndx = .02*q1;\ndy = .02*q2;\n\nwave_a = 0;\n\nmovex = movex + dx;\nmovey = movey + dy;\nmovez = movez + zoom-1;\nq16 = rota;\nq17 = movez;\nq18 = movex; q19 = movey;","pixel_eqs_eel":"","warp":" shader_body { \n  vec2 tmpvar_1;\n  tmpvar_1 = (0.1 * sin((12.0 * uv)));\n  vec4 tmpvar_2;\n  tmpvar_2.w = 1.0;\n  tmpvar_2.xyz = (((\n    (0.0 / sqrt(dot (tmpvar_1, tmpvar_1)))\n   * q24) + (texture (sampler_main, uv).xyz * 0.994)) - 0.004);\n  ret = tmpvar_2.xyz;\n }","comp":"vec2 xlat_mutabledz;\nvec3 xlat_mutableneu;\nvec3 xlat_mutableret1;\nvec2 xlat_mutableuv3;\n shader_body { \n  vec2 uv_1;\n  float inten_2;\n  float dist_3;\n  vec2 uv2_4;\n  uv_1 = (((uv - 0.5) * aspect.xy) + 0.5);\n  vec2 tmpvar_5;\n  tmpvar_5.y = 0.0;\n  tmpvar_5.x = texsize.z;\n  vec2 tmpvar_6;\n  tmpvar_6.x = 0.0;\n  tmpvar_6.y = texsize.w;\n  xlat_mutabledz.x = dot ((texture (sampler_main, (uv_1 + tmpvar_5)).xyz - texture (sampler_main, (uv_1 - tmpvar_5)).xyz), vec3(0.32, 0.49, 0.29));\n  xlat_mutabledz.y = dot ((texture (sampler_main, (uv_1 + tmpvar_6)).xyz - texture (sampler_main, (uv_1 - tmpvar_6)).xyz), vec3(0.32, 0.49, 0.29));\n  uv2_4 = (uv_1 - 0.5);\n  dist_3 = (1.0 - fract(q17));\n  inten_2 = ((sqrt(dist_3) * (1.0 - \n    (dist_3 * dist_3)\n  )) * 4.0);\n  xlat_mutableuv3 = (((2.0 * uv2_4) * dist_3) + 0.5);\n  xlat_mutableuv3 = (xlat_mutableuv3 * aspect.yx);\n  vec2 tmpvar_7;\n  tmpvar_7.x = q18;\n  tmpvar_7.y = q19;\n  xlat_mutableuv3 = (cos((\n    (42.0 * fract(xlat_mutableuv3))\n   - \n    (8.0 * tmpvar_7)\n  )) + xlat_mutabledz);\n  float tmpvar_8;\n  tmpvar_8 = clamp ((0.01 / sqrt(\n    dot (xlat_mutableuv3, xlat_mutableuv3)\n  )), 0.0, 1.0);\n  xlat_mutableneu = ((dist_3 * vec3(tmpvar_8)) + ((1.0 - dist_3) * dot (vec3(tmpvar_8), vec3(0.32, 0.49, 0.29))));\n  xlat_mutableret1 = max (vec3(0.0, 0.0, 0.0), (xlat_mutableneu * inten_2));\n  dist_3 = (1.0 - fract((0.3333333 + q17)));\n  inten_2 = ((sqrt(dist_3) * (1.0 - \n    (dist_3 * dist_3)\n  )) * 4.0);\n  xlat_mutableuv3 = (((2.0 * uv2_4) * dist_3) + 0.5);\n  xlat_mutableuv3 = (xlat_mutableuv3 * aspect.yx);\n  vec2 tmpvar_9;\n  tmpvar_9.x = q18;\n  tmpvar_9.y = q19;\n  xlat_mutableuv3 = (cos((\n    (42.0 * fract(xlat_mutableuv3))\n   - \n    (8.0 * tmpvar_9)\n  )) + xlat_mutabledz);\n  float tmpvar_10;\n  tmpvar_10 = clamp ((0.01 / sqrt(\n    dot (xlat_mutableuv3, xlat_mutableuv3)\n  )), 0.0, 1.0);\n  xlat_mutableneu = ((dist_3 * vec3(tmpvar_10)) + ((1.0 - dist_3) * dot (vec3(tmpvar_10), vec3(0.32, 0.49, 0.29))));\n  xlat_mutableret1 = max (xlat_mutableret1, (xlat_mutableneu * inten_2));\n  dist_3 = (1.0 - fract((0.6666667 + q17)));\n  inten_2 = ((sqrt(dist_3) * (1.0 - \n    (dist_3 * dist_3)\n  )) * 4.0);\n  xlat_mutableuv3 = (((2.0 * uv2_4) * dist_3) + 0.5);\n  xlat_mutableuv3 = (xlat_mutableuv3 * aspect.yx);\n  vec2 tmpvar_11;\n  tmpvar_11.x = q18;\n  tmpvar_11.y = q19;\n  xlat_mutableuv3 = (cos((\n    (42.0 * fract(xlat_mutableuv3))\n   - \n    (8.0 * tmpvar_11)\n  )) + xlat_mutabledz);\n  float tmpvar_12;\n  tmpvar_12 = clamp ((0.01 / sqrt(\n    dot (xlat_mutableuv3, xlat_mutableuv3)\n  )), 0.0, 1.0);\n  xlat_mutableneu = ((dist_3 * vec3(tmpvar_12)) + ((1.0 - dist_3) * dot (vec3(tmpvar_12), vec3(0.32, 0.49, 0.29))));\n  xlat_mutableret1 = max (xlat_mutableret1, (xlat_mutableneu * inten_2));\n  dist_3 = (1.0 - fract((1.0 + q17)));\n  inten_2 = ((sqrt(dist_3) * (1.0 - \n    (dist_3 * dist_3)\n  )) * 4.0);\n  xlat_mutableuv3 = (((2.0 * uv2_4) * dist_3) + 0.5);\n  xlat_mutableuv3 = (xlat_mutableuv3 * aspect.yx);\n  vec2 tmpvar_13;\n  tmpvar_13.x = q18;\n  tmpvar_13.y = q19;\n  xlat_mutableuv3 = (cos((\n    (42.0 * fract(xlat_mutableuv3))\n   - \n    (8.0 * tmpvar_13)\n  )) + xlat_mutabledz);\n  float tmpvar_14;\n  tmpvar_14 = clamp ((0.01 / sqrt(\n    dot (xlat_mutableuv3, xlat_mutableuv3)\n  )), 0.0, 1.0);\n  xlat_mutableneu = ((dist_3 * vec3(tmpvar_14)) + ((1.0 - dist_3) * dot (vec3(tmpvar_14), vec3(0.32, 0.49, 0.29))));\n  xlat_mutableret1 = max (xlat_mutableret1, (xlat_mutableneu * inten_2));\n  vec4 tmpvar_15;\n  tmpvar_15.w = 1.0;\n  tmpvar_15.xyz = ((xlat_mutableret1 * q22) + ((\n    (texture (sampler_blur1, (uv_1 + (0.1 * xlat_mutabledz))).xyz * scale1)\n   + bias1) * 2.0));\n  ret = tmpvar_15.xyz;\n }"}