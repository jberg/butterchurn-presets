MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=2.000000
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=7
bAdditiveWaves=1
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=1
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=0.958
fWaveSmoothing=0.450
fWaveParam=0.000
fModWaveAlphaStart=0.000
fModWaveAlphaEnd=1.320
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=0.000
zoom=0.99990
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=0.99990
sy=1.00000
wave_r=0.000
wave_g=0.000
wave_b=0.000
wave_x=0.500
wave_y=0.500
ob_size=0.000
ob_r=0.000
ob_g=0.100
ob_b=1.000
ob_a=1.000
ib_size=0.000
ib_r=0.000
ib_g=0.000
ib_b=0.000
ib_a=0.000
nMotionVectorsX=25.600
nMotionVectorsY=9.600
mv_dx=0.000
mv_dy=0.000
mv_l=0.000
mv_r=0.500
mv_g=0.500
mv_b=0.500
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.000
wavecode_0_enabled=0
wavecode_0_samples=282
wavecode_0_sep=20
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=1
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=1
wavecode_0_scaling=3.91581
wavecode_0_smoothing=0.10000
wavecode_0_r=0.200
wavecode_0_g=0.300
wavecode_0_b=1.000
wavecode_0_a=0.600
wavecode_1_enabled=0
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=1
wavecode_1_bDrawThick=1
wavecode_1_bAdditive=0
wavecode_1_scaling=0.89152
wavecode_1_smoothing=0.82000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=0.100
wavecode_2_enabled=0
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=1
wavecode_2_bAdditive=0
wavecode_2_scaling=0.89152
wavecode_2_smoothing=0.82000
wavecode_2_r=0.000
wavecode_2_g=0.200
wavecode_2_b=0.000
wavecode_2_a=1.000
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=1
wavecode_3_bUseDots=1
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=0
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
shapecode_0_enabled=0
shapecode_0_sides=4
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=1
shapecode_0_num_inst=1
shapecode_0_x=0.090
shapecode_0_y=0.900
shapecode_0_rad=0.22437
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=1.76002
shapecode_0_r=1.000
shapecode_0_g=0.000
shapecode_0_b=0.000
shapecode_0_a=1.000
shapecode_0_r2=1.000
shapecode_0_g2=0.000
shapecode_0_b2=0.000
shapecode_0_a2=0.600
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.000
shapecode_1_enabled=0
shapecode_1_sides=100
shapecode_1_additive=1
shapecode_1_thickOutline=0
shapecode_1_textured=0
shapecode_1_num_inst=1
shapecode_1_x=0.260
shapecode_1_y=0.200
shapecode_1_rad=0.39317
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=6.19589
shapecode_1_r=0.000
shapecode_1_g=0.550
shapecode_1_b=0.500
shapecode_1_a=1.000
shapecode_1_r2=0.000
shapecode_1_g2=0.400
shapecode_1_b2=0.400
shapecode_1_a2=0.070
shapecode_1_border_r=0.300
shapecode_1_border_g=0.700
shapecode_1_border_b=0.800
shapecode_1_border_a=0.000
shapecode_2_enabled=0
shapecode_2_sides=44
shapecode_2_additive=1
shapecode_2_thickOutline=0
shapecode_2_textured=0
shapecode_2_num_inst=1
shapecode_2_x=0.503
shapecode_2_y=0.500
shapecode_2_rad=0.03886
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=0.60986
shapecode_2_r=1.000
shapecode_2_g=0.100
shapecode_2_b=0.000
shapecode_2_a=0.900
shapecode_2_r2=1.000
shapecode_2_g2=1.000
shapecode_2_b2=1.000
shapecode_2_a2=0.000
shapecode_2_border_r=0.500
shapecode_2_border_g=0.500
shapecode_2_border_b=0.500
shapecode_2_border_a=0.000
shapecode_3_enabled=0
shapecode_3_sides=100
shapecode_3_additive=0
shapecode_3_thickOutline=0
shapecode_3_textured=0
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.01000
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=0.49981
shapecode_3_r=0.000
shapecode_3_g=0.000
shapecode_3_b=0.000
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=0.000
shapecode_3_b2=0.000
shapecode_3_a2=0.000
shapecode_3_border_r=0.200
shapecode_3_border_g=0.700
shapecode_3_border_b=0.500
shapecode_3_border_a=0.000
per_frame_init_1=
per_frame_init_2=//******** INITIALIZATION *********
per_frame_init_3=//---------- some global vars, do not change -------------
per_frame_init_4=avg = 0.01;
per_frame_init_5=q7 = .2; //MyZoom
per_frame_init_6=q8 =  rand(200)/100-1; //fractal modifier
per_frame_init_7=//q8 = -0; //#
per_frame_init_8=q16 = 1.2; //Tele
per_frame_init_9=q18 = rand(0.8)+.1; //brightness balance back/front
per_frame_init_10=q17 = 2.6; //fractal density factor ffac
per_frame_init_11=start = 1; travel = 0; RotZ = 0; look = 0; slow = 0; t0 = time+3; lampx = .5; lampy = .5;
per_frame_init_12=cran0 = rand(1);
per_frame_init_13=n = 0; loop (10000, gmegabuf(n)=0; n=n+1; ); 
per_frame_init_14=n = 0; loop (10000,  megabuf(n)=0; n=n+1; ); 
per_frame_init_15=trelx = 0;  trely = 0; trelz = 0;
per_frame_init_16=reg20 = 1; reg21 = 0; reg22 = 0; reg23 = 0; reg24 = 1; reg25 = 0; reg26 = 0; reg27 = 0; reg28 = 1;
per_frame_init_17=
per_frame_init_18=//Find random starting point
per_frame_init_19=while (exec2(
per_frame_init_20=  ran1 = rand(800)/100;  ran2 = rand(800)/100;  ran3 = rand(800)/100;
per_frame_init_21=  PosX = rand(10)-5;   PosY = rand(10)-5;   PosZ = rand(10)-5; 
per_frame_init_22=
per_frame_init_23=//  PosX = 3.3; PosY = 2; PosZ = -2; ran1 = 0; ran2 = 0; ran3 = 0; //#
per_frame_init_24=
per_frame_init_25=  c1 = cos(ran1); c2 = cos(ran2); c3 = cos(ran3); 
per_frame_init_26=  s1 = sin(ran1); s2 = sin(ran2); s3 = sin(ran3);
per_frame_init_27=
per_frame_init_28=  reg20 = c2*c1; reg21 = c2*s1; reg22 = -s2;
per_frame_init_29=  reg23 = s3*s2*c1 - c3*s1; reg24 = s3*s2*s1 + c3*c1; reg25 = s3*c2;
per_frame_init_30=  reg26 = c3*s2*c1 + s3*s1; reg27 = c3*s2*s1 - s3*c1; reg28 = c3*c2;
per_frame_init_31=
per_frame_init_32=  //***********BOT*************
per_frame_init_33=  //Coord. Trans. must exactly match def in warp S. !!!!
per_frame_init_34=  dist = 0.001;
per_frame_init_35=  while (exec2(
per_frame_init_36=    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;
per_frame_init_37=    uvx += PosX; uvy += PosY; uvz += PosZ;
per_frame_init_38=    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);
per_frame_init_39=    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);
per_frame_init_40=    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);
per_frame_init_41=    uvx0 = uvx+q8; uvy0 = uvy+q8; uvz0 = uvz+q8;
per_frame_init_42=    loop (7+1,
per_frame_init_43=      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));
per_frame_init_44=      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));
per_frame_init_45=      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));
per_frame_init_46=      slen = uvx*uvx + uvy*uvy + uvz*uvz;
per_frame_init_47=      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *q17 + uvx0; 
per_frame_init_48=      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *q17 + uvy0; 
per_frame_init_49=      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *q17 + uvz0; 
per_frame_init_50=    );
per_frame_init_51=    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);
per_frame_init_52=    dist *= 1.05;
per_frame_init_53=  ,(dist < 0.6)*(len > 30)));
per_frame_init_54=,(dist < .06))); //end while
per_frame_init_55=
per_frame_1=fps_ = .0 * fps_ + 1*if(fps<=25,fps,25+.5*(fps-25)); 
per_frame_2=dec_s = 1-.03*30/fps_;
per_frame_3=dec_m = 1-.1*30/fps_;
per_frame_4=beat = (time >  t0+3); t0 = if(beat, time, t0);
per_frame_5=
per_frame_6=speed = min(0.2,dist_-.02) * (1+2*avg) *(1-slow*.0)*.1/q7; //#
per_frame_7=ds = ds * dec_s + (1-dec_s)*speed*.4/fps_; 
per_frame_8=RotZ = if (travel > 2,.5,0);
per_frame_9=vol = vol*dec_m + (1-dec_m)*(bass_att +mid_att + treb_att)/4;
per_frame_10=q1 = vol/2+.3;
per_frame_11=//Position 
per_frame_12=DirX= reg26; DirY= reg27; DirZ = reg28;
per_frame_13=PosX = PosX + ds*DirX ; PosY = PosY + ds*DirY; PosZ = PosZ + ds*DirZ; 
per_frame_14=q4 = PosX; q5 = PosY; q6 = PosZ;
per_frame_15=
per_frame_16=angchg = (.1-dist_)*(dist_ < .1);
per_frame_17=travel = if (angchg > 0,0,travel+ds);
per_frame_18=v1 = v1 * dec_s + (1-dec_s)* RotZ * ds/2;
per_frame_19=v2 = v2 *dec_s + (1-dec_s)*angchg *xslope/fps_;
per_frame_20=v3 = v3 *dec_s + (1-dec_s)*(angchg *yslope/fps_ + 2*v1*sin(time*.1));
per_frame_21=//v1 = 0.00;
per_frame_22=//push old RotMat
per_frame_23=reg30 =reg20; reg31 =reg21; reg32 =reg22; 
per_frame_24=reg33 =reg23; reg34 =reg24; reg35 =reg25; 
per_frame_25=reg36 =reg26; reg37 =reg27; reg38 =reg28; 
per_frame_26=
per_frame_27=n = 0; avg = 0;
per_frame_28=loop (5,
per_frame_29=  n = n+1;
per_frame_30=  //new Rot. Mat for infinitesimal angles
per_frame_31=  ran1 = rand(100)/100;
per_frame_32=  ran2 = rand(100)/200-.25;
per_frame_33=  tx = cos(n*1.57+ran2) * (n <= 4)*ran1; ty = sin(n*1.57+ran2) * (n <= 4)*ran1;
per_frame_34=  c1 = cos(v1); c2 = cos(v2+ty); c3 = cos(v3+tx); 
per_frame_35=  s1 = sin(v1); s2 = sin(v2+ty); s3 = sin(v3+tx);
per_frame_36=  reg10 = c2*c1; reg11 = c2*s1; reg12 = -s2;
per_frame_37=  reg13 = s3*s2*c1 - c3*s1; reg14 = s3*s2*s1 + c3*c1; reg15 = s3*c2;
per_frame_38=  reg16 = c3*s2*c1 + s3*s1; reg17 = c3*s2*s1 - s3*c1; reg18 = c3*c2;
per_frame_39=
per_frame_40=  //pop old RotMat
per_frame_41=  reg20 =reg30; reg21 =reg31; reg22 =reg32; 
per_frame_42=  reg23 =reg33; reg24 =reg34; reg25 =reg35; 
per_frame_43=  reg26 =reg36; reg27 =reg37; reg28 =reg38; 
per_frame_44=
per_frame_45=  //Multiply new RotMat by old one
per_frame_46=  q20 = reg10*reg20 + reg11*reg23 + reg12*reg26;
per_frame_47=  q21 = reg10*reg21 + reg11*reg24 + reg12*reg27;
per_frame_48=  q22 = reg10*reg22 + reg11*reg25 + reg12*reg28;
per_frame_49=  q23 = reg13*reg20 + reg14*reg23 + reg15*reg26;
per_frame_50=  q24 = reg13*reg21 + reg14*reg24 + reg15*reg27;
per_frame_51=  q25 = reg13*reg22 + reg14*reg25 + reg15*reg28;
per_frame_52=  q26 = reg16*reg20 + reg17*reg23 + reg18*reg26;
per_frame_53=  q27 = reg16*reg21 + reg17*reg24 + reg18*reg27;
per_frame_54=  q28 = reg16*reg22 + reg17*reg25 + reg18*reg28;
per_frame_55=
per_frame_56=  reg20 =q20; reg21 =q21; reg22 =q22;
per_frame_57=  reg23 =q23; reg24 =q24; reg25 =q25;
per_frame_58=  reg26 =q26; reg27 =q27; reg28 =q28;
per_frame_59=
per_frame_60=  //***********BOT*************
per_frame_61=  //Coord. Trans. must exactly match def in warp S. !!!!
per_frame_62=  dist = 0.002;
per_frame_63=  while (exec2(
per_frame_64=    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;
per_frame_65=    uvx += PosX; uvy += PosY; uvz += PosZ;
per_frame_66=    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);
per_frame_67=    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);
per_frame_68=    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);
per_frame_69=    uvx0 = uvx+q8; uvy0 = uvy+q8; uvz0 = uvz+q8;
per_frame_70=    loop (7+1,
per_frame_71=      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));
per_frame_72=      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));
per_frame_73=      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));
per_frame_74=      slen = uvx*uvx + uvy*uvy + uvz*uvz;
per_frame_75=      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *q17 + uvx0; 
per_frame_76=      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *q17 + uvy0; 
per_frame_77=      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *q17 + uvz0; 
per_frame_78=    );
per_frame_79=    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);
per_frame_80=    dist *= 1.1;
per_frame_81=  ,(dist < 0.6)*(len > 30)));
per_frame_82=  megabuf(n) = megabuf(n)*dec_s + (1-dec_s)*dist; //stores the 4 trial points
per_frame_83=  avg = avg+abs(megabuf(n)/5);
per_frame_84=); //end loop 5
per_frame_85=
per_frame_86=n = 0; avg = 0; loop (5, n=n+1; avg = avg+abs(megabuf(n)/5));
per_frame_87=
per_frame_88=xslope = min(max(2/avg*(megabuf(1)-megabuf(3)),-3),3);
per_frame_89=yslope = min(max(2/avg*(megabuf(4)-megabuf(2)),-3),3);
per_frame_90=monitor = avg;
per_frame_91=dist_ = dist_*dec_s + (1-dec_s)*dist;
per_frame_92=
per_frame_93=q10 = ds*q7; //compensation of lin. movement in GetDist and zoom uv
per_frame_94=q14 = 1*abs(ds) + 2*(abs(v1) + abs(v2) + abs(v3)) + start*.05; 
per_frame_95=q19 = .6 + .4*sin(time*.02+cran0*6); //brightness backgd
per_frame_96=start = start * .9;
per_frame_97=
per_frame_98=warp = 0.0; zoom = 1; 
per_frame_99=dx = -v2/q16; dy = v3/q16; rot = v1;
per_frame_100=vx = vx -v2/q16; vy = vy +v3/q16; vz = vz + v1;
per_frame_101=q11 = vx;  q12 = vy;
per_frame_102=movz = movz + ds;
per_frame_103=q13 = movz;
per_frame_104=monitor = q13;
warp_1=`float limit, dist, struc, len; float2 uv0, uv1; float3 uv2; float4 box;
warp_2=`static const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);
warp_3=`
warp_4=`static const float3 CamPos = float3(q4,q5,q6);
warp_5=`static const float myzoom = q7,  res = 128, res2 = 64, tele = q16;
warp_6=`static const float sustain = .98 - q14, change = q14, ds = q10, tic8 = 1.0/255, ffac = q17;
warp_7=`
warp_8=`float2 fstep2 (float2 xy) {return 1.0/res*round(res*xy);}
warp_9=`
warp_10=`float GetDist(float2 uvi) {float2 tmp; tmp = fstep2(tex2D (sampler_pc_main, uvi).gb); 
warp_11=`  return 1-(tmp.y + 1.0/res2*(tmp.x-.50));}
warp_12=`
warp_13=`float2 PutDist(float x) {float tmp; tmp = fstep2(1-x);
warp_14=`  return (float2(res2*((1-x)-tmp)+.5,tmp));}
warp_15=`
warp_16=`float MinDist (float2 uvi) 
warp_17=`{
warp_18=`   float tmp; float4 nb; float4 nb2; float2 pix;
warp_19=`   pix = texsize.zw*(1+length(uvi-0.5)*.0);   
warp_20=`   nb.x = GetDist(uvi+pix*float2(-1,-1));   nb.y = GetDist(uvi+pix*float2(1,-1));
warp_21=`   nb.z = GetDist(uvi+pix*float2(1,1));     nb.w = GetDist(uvi+pix*float2(-1,1));         
warp_22=`   nb2.x = GetDist(uvi+pix*float2(0,-1));   nb2.y = GetDist(uvi+pix*float2(1,0));          
warp_23=`   nb2.z = GetDist(uvi+pix*float2(0,1));    nb2.w = GetDist(uvi+pix*float2(-1,0));
warp_24=`   //Eo.S. more efficient usage of min to get min value of all 8 GetDist() calls, removes 11ALU
warp_25=`   nb = min( nb, nb2 );
warp_26=`   nb.xy = min( nb.xy, nb.zw );
warp_27=`   return min( nb.x, nb.y );
warp_28=`}
warp_29=`
warp_30=`float3 Get1 (float2 uvi) {return lerp (GetPixel(uvi), GetBlur1(uvi),change*2);} 
warp_31=`
warp_32=`float4 mbox (float3 uvi) {float3 zz, zz0; float tmp, li;
warp_33=`  zz = uvi; zz0 = zz+q8; li=0; int iterations = 8 - (dist>.8);
warp_34=`  for (int n = 0; n <= iterations; n++) {
warp_35=`    zz = 2.0*clamp(zz,-1,1)-zz;  tmp = dot(zz,zz);
warp_36=`    zz *= clamp(max(.25/tmp, .25), 0.0, 1.0)*4; //############
warp_37=`    zz = ffac*zz + zz0 ;}
warp_38=`return float4(zz,li);}
warp_39=`
warp_40=`shader_body {uv0 = uv_orig;
warp_41=`uv = (uv-.5)*(1-ds/(1-GetBlur1(uv).b)) + .5;
warp_42=`uv1 = (uv0-.5)*aspect.xy*tele;
warp_43=`float3 noise = frac(8*tex2D (sampler_noise_lq,uv+rand_frame.yz)); 
warp_44=`
warp_45=`   if (noise.g > .4*rad) 
warp_46=`   {
warp_47=`       float3 noiseBiased = noise - float3( 0.5, 0.5, 0.5 );
warp_48=`      //Eo.S. combine the subtraction on noise to a single float3 
warp_49=`      //to ensure compiler does the subtraction in a single ALU
warp_50=`      dist = MinDist(uv) +  0.006 * (noiseBiased.x) * abs(noiseBiased.y);
warp_51=`   }    
warp_52=`   else {dist = noise.r;}
warp_53=`dist = min(dist,GetDist(uv)) - ds*.8;
warp_54=`
warp_55=`limit = 15 + 10 * dist;
warp_56=`float tdist = dist+.000;
warp_57=`uv2 = mul(float3(uv1*tdist,tdist)/myzoom,RotMat)+CamPos;
warp_58=`uv2 = (frac(uv2/8.0+.5)-.5)*8.0;
warp_59=`box = mbox (uv2);
warp_60=`len = (length(box.xyz));
warp_61=`struc = length(box.xz) /limit;
warp_62=`
warp_63=`float3 inside  = float3 ((1-sustain)*struc+sustain*(Get1(uv).r), PutDist(dist));
warp_64=`float3 outside = Get1(uv)*float3(sustain,1,sustain*0+1)-float3(tic8,0,change/4*0+tic8*4*(.2+rad));
warp_65=`ret = lerp (inside,outside,saturate(1*(len-limit+struc*-0)));
warp_66=`}
comp_1=`#define sat saturate
comp_2=`sampler sampler_pw_noise_lq;
comp_3=`static const float2 pix = texsize.zw;
comp_4=`float glow, tmp, lamp, dist, bdist, b2dist, dist_c, cloud, inten, z;
comp_5=`float2 dz, uv1,uv2, uv3, uv4;
comp_6=`static const float3 CamPos = float3(q4,q5,q6);
comp_7=`static const float myzoom = q7;
comp_8=`static const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);
comp_9=`static const float3 col_struc =  float3(1,.7,.3) + .2*(rand_preset.xyz-.5);
comp_10=`
comp_11=`float3 GetBlurX (float2 uvi, float x) {return lerp (GetPixel(uvi), GetBlur1(uvi), x);}
comp_12=`float GetDist(float2 uvi)   {return 1-GetPixel(uvi).b;}
comp_13=`float GetDistB(float2 uvi)  {return 1-GetBlur1(uvi).b;}
comp_14=`float GetDistB2(float2 uvi) {return 1-GetBlur2(uvi).b;}
comp_15=`
comp_16=`float MinDistB (float2 uvi) {float tmp; float4 nb; //##nicht ideal
comp_17=`  tmp = GetDist(uvi);
comp_18=`  tmp = min(tmp,GetDistB2(uvi)*1) ;
comp_19=`  return tmp;}
comp_20=`
comp_21=`float noise4 (float2 uvi) { float n1,n2,n3,n4,zv; zv = 0.008*time;
comp_22=`  n1 = lum(tex2D(sampler_noise_hq, (uvi)));
comp_23=`  n2 = lum(tex2D(sampler_noise_hq, (uvi*2+zv)));
comp_24=`  n3 = lum(tex2D(sampler_noise_hq, (uvi*4+2*zv)));
comp_25=`  n4 = lum(tex2D(sampler_noise_hq, (uvi*8+4*zv)));
comp_26=`  return n1 + n2/2 + n3/4 + n4/8;}
comp_27=`
comp_28=`float shadow (float2 uvi) {int n; float dark, dx; float2 uvc;
comp_29=`  dark = 0; n = 1;
comp_30=`  while ( (n <= 8)) 
comp_31=`     {dx = .002*n; 
comp_32=`      uvc = uvi + float2(dx,0); 
comp_33=`      dark = dark + (GetDistB(uvi)-GetDistB(uvc) <= dx*4); 
comp_34=`      n++;
comp_35=`     ;}
comp_36=`  return dark/8;
comp_37=`}
comp_38=`
comp_39=`shader_body {uv1= (uv-.5)*aspect.xy;
comp_40=`uv1 = uv*aspect.xy-float2(.5,.5);
comp_41=`
comp_42=`
comp_43=`dist = MinDistB(uv);
comp_44=`bdist = lerp(dist,GetDistB(uv),.5);
comp_45=`float struc0 = GetBlurX(uv,bdist).r;
comp_46=`float struc = struc0 * (1-bdist)*bdist;
comp_47=`
comp_48=`tmp = 0;
comp_49=`for (int k = 1; k <= 1; k++) {
comp_50=`  uv2 = (uv1*(1-.1*tmp))*.2-float2(q11,q12)*.2;
comp_51=`  tmp = saturate(lum(tex2D (sampler_noise_hq,uv2 +.03*noise4(uv2*4))-.4));}
comp_52=`tmp = saturate(pow(tmp,1.2) * sign(tmp));
comp_53=`
comp_54=`float3 ret1 = float3 (0.1,0.1,1.2-uv.y)+.07 + sat(bdist*2-1.5)*tmp*4;;
comp_55=`
comp_56=`//ret1 = 0;
comp_57=`int anz = 3; float t_rel = q13*6;
comp_58=`for (int n=1;n<=anz;n++) {
comp_59=`//    int m =  n-int(t_rel);
comp_60=`
comp_61=`    z = 1-frac(1.0*n/anz-1.0*frac(-t_rel)/anz); 
comp_62=`
comp_63=`    inten =  (1-z)*z*2;
comp_64=`    tmp = 0;
comp_65=`    for (int k = 1; k <= 1; k++) {
comp_66=`      uv2 = z*(uv1*(1-.1*tmp))/4-float2(q11,q12)/6;
comp_67=`      tmp = saturate(lum(tex2D (sampler_noise_hq,uv2 +.03*noise4(uv2*4))-z*.5-.3)+0*struc);}
comp_68=`    tmp = saturate(pow(tmp,1) * sign(tmp)) *inten*(1+struc*0)*q1*2;
comp_69=`      
comp_70=`    ret1 = (ret1+struc*4*q1*float3(1,.75,.2))*sat(1-tmp) + tmp;
comp_71=`}
comp_72=`
comp_73=`
comp_74=`ret = 1-exp((-1.6)*ret1);
comp_75=`}
comp_76=`
comp_77=`//-------------------------------------------
comp_78=`//Written by martin
comp_79=`
