MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=1.000000
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=7
bAdditiveWaves=1
bWaveDots=0
bWaveThick=0
bModWaveAlphaByVolume=1
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=1.286
fWaveSmoothing=0.630
fWaveParam=0.000
fModWaveAlphaStart=0.710
fModWaveAlphaEnd=1.300
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=0.000
zoom=0.99990
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=0.99990
sy=1.00000
wave_r=0.650
wave_g=0.650
wave_b=0.650
wave_x=0.500
wave_y=0.500
ob_size=0.000
ob_r=0.000
ob_g=0.100
ob_b=1.000
ob_a=1.000
ib_size=0.000
ib_r=0.000
ib_g=0.000
ib_b=0.000
ib_a=0.000
nMotionVectorsX=12.000
nMotionVectorsY=9.000
mv_dx=0.000
mv_dy=0.000
mv_l=0.900
mv_r=1.000
mv_g=1.000
mv_b=1.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.000
wavecode_0_enabled=0
wavecode_0_samples=512
wavecode_0_sep=51
wavecode_0_bSpectrum=1
wavecode_0_bUseDots=1
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=0
wavecode_0_scaling=1.32735
wavecode_0_smoothing=0.82000
wavecode_0_r=1.000
wavecode_0_g=1.000
wavecode_0_b=3.000
wavecode_0_a=1.000
wave_0_per_point1=x = rand(1001)*.001;
wave_0_per_point2=y = rand(1001)*.001;
wave_0_per_point3=
wave_0_per_point4=tm = time*.5 + sample*2;
wave_0_per_point5=
wave_0_per_point6=r = .5 + .5*sin(tm*1.132);
wave_0_per_point7=g = .5 + .5*sin(tm*1.121);
wave_0_per_point8=b = .5 + .5*sin(tm*1.187);
wavecode_1_enabled=0
wavecode_1_samples=512
wavecode_1_sep=51
wavecode_1_bSpectrum=1
wavecode_1_bUseDots=1
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=0
wavecode_1_scaling=1.32735
wavecode_1_smoothing=0.82000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=3.000
wavecode_1_a=1.000
wave_1_per_point1=x = rand(1001)*.001;
wave_1_per_point2=y = rand(1001)*.001;
wave_1_per_point3=
wave_1_per_point4=tm = time*.5 + sample*2;
wave_1_per_point5=
wave_1_per_point6=r = .5 + .5*sin(tm*1.132);
wave_1_per_point7=g = .5 + .5*sin(tm*1.121);
wave_1_per_point8=b = .5 + .5*sin(tm*1.187);
wavecode_2_enabled=0
wavecode_2_samples=512
wavecode_2_sep=51
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=1
wavecode_2_bDrawThick=1
wavecode_2_bAdditive=0
wavecode_2_scaling=1.32735
wavecode_2_smoothing=0.82000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=3.000
wavecode_2_a=1.000
wave_2_per_point1=x = rand(1001)*.001;
wave_2_per_point2=y = rand(1001)*.001;
wave_2_per_point3=
wave_2_per_point4=tm = time*.5 + sample*2;
wave_2_per_point5=
wave_2_per_point6=r = .5 + .5*sin(tm*1.132);
wave_2_per_point7=g = .5 + .5*sin(tm*1.121);
wave_2_per_point8=b = .5 + .5*sin(tm*1.187);
wavecode_3_enabled=1
wavecode_3_samples=512
wavecode_3_sep=51
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=1
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=1
wavecode_3_scaling=1.32735
wavecode_3_smoothing=0.82000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=3.000
wavecode_3_a=1.000
wave_3_per_point1=x = rand(1001)*.001;
wave_3_per_point2=y = rand(1001)*.001;
wave_3_per_point3=
wave_3_per_point4=tm = time*.5 + sample*2;
wave_3_per_point5=
wave_3_per_point6=r = .5 + .5*sin(tm*1.132);
wave_3_per_point7=g = .5 + .5*sin(tm*1.121);
wave_3_per_point8=b = .5 + .5*sin(tm*1.187);
shapecode_0_enabled=1
shapecode_0_sides=54
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=1
shapecode_0_num_inst=1
shapecode_0_x=0.500
shapecode_0_y=0.500
shapecode_0_rad=0.49138
shapecode_0_ang=1.57080
shapecode_0_tex_ang=3.14159
shapecode_0_tex_zoom=1.00000
shapecode_0_r=1.000
shapecode_0_g=1.000
shapecode_0_b=1.000
shapecode_0_a=1.000
shapecode_0_r2=1.000
shapecode_0_g2=1.000
shapecode_0_b2=1.000
shapecode_0_a2=0.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.000
shapecode_1_enabled=1
shapecode_1_sides=54
shapecode_1_additive=0
shapecode_1_thickOutline=0
shapecode_1_textured=0
shapecode_1_num_inst=1
shapecode_1_x=0.500
shapecode_1_y=0.500
shapecode_1_rad=0.08195
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=1.00000
shapecode_1_r=0.000
shapecode_1_g=1.000
shapecode_1_b=0.000
shapecode_1_a=1.000
shapecode_1_r2=0.000
shapecode_1_g2=0.000
shapecode_1_b2=0.000
shapecode_1_a2=0.000
shapecode_1_border_r=1.000
shapecode_1_border_g=1.000
shapecode_1_border_b=1.000
shapecode_1_border_a=0.000
shape_1_per_frame1=x=q3;
shape_1_per_frame2=y=1-q4;
shape_1_per_frame3=
shape_1_per_frame4=r = abs(q20);
shape_1_per_frame5=g = abs(q21);
shape_1_per_frame6=b = abs(q22);
shape_1_per_frame7=
shape_1_per_frame8=rad = .1*mid;
shapecode_2_enabled=1
shapecode_2_sides=54
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=0
shapecode_2_num_inst=1
shapecode_2_x=0.500
shapecode_2_y=0.500
shapecode_2_rad=0.08195
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=1.00000
shapecode_2_r=0.000
shapecode_2_g=0.000
shapecode_2_b=0.000
shapecode_2_a=1.000
shapecode_2_r2=0.000
shapecode_2_g2=0.000
shapecode_2_b2=0.000
shapecode_2_a2=0.000
shapecode_2_border_r=1.000
shapecode_2_border_g=1.000
shapecode_2_border_b=1.000
shapecode_2_border_a=0.000
shape_2_per_frame1=x=q5;
shape_2_per_frame2=y=1-q6;
shape_2_per_frame3=
shape_2_per_frame4=rad = .2*bass;
shapecode_3_enabled=1
shapecode_3_sides=54
shapecode_3_additive=0
shapecode_3_thickOutline=0
shapecode_3_textured=0
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.08195
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=1.00000
shapecode_3_r=0.000
shapecode_3_g=0.000
shapecode_3_b=1.000
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=0.000
shapecode_3_b2=0.000
shapecode_3_a2=0.000
shapecode_3_border_r=1.000
shapecode_3_border_g=1.000
shapecode_3_border_b=1.000
shapecode_3_border_a=0.000
shape_3_per_frame1=x=q1;
shape_3_per_frame2=y=1-q2;
shape_3_per_frame3=
shape_3_per_frame4=r = (q23);
shape_3_per_frame5=g = (q24);
shape_3_per_frame6=b = (q25);
shape_3_per_frame7=a = q19;
shape_3_per_frame8=
shape_3_per_frame9=rad = bass*.1;
per_frame_init_1=
per_frame_init_2=//******** INITIALIZATION *********
per_frame_init_3=//---------- some global vars, do not change -------------
per_frame_init_4=avg = 0.01;
per_frame_init_5=q7 = .25; //MyZoom
per_frame_init_6=q8 =  rand(2.0)-1.0; //fractal modifier
per_frame_init_7=//q8 = 1; //#
per_frame_init_8=q16 = 1 + rand(2); //Tele ; rather fish eye
per_frame_init_9=//q16 = 1; //#
per_frame_init_10=q18 = rand(0.8)+.1; //brightness balance back/front
per_frame_init_11=q30 = 1; //logarithmic Z-Dist storage; unused
per_frame_init_12=q31 =128;
per_frame_init_13=start = 1; travel = 0; RotZ = 0; look = 0; slow = 0; t0 = time+3; lampx = .5; lampy = .5;
per_frame_init_14=cran0 = rand(1);
per_frame_init_15=n = 0; loop (10000, gmegabuf(n)=0; n=n+1; ); 
per_frame_init_16=n = 0; loop (10000,  megabuf(n)=0; n=n+1; ); 
per_frame_init_17=trelx = 0;  trely = 0; trelz = 0;
per_frame_init_18=reg20 = 1; reg21 = 0; reg22 = 0; reg23 = 0; reg24 = 1; reg25 = 0; reg26 = 0; reg27 = 0; reg28 = 1;
per_frame_init_19=
per_frame_init_20=//Find random starting point
per_frame_init_21=while (exec2(
per_frame_init_22=  ran1 = rand(800)/100;  ran2 = rand(800)/100;  ran3 = rand(800)/100;
per_frame_init_23=  PosX = rand(5)-2;   PosY = rand(5)-2;   PosZ = rand(5)-2; 
per_frame_init_24=
per_frame_init_25=//  PosX = 3.3; PosY = 2; PosZ = -2; ran1 = 0; ran2 = 0; ran3 = 0; //#
per_frame_init_26=
per_frame_init_27=  c1 = cos(ran1); c2 = cos(ran2); c3 = cos(ran3); 
per_frame_init_28=  s1 = sin(ran1); s2 = sin(ran2); s3 = sin(ran3);
per_frame_init_29=
per_frame_init_30=  reg20 = c2*c1; reg21 = c2*s1; reg22 = -s2;
per_frame_init_31=  reg23 = s3*s2*c1 - c3*s1; reg24 = s3*s2*s1 + c3*c1; reg25 = s3*c2;
per_frame_init_32=  reg26 = c3*s2*c1 + s3*s1; reg27 = c3*s2*s1 - s3*c1; reg28 = c3*c2;
per_frame_init_33=
per_frame_init_34=  //***********BOT*************
per_frame_init_35=  //Coord. Trans. must exactly match def in warp S. !!!!
per_frame_init_36=  dist = 0.001;
per_frame_init_37=  while (exec2(
per_frame_init_38=    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;
per_frame_init_39=    uvx += PosX; uvy += PosY; uvz += PosZ;
per_frame_init_40=    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);
per_frame_init_41=    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);
per_frame_init_42=    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);
per_frame_init_43=    uvx0 = uvx+q8; uvy0 = uvy+q8; uvz0 = uvz+q8;
per_frame_init_44=    loop (7+1,
per_frame_init_45=      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));
per_frame_init_46=      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));
per_frame_init_47=      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));
per_frame_init_48=      slen = uvx*uvx + uvy*uvy + uvz*uvz;
per_frame_init_49=      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0; 
per_frame_init_50=      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0; 
per_frame_init_51=      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0; 
per_frame_init_52=    );
per_frame_init_53=    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);
per_frame_init_54=    dist *= 1.05;
per_frame_init_55=  ,(dist < 0.6)*(len > 30)));
per_frame_init_56=,(dist < .06))); //end while
per_frame_init_57=
per_frame_1=fps_ = .0 * fps_ + 1*if(fps<=25,fps,25+.5*(fps-25)); 
per_frame_2=dec_s = 1-.06*30/fps_;
per_frame_3=beat = (time >  t0+3); t0 = if(beat, time, t0);
per_frame_4=
per_frame_5=speed = min(0.2,dist_-.02) * (1+2*avg) *(1-slow*.0)*.7/q7; //#
per_frame_6=ds = ds * dec_s + (1-dec_s)*speed*.25/fps_; 
per_frame_7=RotZ = if (RotZ==0,beat*(rand(100)<20*travel)*(rand(10)/10-.3),
per_frame_8=                   bnot(beat*(rand(100)<30))*RotZ);
per_frame_9=slow = if (bnot(slow), beat*(rand(1000*avg)<6), bnot(beat*(rand(100)<50)));
per_frame_10=look = if (bnot(look), beat*(rand(1000*speed)<12), bnot(beat*(rand(100)<50)));
per_frame_11=
per_frame_12=//Lamp View
per_frame_13=lx = if (beat,rand(150)/200+.15,lx);
per_frame_14=ly = if (beat,rand(150)/200+.15,ly);
per_frame_15=lampx = lampx * dec_s + (1-dec_s)*if (look,lx,0.5);
per_frame_16=lampy = lampy * dec_s + (1-dec_s)*if (look,ly,0.5);
per_frame_17=q1 = lampx; q2 = lampy;
per_frame_18=
per_frame_19=//Position 
per_frame_20=DirX= reg26; DirY= reg27; DirZ = reg28;
per_frame_21=PosX = PosX + ds*DirX ; PosY = PosY + ds*DirY; PosZ = PosZ + ds*DirZ; 
per_frame_22=q4 = PosX; q5 = PosY; q6 = PosZ;
per_frame_23=
per_frame_24=angchg = (.2-dist_)*(dist_ < .2)*2;
per_frame_25=travel = if (angchg > 0,0,travel+ds);
per_frame_26=v1 = v1 * dec_s + (1-dec_s)* RotZ * ds;
per_frame_27=v2 = v2 *dec_s + (1-dec_s)*angchg *xslope/fps_;
per_frame_28=v3 = v3 *dec_s + (1-dec_s)*(angchg *yslope/fps_ + 2*v1*sin(time*.1));
per_frame_29=//v2 = .008;
per_frame_30=//push old RotMat
per_frame_31=reg30 =reg20; reg31 =reg21; reg32 =reg22; 
per_frame_32=reg33 =reg23; reg34 =reg24; reg35 =reg25; 
per_frame_33=reg36 =reg26; reg37 =reg27; reg38 =reg28; 
per_frame_34=
per_frame_35=n = 0; avg = 0;
per_frame_36=loop (5,
per_frame_37=  n = n+1;
per_frame_38=  //new Rot. Mat for infinitesimal angles
per_frame_39=  ran1 = rand(100)/100;
per_frame_40=  ran2 = rand(100)/200-.25;
per_frame_41=  tx = cos(n*1.57+ran2) * (n <= 4)*ran1; ty = sin(n*1.57+ran2) * (n <= 4)*ran1;
per_frame_42=  c1 = cos(v1); c2 = cos(v2+ty); c3 = cos(v3+tx); 
per_frame_43=  s1 = sin(v1); s2 = sin(v2+ty); s3 = sin(v3+tx);
per_frame_44=  reg10 = c2*c1; reg11 = c2*s1; reg12 = -s2;
per_frame_45=  reg13 = s3*s2*c1 - c3*s1; reg14 = s3*s2*s1 + c3*c1; reg15 = s3*c2;
per_frame_46=  reg16 = c3*s2*c1 + s3*s1; reg17 = c3*s2*s1 - s3*c1; reg18 = c3*c2;
per_frame_47=
per_frame_48=  //pop old RotMat
per_frame_49=  reg20 =reg30; reg21 =reg31; reg22 =reg32; 
per_frame_50=  reg23 =reg33; reg24 =reg34; reg25 =reg35; 
per_frame_51=  reg26 =reg36; reg27 =reg37; reg28 =reg38; 
per_frame_52=
per_frame_53=  //Multiply new RotMat by old one
per_frame_54=  q20 = reg10*reg20 + reg11*reg23 + reg12*reg26;
per_frame_55=  q21 = reg10*reg21 + reg11*reg24 + reg12*reg27;
per_frame_56=  q22 = reg10*reg22 + reg11*reg25 + reg12*reg28;
per_frame_57=  q23 = reg13*reg20 + reg14*reg23 + reg15*reg26;
per_frame_58=  q24 = reg13*reg21 + reg14*reg24 + reg15*reg27;
per_frame_59=  q25 = reg13*reg22 + reg14*reg25 + reg15*reg28;
per_frame_60=  q26 = reg16*reg20 + reg17*reg23 + reg18*reg26;
per_frame_61=  q27 = reg16*reg21 + reg17*reg24 + reg18*reg27;
per_frame_62=  q28 = reg16*reg22 + reg17*reg25 + reg18*reg28;
per_frame_63=
per_frame_64=  reg20 =q20; reg21 =q21; reg22 =q22;
per_frame_65=  reg23 =q23; reg24 =q24; reg25 =q25;
per_frame_66=  reg26 =q26; reg27 =q27; reg28 =q28;
per_frame_67=
per_frame_68=  //***********BOT*************
per_frame_69=  //Coord. Trans. must exactly match def in warp S. !!!!
per_frame_70=  dist = 0.002;
per_frame_71=  while (exec2(
per_frame_72=    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;
per_frame_73=    uvx += PosX; uvy += PosY; uvz += PosZ;
per_frame_74=    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);
per_frame_75=    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);
per_frame_76=    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);
per_frame_77=    uvx0 = uvx+q8; uvy0 = uvy+q8; uvz0 = uvz+q8;
per_frame_78=    loop (7+1,
per_frame_79=      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));
per_frame_80=      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));
per_frame_81=      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));
per_frame_82=      slen = uvx*uvx + uvy*uvy + uvz*uvz;
per_frame_83=      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0; 
per_frame_84=      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0; 
per_frame_85=      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0; 
per_frame_86=    );
per_frame_87=    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);
per_frame_88=    dist *= 1.1;
per_frame_89=  ,(dist < 0.6)*(len > 30)));
per_frame_90=  megabuf(n) = megabuf(n)*dec_s + (1-dec_s)*dist; //stores the 4 trial points
per_frame_91=  avg = avg+abs(megabuf(n)/5);
per_frame_92=); //end loop 5
per_frame_93=
per_frame_94=n = 0; avg = 0; loop (5, n=n+1; avg = avg+abs(megabuf(n)/5));
per_frame_95=
per_frame_96=xslope = min(max(2/avg*(megabuf(1)-megabuf(3)),-3),3);
per_frame_97=yslope = min(max(2/avg*(megabuf(4)-megabuf(2)),-3),3);
per_frame_98=monitor = avg;
per_frame_99=dist_ = dist_*dec_s + (1-dec_s)*dist;
per_frame_100=
per_frame_101=q10 = ds*q7; //compensation of lin. movement in GetDist and zoom uv
per_frame_102=q14 = 1*abs(ds) + 2*(abs(v1) + abs(v2) + abs(v3)) + 1.0/255 + start*.05; 
per_frame_103=//q15 = sign(4*avg - 1)*pow(abs(4*avg - 1), 1.25); // 500*ds*q7; // + ( sign(v1)*sqrt(abs(v1)) + sign(v2)*sqrt(abs(v2)) + sign(v3)*sqrt(abs(v3)) )
per_frame_104=q15 = 4*avg - 1.4;
per_frame_105=q19 = .6 + .4*sin(time*.02+cran0*6); //brightness backgd
per_frame_106=start = start * .9;
per_frame_107=q11 = v1; q12 = v2; q13 = v3;
per_frame_108=//forward comp. of Rotation
per_frame_109=
per_frame_110=monitor = 3.333*q15;
per_pixel_1= warp = 0.0; zoom = 1; dx = -q12/q16*(1+0*pow(x-.5,2)); dy = q13/q16*(1+0*pow(y-.5,2)); rot =q11;
warp_1=`sampler sampler_pw_noise_mq;
warp_2=`float limit, dist, struc, len; float2 uv0, uv1; float3 uv2; float4 box;
warp_3=`static const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);
warp_4=`
warp_5=`static const float3 CamPos = float3(q4,q5,q6);
warp_6=`static const float myzoom = q7,  res = 288, res2 = 32, tele = q16;
warp_7=`static const float change = q14, sustain =.92 + change*1.5, ds = q10, tic8 = 1.0/255, ffac = q17;
warp_8=`
warp_9=`float2 fstep2 (float2 xy) {return 1.0/res*round(res*xy);}
warp_10=`
warp_11=`float GetDist(float2 uvi) {float2 tmp; tmp = fstep2(tex2D (sampler_pc_main, uvi).gb); 
warp_12=`  return 1-(tmp.y + 1.0/res2*(tmp.x-.505));}
warp_13=`
warp_14=`float2 PutDist(float x) {float tmp; tmp = fstep2(1-x);
warp_15=`  return (float2(res2*((1-x)-tmp)+.495,tmp));}
warp_16=`
warp_17=`float MinDist (float2 uvi) 
warp_18=`{
warp_19=`   float tmp; float4 nb; float4 nb2; float2 pix;
warp_20=`   pix = texsize.zw*(1.0+length(uvi-0.5)*.0);   
warp_21=`   nb.x = GetDist(uvi+pix*float2(-1,-1));   nb.y = GetDist(uvi+pix*float2(1,-1));
warp_22=`   nb.z = GetDist(uvi+pix*float2(1,1));     nb.w = GetDist(uvi+pix*float2(-1,1));         
warp_23=`   nb2.x = GetDist(uvi+pix*float2(0,-1));   nb2.y = GetDist(uvi+pix*float2(1,0));          
warp_24=`   nb2.z = GetDist(uvi+pix*float2(0,1));    nb2.w = GetDist(uvi+pix*float2(-1,0));
warp_25=`   //Eo.S. more efficient usage of min to get min value of all 8 GetDist() calls, removes 11ALU
warp_26=`   nb = min( nb, nb2 );
warp_27=`   nb.xy = min( nb.xy, nb.zw );
warp_28=`   tmp =min( nb.x, nb.y );
warp_29=`   return min(tmp, GetDist(uvi));
warp_30=`}
warp_31=`
warp_32=`float3 Get1 (float2 uvi) {return lerp (GetPixel(uvi), GetBlur1(uvi),0);} 
warp_33=`
warp_34=`
warp_35=`
warp_36=`//----------------------------------------------------------------------------------------------
warp_37=`float4 mbox (float3 uvi) {float3 zz, zz0; float tmp;
warp_38=`  zz0 = uvi; zz = uvi * float3 (1,1,1); 
warp_39=`
warp_40=`  for (int n = 0; n <= 0; n++) 
warp_41=`  {
warp_42=`     zz = (tex3D (sampler_noisevol_lq,(zz/16 ))).x*3;
warp_43=`//     zz = length(1+sin(zz.zx*4+1))*8 * cos(zz.y) ;
warp_44=`  }
warp_45=`   
warp_46=`return float4(zz*limit,0);}
warp_47=`//----------------------------------------------------------------------------------------------
warp_48=`
warp_49=`
warp_50=`
warp_51=`shader_body {uv0 = uv_orig;
warp_52=`uv = (uv-.5)*(1-ds/(1-GetBlur1(uv).b)) + .5;
warp_53=`uv1 = (uv0-.5)*aspect.xy*tele;
warp_54=`float3 noise = frac(8*tex2D (sampler_noise_lq,uv+rand_frame.yz)); 
warp_55=`   if (noise.g > .1) 
warp_56=`   {
warp_57=`       float3 noiseBiased = noise - float3( 0.5, 0.5, 0.5 );
warp_58=`      //Eo.S. combine the subtraction on noise to a single float3 
warp_59=`      //to ensure compiler does the subtraction in a single ALU
warp_60=`      dist = MinDist( (noiseBiased.zy) * 0.000 + uv ) +  0.01 * float2((noiseBiased.x) * abs(noiseBiased.y), abs(noiseBiased.x) * (noiseBiased.y));
warp_61=`   }    
warp_62=`   else {dist = noise.r;}
warp_63=` dist = min(dist,GetDist(uv)) - ds*.8;
warp_64=`
warp_65=`limit = 80;
warp_66=`float tdist = dist + pow(dist,3)*.2;
warp_67=`uv2 = mul(float3(uv1*tdist,tdist-.0)/myzoom,RotMat)+CamPos;
warp_68=`uv2 = (frac(uv2/8.0+.5)-.5)*8.0;
warp_69=`box = mbox (uv2);
warp_70=`len = (length(box.xyz));
warp_71=`struc = length(box.xyz)/limit;
warp_72=`
warp_73=`if ((len < limit) && (dist > 0.005)){
warp_74=` ret.r = (1-sustain)*struc+sustain*(Get1(uv).r); ret.gb=  PutDist(dist); } 
warp_75=` else {ret = tex2D(sampler_fw_main,frac(uv))*float3(.5*(sustain+1), (sustain), sustain) - .01*float3((1 - sustain), 0, (1-sustain));} 
warp_76=`//ret.r = struc;
warp_77=`}
comp_1=`shader_body
comp_2=`{
comp_3=`float tele = q16;
comp_4=`float2 uv0 = uv;
comp_5=`uv = float2(abs(uv.x-.5)+.5,uv.y);
comp_6=`uv = abs(uv-.5)+.5;
comp_7=`float3   ret2 = tex2D(sampler_main,uv).xyz;
comp_8=`
comp_9=`float blur1 = lum(GetPixel(uv));
comp_10=`ret2 *= (.6 + .5*sin(uv.x*10 + 3.14159265*(q27 + q28)));
comp_11=`ret2= lerp(blur1,ret2,pow(ret2,.15+(mid_att)*.025));
comp_12=`
comp_13=`float2 uv1 = uv-.5;
comp_14=`float3 ret1 = tex2D(sampler_main, uv) ;
comp_15=`
comp_16=`const float2 hor = float2 (.0005,0);
comp_17=`const float2 ver = float2 (0,.0005);
comp_18=`    
comp_19=`float dx = GetPixel (uv+hor*q21).r - GetPixel (uv-hor*q21).b;
comp_20=`float dy = GetPixel (uv+ver*q20).r - GetPixel (uv-ver*q20).b;    
comp_21=`float2 dz = float2 (dx,dy);
comp_22=` 
comp_23=`dz += (tex2D (sampler_noise_hq,uv1/((.5*q26 + .5*q27)/tele+rad)*(q23*.1 + q24*.1)+q31)-.5)*(.1);
comp_24=`
comp_25=`uv1 = abs(uv1 - dz);
comp_26=`float dots = pow(abs(.03333/length(uv1)), .75);
comp_27=`
comp_28=`ret1 = .7*ret1+dots*ret2*(5+sqrt(mid)*1);
comp_29=`
comp_30=`float3 ret3_1 = log(exp2(3.14159265*float3((abs(q20) + abs(q21)), (abs(q21) + abs(q22)), (abs(q22) + abs(q20)))*ret1.gbr));
comp_31=`float3 ret3_2 = log(exp2(3.14159265*float3((abs(q23) + abs(q24)), (abs(q24) + abs(q25)), (abs(q25) + abs(q23)))*GetPixel(frac(-abs( reflect( frac(-uv1), frac(dz) ) ) )).rgb));
comp_32=`float3 ret3_3 = log(exp2(3.14159265*float3((abs(q26) + abs(q27)), (abs(q27) + abs(q28)), (abs(q28) + abs(q26)))*GetPixel( frac(-uv1) ).brg));
comp_33=`
comp_34=`float3 ret3 = lerp(ret3_1, ret3_2, 1.5708 - acos(ret3_3) );
comp_35=`
comp_36=`float3 ret4 = lerp(ret3_1, ret3_2, ret3_3);
comp_37=`
comp_38=`float3 ret5 = lerp(1.5708 - acos(ret3_1), 1.5708 - acos(ret3_2), asin(ret3_3));
comp_39=`
comp_40=`ret3 = abs(lerp((1.5708 - acos(ret4)), (asin(ret3)), 3*q15*(ret5) ));
comp_41=`
comp_42=`uv1 = uv-.5 + .4*lum(GetPixel(uv));
comp_43=`ret = .637*ret3 + exp(-20*(length(frac(lum(uv1)*3-time)-.5)))*q10 ;
comp_44=`//ret = ret5;
comp_45=`}
