MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=4.000
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=6
bAdditiveWaves=0
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=1
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.550
fWaveScale=0.273
fWaveSmoothing=0.630
fWaveParam=1.000
fModWaveAlphaStart=1.600
fModWaveAlphaEnd=2.000
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=0.000
zoom=0.99990
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=0.99990
sy=1.00000
wave_r=0.500
wave_g=0.000
wave_b=0.000
wave_x=0.500
wave_y=0.000
ob_size=0.000
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=1.000
ib_size=0.000
ib_r=0.000
ib_g=0.000
ib_b=0.000
ib_a=0.000
nMotionVectorsX=64.000
nMotionVectorsY=48.000
mv_dx=0.000
mv_dy=0.000
mv_l=0.000
mv_r=1.000
mv_g=1.000
mv_b=1.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.000
wavecode_0_enabled=1
wavecode_0_samples=512
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=0
wavecode_0_scaling=1.00000
wavecode_0_smoothing=0.50000
wavecode_0_r=1.000
wavecode_0_g=1.000
wavecode_0_b=1.000
wavecode_0_a=1.000
wave_0_per_point1=ma=ma+(above(bass,1)*3.1415*.01*bass);
wave_0_per_point2=ma=ma-(above(treb,1)*3.1415*.01*treb);
wave_0_per_point3=
wave_0_per_point4=mx=mx+(.0002*cos(ma));
wave_0_per_point5=my=my+(.0002*sin(ma));
wave_0_per_point6=
wave_0_per_point7=mx=if(above(mx,.9),(.9-mx),mx);
wave_0_per_point8=my=if(above(my,.9),(.9-my),my);
wave_0_per_point9=mx=if(below(mx,.1),(.9+mx),mx);
wave_0_per_point10=my=if(below(my,.1),(.9+my),my);
wave_0_per_point11=
wave_0_per_point12=x=mx*1.25-0.1;
wave_0_per_point13=y=my;
wave_0_per_point14=
wave_0_per_point15=a=(above(bass+mid+treb,.8));
wavecode_1_enabled=1
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=1
wavecode_1_bAdditive=0
wavecode_1_scaling=1.00000
wavecode_1_smoothing=0.50000
wavecode_1_r=0.000
wavecode_1_g=0.000
wavecode_1_b=0.000
wavecode_1_a=1.000
wave_1_per_point1=ma=ma+(above(bass,1)*3.1415*.05*bass);
wave_1_per_point2=ma=ma-(above(mid,1)*3.1415*.05*mid);
wave_1_per_point3=
wave_1_per_point4=mx=mx+(.0001*cos(ma));
wave_1_per_point5=my=my+(.0001*sin(ma));
wave_1_per_point6=
wave_1_per_point7=mx=if(above(mx,.9),(.9-mx),mx);
wave_1_per_point8=my=if(above(my,.9),(.9-my),my);
wave_1_per_point9=mx=if(below(mx,.1),(.9+mx),mx);
wave_1_per_point10=my=if(below(my,.1),(.9+my),my);
wave_1_per_point11=
wave_1_per_point12=x=mx*1.25-0.125;
wave_1_per_point13=y=my;
wave_1_per_point14=
wave_1_per_point15=a=(above(bass+mid+treb,.1));
wavecode_2_enabled=1
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=1
wavecode_2_bAdditive=0
wavecode_2_scaling=1.00000
wavecode_2_smoothing=0.50000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=1.000
wave_2_per_point1=ma=ma+(above(mid,1)*3.1415*.01*mid);
wave_2_per_point2=ma=ma-(above(treb,1)*3.1415*.01*treb);
wave_2_per_point3=
wave_2_per_point4=mx=mx+(.0004*cos(ma));
wave_2_per_point5=my=my+(.0004*sin(ma));
wave_2_per_point6=
wave_2_per_point7=mx=if(above(mx,.9),(.9-mx),mx);
wave_2_per_point8=my=if(above(my,.9),(.9-my),my);
wave_2_per_point9=mx=if(below(mx,.1),(.9+mx),mx);
wave_2_per_point10=my=if(below(my,.1),(.9+my),my);
wave_2_per_point11=
wave_2_per_point12=x=mx*1.25-0.125;
wave_2_per_point13=y=my;
wave_2_per_point14=
wave_2_per_point15=a=(above(bass+mid+treb,.3));
wavecode_3_enabled=1
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=1
wavecode_3_bAdditive=1
wavecode_3_scaling=2.02310
wavecode_3_smoothing=0.00000
wavecode_3_r=0.720
wavecode_3_g=0.000
wavecode_3_b=0.250
wavecode_3_a=1.000
wave_3_init1=t2 = 0;
wave_3_init2=t3 = 0;
wave_3_init3=t4 = 0;
wave_3_init4=cl = 0;
wave_3_per_frame1=vol = bass*8 + mid*5 + treb*3;
wave_3_per_frame2=m = m*0.97 + vol*0.08;
wave_3_per_frame3=monitor = vol;
wave_3_per_frame4=beat = above(vol,res)*above(vol,m)*above(vol,16);
wave_3_per_frame5=diff = (1-beat)*diff + beat*(vol-res);
wave_3_per_frame6=res = beat*(vol + m*0.04) + (1-beat)*(res -  (0.1+diff*0.02)*60/fps);
wave_3_per_frame7=res = max(0,res);
wave_3_per_frame8=
wave_3_per_frame9=//a = beat;
wave_3_per_point1=tt3 = tt3*0.6 + (value1)*1;
wave_3_per_point2=tt2 = tt2*0.7 + tt3*0.2;
wave_3_per_point3=tt1 = tt1*0.8 + tt2*0.1;
wave_3_per_point4=d = d*0.9 + tt1*0.2;
wave_3_per_point5=
wave_3_per_point6=y = 0.5 + d*sample*(1-sample)*2;
wave_3_per_point7=x =  -0.05 + sample*1.1;
shapecode_0_enabled=0
shapecode_0_sides=4
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=1
shapecode_0_num_inst=1
shapecode_0_x=0.500
shapecode_0_y=0.500
shapecode_0_rad=1.79142
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.62832
shapecode_0_tex_zoom=1.00000
shapecode_0_r=1.000
shapecode_0_g=1.000
shapecode_0_b=1.000
shapecode_0_a=0.000
shapecode_0_r2=0.000
shapecode_0_g2=0.000
shapecode_0_b2=0.000
shapecode_0_a2=1.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.000
shapecode_1_enabled=0
shapecode_1_sides=4
shapecode_1_additive=0
shapecode_1_thickOutline=0
shapecode_1_textured=0
shapecode_1_num_inst=1
shapecode_1_x=0.500
shapecode_1_y=0.500
shapecode_1_rad=0.10000
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=1.00000
shapecode_1_r=1.000
shapecode_1_g=0.000
shapecode_1_b=0.000
shapecode_1_a=1.000
shapecode_1_r2=0.000
shapecode_1_g2=1.000
shapecode_1_b2=0.000
shapecode_1_a2=0.000
shapecode_1_border_r=1.000
shapecode_1_border_g=1.000
shapecode_1_border_b=1.000
shapecode_1_border_a=0.100
shapecode_2_enabled=0
shapecode_2_sides=4
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=0
shapecode_2_num_inst=1
shapecode_2_x=0.500
shapecode_2_y=0.500
shapecode_2_rad=0.10000
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=1.00000
shapecode_2_r=1.000
shapecode_2_g=0.000
shapecode_2_b=0.000
shapecode_2_a=1.000
shapecode_2_r2=0.000
shapecode_2_g2=1.000
shapecode_2_b2=0.000
shapecode_2_a2=0.000
shapecode_2_border_r=1.000
shapecode_2_border_g=1.000
shapecode_2_border_b=1.000
shapecode_2_border_a=0.100
shapecode_3_enabled=0
shapecode_3_sides=4
shapecode_3_additive=0
shapecode_3_thickOutline=0
shapecode_3_textured=0
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.10000
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=1.00000
shapecode_3_r=1.000
shapecode_3_g=0.000
shapecode_3_b=0.000
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=1.000
shapecode_3_b2=0.000
shapecode_3_a2=0.000
shapecode_3_border_r=1.000
shapecode_3_border_g=1.000
shapecode_3_border_b=1.000
shapecode_3_border_a=0.100
per_frame_init_1=
per_frame_init_2=//******** INITIALIZATION *********
per_frame_init_3=n = 0; loop (10000, gmegabuf(n)=0; n=n+1; ); 
per_frame_init_4=n = 0; loop (10000,  megabuf(n)=0; n=n+1; ); 
per_frame_init_5=trelx = 0;  trely = 0; trelz = 0;
per_frame_init_6=reg20 = 1; reg21 = 0; reg22 = 0; reg23 = 0; reg24 = 1; reg25 = 0; reg26 = 0; reg27 = 0; reg28 = 1;
per_frame_init_7=
per_frame_init_8=//Find random starting point
per_frame_init_9=while (exec2(
per_frame_init_10=  ran1 = rand(800)/100;  ran2 = rand(800)/100;  ran3 = rand(800)/100;
per_frame_init_11=  PosX = rand(10)-5;   PosY = rand(10)-5;   PosZ = rand(10)-5; 
per_frame_init_12=  c1 = cos(ran1); c2 = cos(ran2); c3 = cos(ran3); 
per_frame_init_13=  s1 = sin(ran1); s2 = sin(ran2); s3 = sin(ran3);
per_frame_init_14=
per_frame_init_15=  reg20 = c2*c1; reg21 = c2*s1; reg22 = -s2;
per_frame_init_16=  reg23 = s3*s2*c1 - c3*s1; reg24 = s3*s2*s1 + c3*c1; reg25 = s3*c2;
per_frame_init_17=  reg26 = c3*s2*c1 + s3*s1; reg27 = c3*s2*s1 - s3*c1; reg28 = c3*c2;
per_frame_init_18=
per_frame_init_19=  //***********BOT*************
per_frame_init_20=  //Coord. Trans. must exactly match def in warp S. !!!!
per_frame_init_21=  dist = 0.001;
per_frame_init_22=  while (exec2(
per_frame_init_23=    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;
per_frame_init_24=    uvx += PosX; uvy += PosY; uvz += PosZ;
per_frame_init_25=    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);
per_frame_init_26=    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);
per_frame_init_27=    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);
per_frame_init_28=    uvx0 = uvx; uvy0 = uvy; uvz0 = uvz;
per_frame_init_29=    loop (7+1,
per_frame_init_30=      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));
per_frame_init_31=      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));
per_frame_init_32=      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));
per_frame_init_33=      slen = uvx*uvx + uvy*uvy + uvz*uvz;
per_frame_init_34=      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0; 
per_frame_init_35=      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0; 
per_frame_init_36=      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0; 
per_frame_init_37=    );
per_frame_init_38=    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);
per_frame_init_39=    dist *= 1.05;
per_frame_init_40=  ,(dist < 0.6)*(len > 30)));
per_frame_init_41=,(dist < .2))); //end while
per_frame_init_42=
per_frame_init_43=
per_frame_init_44=//---------- some global vars, do not change -------------
per_frame_init_45=q7 = .1; //MyZoom
per_frame_init_46=q30 = 1; //logarithmic Z-Dist storage; unused
per_frame_init_47=q3 = 1.0/q30; //store inverse so shaders don't need to do inverse for division
per_frame_init_48=q31 = 128;
per_frame_init_49=q29 = 1.0/q31;//store the inverse of q31 so the shaders don't need to do inverse for division
per_frame_init_50=start = 1; travel = 0; RotZ = 0; look = 0; slow = 0;
per_frame_init_51=cran0 = rand(1);
per_frame_init_52=cran1 = rand(1);
per_frame_1=wave_a = 0;
per_frame_2=fps_ = .9 * fps_ + .1*if(fps<=25,fps,25+.5*(fps-25)); 
per_frame_3=dec_s = 1-.03*30/fps_;
per_frame_4=
per_frame_5=beat = (time >  t0+2);
per_frame_6=t0 = if(beat, time, t0);
per_frame_7=
per_frame_8=speed = min(0.2,dist_-.0) * (1+avg) *(1-slow*.7);
per_frame_9=ds = ds * dec_s + (1-dec_s)*speed*.2/fps_ ; 
per_frame_10=
per_frame_11=RotZ = if (RotZ==0,beat*(rand(100)<10)*(rand(10)/10-.5),
per_frame_12=                   bnot(beat*(rand(100)<30))*RotZ);
per_frame_13=
per_frame_14=slow = if (bnot(slow), beat*(rand(1000*avg)<6), bnot(beat*(rand(100)<50)));
per_frame_15=look = if (bnot(look), beat*(rand(1000*speed)<5), bnot(beat));
per_frame_16=
per_frame_17=//Lamp View
per_frame_18=lx = if (beat,rand(150)/200+.15,lx);
per_frame_19=ly = if (beat,rand(150)/200+.15,ly);
per_frame_20=lampx = lampx * dec_s + (1-dec_s)*if (look,lx,0.5);
per_frame_21=lampy = lampy * dec_s + (1-dec_s)*if (look,ly,0.5);
per_frame_22=q1 = lampx; q2 = lampy;
per_frame_23=
per_frame_24=//Position 
per_frame_25=DirX= reg26; DirY= reg27; DirZ = reg28;
per_frame_26=PosX = PosX + ds*DirX ; PosY = PosY + ds*DirY; PosZ = PosZ + ds*DirZ; 
per_frame_27=q4 = PosX; q5 = PosY; q6 = PosZ;
per_frame_28=
per_frame_29=angchg = (.15-dist_)*(dist_ < .15)/2;
per_frame_30=travel = if (angchg > 0,0,travel+ds);
per_frame_31=v1 = v1 * dec_s + (1-dec_s)* RotZ * .05/fps_;
per_frame_32=v2 = v2 *dec_s + (1-dec_s)*angchg *xslope/fps_;
per_frame_33=v3 = v3 *dec_s + (1-dec_s)*(angchg *yslope/fps_ + v1/2 * (travel>1));
per_frame_34=
per_frame_35=//push old RotMat
per_frame_36=reg30 =reg20; reg31 =reg21; reg32 =reg22; 
per_frame_37=reg33 =reg23; reg34 =reg24; reg35 =reg25; 
per_frame_38=reg36 =reg26; reg37 =reg27; reg38 =reg28; 
per_frame_39=
per_frame_40=n = 0; avg = 0;
per_frame_41=loop (5,
per_frame_42=  n = n+1;
per_frame_43=  //new Rot. Mat for infinitesimal angles
per_frame_44=  ran1 = rand(100)/100;
per_frame_45=  ran2 = rand(100)/200-.25;
per_frame_46=  tx = cos(n*1.57+ran2) * (n <= 4)*ran1; ty = sin(n*1.57+ran2) * (n <= 4)*ran1;
per_frame_47=  c1 = cos(v1); c2 = cos(v2+ty); c3 = cos(v3+tx); 
per_frame_48=  s1 = sin(v1); s2 = sin(v2+ty); s3 = sin(v3+tx);
per_frame_49=  reg10 = c2*c1; reg11 = c2*s1; reg12 = -s2;
per_frame_50=  reg13 = s3*s2*c1 - c3*s1; reg14 = s3*s2*s1 + c3*c1; reg15 = s3*c2;
per_frame_51=  reg16 = c3*s2*c1 + s3*s1; reg17 = c3*s2*s1 - s3*c1; reg18 = c3*c2;
per_frame_52=
per_frame_53=  //pop old RotMat
per_frame_54=  reg20 =reg30; reg21 =reg31; reg22 =reg32; 
per_frame_55=  reg23 =reg33; reg24 =reg34; reg25 =reg35; 
per_frame_56=  reg26 =reg36; reg27 =reg37; reg28 =reg38; 
per_frame_57=
per_frame_58=  //Multiply new RotMat by old one
per_frame_59=  q20 = reg10*reg20 + reg11*reg23 + reg12*reg26;
per_frame_60=  q21 = reg10*reg21 + reg11*reg24 + reg12*reg27;
per_frame_61=  q22 = reg10*reg22 + reg11*reg25 + reg12*reg28;
per_frame_62=  q23 = reg13*reg20 + reg14*reg23 + reg15*reg26;
per_frame_63=  q24 = reg13*reg21 + reg14*reg24 + reg15*reg27;
per_frame_64=  q25 = reg13*reg22 + reg14*reg25 + reg15*reg28;
per_frame_65=  q26 = reg16*reg20 + reg17*reg23 + reg18*reg26;
per_frame_66=  q27 = reg16*reg21 + reg17*reg24 + reg18*reg27;
per_frame_67=  q28 = reg16*reg22 + reg17*reg25 + reg18*reg28;
per_frame_68=
per_frame_69=  reg20 =q20; reg21 =q21; reg22 =q22;
per_frame_70=  reg23 =q23; reg24 =q24; reg25 =q25;
per_frame_71=  reg26 =q26; reg27 =q27; reg28 =q28;
per_frame_72=
per_frame_73=  //***********BOT*************
per_frame_74=  //Coord. Trans. must exactly match def in warp S. !!!!
per_frame_75=  dist = 0.002;
per_frame_76=  while (exec2(
per_frame_77=    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;
per_frame_78=    uvx += PosX; uvy += PosY; uvz += PosZ;
per_frame_79=    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);
per_frame_80=    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);
per_frame_81=    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);
per_frame_82=    uvx0 = uvx; uvy0 = uvy; uvz0 = uvz;
per_frame_83=    loop (7+1,
per_frame_84=      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));
per_frame_85=      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));
per_frame_86=      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));
per_frame_87=      slen = uvx*uvx + uvy*uvy + uvz*uvz;
per_frame_88=      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0; 
per_frame_89=      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0; 
per_frame_90=      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0; 
per_frame_91=    );
per_frame_92=    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);
per_frame_93=    dist *= 1.1;
per_frame_94=  ,(dist < 0.6)*(len > 30)));
per_frame_95=  megabuf(n) = megabuf(n)*dec_s + (1-dec_s)*dist; //stores the 4 trial points
per_frame_96=  avg = avg+abs(megabuf(n)/5);
per_frame_97=); //end loop 5
per_frame_98=
per_frame_99=n = 0; avg = 0; loop (5, n=n+1; avg = avg+abs(megabuf(n)/5));
per_frame_100=
per_frame_101=xslope = 1/avg*(megabuf(1)-megabuf(3));
per_frame_102=yslope =  1/avg*(megabuf(4)-megabuf(2));
per_frame_103=monitor = avg;
per_frame_104=dist_ = dist_*dec_s + (1-dec_s)*dist;
per_frame_105=
per_frame_106=//sustain
per_frame_107=q13 = 1-ds; //warp zoom uv 
per_frame_108=q14 = 4*abs(ds) + 6*(abs(v1) + 2*abs(v2) + 2*abs(v3)) + 1.0/255 + start*.1; 
per_frame_109=q18 = cran1; //brightness balance back/front
per_frame_110=q19 = .5 + .5*sin(time*.02+cran0*6); //brightness backgd
per_frame_111=start = start * .9;
per_frame_112=
per_frame_113=bb = bb*0.99 + bass*0.02;
per_frame_114=mm = mm*0.99 + mid*0.02;
per_frame_115=tt = tt*0.99 + treb*0.02;
per_frame_116=
per_frame_117=mx = max(max(bb,mm),tt);
per_frame_118=mn = min(min(bb,mm),tt);
per_frame_119=
per_frame_120=h1 = (bb-mn)/(mx-mn);
per_frame_121=h2 = (mm-mn)/(mx-mn);
per_frame_122=h3 = (tt-mn)/(mx-mn);
per_frame_123=
per_frame_124=v = 0.1333/fps;
per_frame_125=bm = bm + (h1-h2)*v;
per_frame_126=mt = mt + (h2-h3)*v;
per_frame_127=bt = bt + (h1-h3)*v;
per_frame_128=
per_frame_129=w = bm*2;
per_frame_130=q3 = sin(w);
per_frame_131=q9 = cos(w);
per_frame_132=
per_frame_133=
per_frame_134=q17 = bm;
per_frame_135=q18 = mt;
per_frame_136=q19 = bt;
per_pixel_1= warp = 0; dx = .00; zoom = 1; dy = 0;
warp_1=`float dist, struc; float2 uv0, uv1; float3 box;
warp_2=`static const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);
warp_3=`static const float3 CamPos = float3(q4,q5,q6);
warp_4=`static const float myzoom = q7,  res = q31, resInv = q29, res2 = 64, res2Inv = 1.0/64.0, limit = 20;
warp_5=`static const float sustain = .98 - q14*2, change = q14;
warp_6=`
warp_7=`float2 fstep2(float2 xy) 
warp_8=`{
warp_9=`   //Eo.S. replaced 1.0/res with resInv so shader doesn't have to do division
warp_10=`   return resInv*round(res*xy);
warp_11=`   
warp_12=`}
warp_13=`
warp_14=`float GetDist(float2 uvi) 
warp_15=`{
warp_16=`   float2 tmp; 
warp_17=`   tmp = fstep2( tex2D(sampler_pw_main, uvi).gb ); 
warp_18=`   //return pow( 1.0-( res2Inv*(tmp.x-0.505) + tmp.y ), q3 );//Eo.S> replaced 1/q30 with q3
warp_19=`   return 1.0-( res2Inv*(tmp.x-0.505) + tmp.y );//Eo.S> q3 is always 1, so remove pow()
warp_20=`}
warp_21=`
warp_22=`float2 PutDist(float x) {
warp_23=`  float tmp; x = pow(x,q30);   
warp_24=`  tmp = fstep2(1-x);
warp_25=`  return (float2(res2*((1-x)-tmp)+.495,tmp));
warp_26=`}
warp_27=`
warp_28=`float MinDist (float2 uvi) 
warp_29=`{
warp_30=`   float tmp; float4 nb; float4 nb2; float2 pix;
warp_31=`   
warp_32=`   pix = texsize.zw*(1.0+length(uvi-0.5)*3.0);
warp_33=`   tmp = GetDist(uvi);
warp_34=`   nb.x = GetDist(uvi+pix*float2(-1,-1));  
warp_35=`   nb.y = GetDist(uvi+pix*float2(1,-1));
warp_36=`   nb.z = GetDist(uvi+pix*float2(1,1));   
warp_37=`   nb.w = GetDist(uvi+pix*float2(-1,1));
warp_38=`   //tmp = min(tmp,min(min(min(nb.x, nb.y),nb.z),nb.w)) ;
warp_39=`   nb2.x = GetDist(uvi+pix*float2(0,-1));  
warp_40=`   nb2.y = GetDist(uvi+pix*float2(1,0));
warp_41=`   nb2.z = GetDist(uvi+pix*float2(0,1));   
warp_42=`   nb2.w = GetDist(uvi+pix*float2(-1,0));
warp_43=`   //tmp = min(tmp,min(min(min(nb.x, nb.y),nb.z),nb.w)) ;
warp_44=`   
warp_45=`   //Eo.S. more efficient usage of min to get min value of all 8 GetDist() calls, removes 11ALU
warp_46=`   nb = min( nb, nb2 );
warp_47=`   nb.xy = min( nb.xy, nb.zw );
warp_48=`   tmp = min( nb.x, nb.y );
warp_49=`   return tmp;
warp_50=`}
warp_51=`
warp_52=`float3 Get1 (float2 uvi) 
warp_53=`{
warp_54=`   float3 tmp; float2 pix;
warp_55=`   tmp = GetBlur1(uvi)*3;
warp_56=`   return lerp (GetPixel(uvi),tmp/3,change*4);
warp_57=`}
warp_58=`
warp_59=`float3 mbox (float3 uvi) 
warp_60=`{
warp_61=`   float3 zz, zz0; float tmp, li;
warp_62=`   zz = uvi; zz0 = zz;
warp_63=`   for (int n = 0; n <= 7; n++) 
warp_64=`   {
warp_65=`      zz = 2.0*clamp(zz,-1,1)-zz;  tmp = dot(zz,zz);
warp_66=`      if (tmp <= 0.25) {zz *= 4;} else if (tmp <= 1) {zz /= pow(tmp,1);}
warp_67=`      zz = 2.6*zz + zz0;
warp_68=`   }
warp_69=`   return zz;
warp_70=`}
warp_71=`
warp_72=`shader_body {
warp_73=`
warp_74=`   uv = (uv-.5)*q13 + .5;
warp_75=`   uv1 = (uv-.5)*aspect.xy;
warp_76=`   float3 noise = frac(8*tex2D(sampler_noise_lq,uv+rand_frame.yz)); 
warp_77=`
warp_78=`   dist = noise.r;
warp_79=`   if (noise.g > 0.2) 
warp_80=`   {
warp_81=`       //dist = MinDist( (noise.zy-0.5) * 0.003 +uv ) +  0.005 * (noise.x-0.4) * abs(noise.y-0.5);
warp_82=`       float3 noiseBiased = noise - float3( 0.4, 0.5, 0.5 );//Eo.S. combine the subtraction on noise to a single float3 to ensure compiler does the subtraction in a single ALU
warp_83=`       dist = MinDist( (noiseBiased.zy) * 0.003 +uv ) +  0.005 * (noiseBiased.x) * abs(noiseBiased.y);
warp_84=`   }
warp_85=`   dist = min(dist,GetDist(uv));
warp_86=`
warp_87=`   float3 uv2 = mul(float3(uv1*dist,dist-.02)/myzoom,RotMat)+CamPos;
warp_88=`   uv2 = (frac(uv2/8.0+.5)-.5)*8.0;
warp_89=`   box = mbox (uv2);
warp_90=`   float len = (length(box));
warp_91=`   struc = length(box.zy) /limit;
warp_92=`
warp_93=`   if ((dist <= GetDist(uv)) && (len < limit) && (dist > 0.005))
warp_94=`   {
warp_95=`      ret.r = (1-sustain)*struc+sustain*(Get1(uv).r); ret.gb=  PutDist(dist); 
warp_96=`   } 
warp_97=`   else 
warp_98=`   {
warp_99=`      ret = tex2D(sampler_pc_main,uv_orig) * float3(sustain, 1.0, 1.0)-float3(0.0, 0.0, change);
warp_100=`   } 
warp_101=`   //ret = noise;
warp_102=`}
comp_1=`#define sat saturate
comp_2=`static const float2 pix = texsize.zw;
comp_3=`float glow, tmp, lamp, dist, bdist, b2dist, dist_c;
comp_4=`float2 dz, uv1, uv3;
comp_5=`static const float3 CamPos = float3(q4,q5,q6);
comp_6=`static const float myzoom = q7;
comp_7=`static const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);
comp_8=`static const float3 col_struc =  float3(1,.7,.3) + .2*(rand_preset.xyz-.5);
comp_9=`static float2 center = float2 (q1,q2);
comp_10=`
comp_11=`float3 GetBlurX (float2 uvi, float x) {return lerp (GetPixel(uvi), GetBlur1(uvi), x);}
comp_12=`float GetDist(float2 uvi)   {return 1-GetPixel(uvi).b;}
comp_13=`float GetDistB(float2 uvi)  {return 1-GetBlur1(uvi).b;}
comp_14=`float GetDistB2(float2 uvi) {return 1-GetBlur2(uvi).b;}
comp_15=`
comp_16=`float MinDistB (float2 uvi) {float tmp; float4 nb; //##nicht ideal
comp_17=`  tmp = GetDist(uvi);
comp_18=`  tmp = min(tmp,GetDistB2(uvi)*1) ;
comp_19=`  return tmp;}
comp_20=`
comp_21=`
comp_22=`// some complex number arithmetics functions by flexi
comp_23=`
comp_24=`float2 complex_div(float2 numerator, float2 denominator){
comp_25=`   return float2( numerator.x*denominator.x + numerator.y*denominator.y,
comp_26=`                  numerator.y*denominator.x - numerator.x*denominator.y)/
comp_27=`          (denominator.x*denominator.x + denominator.y*denominator.y);
comp_28=`}
comp_29=`
comp_30=`float2 uv_polar(float2 domain, float2 center){
comp_31=`   float2 c = domain - center;
comp_32=`   float rad_hq = length(c);
comp_33=`   float ang_hq = atan2(c.x,c.y);
comp_34=`   return float2(ang_hq*M_INV_PI_2, rad_hq);
comp_35=`}
comp_36=`
comp_37=`float2 uv_polar_logarithmic(float2 domain, float2 center, int fins, float log_factor, float2 coord){
comp_38=`   float2 polar = uv_polar(domain, center);
comp_39=`   return float2(polar.x*fins+coord.x, log_factor*log(polar.y) + coord.y);
comp_40=`}
comp_41=`
comp_42=`float2 uv_moebius_transformation(float2 domain, float2 zeroPoint, float2 infinityPoint,float zoom){
comp_43=`   return complex_div((domain - zeroPoint)*zoom, domain - infinityPoint)+0.5;
comp_44=`}
comp_45=`
comp_46=`float2 uv_bipolar(float2 domain, float2 northPole, float2 southPole, int fins, float log_factor, float2 coord){
comp_47=`   float2 help_uv = uv_moebius_transformation(domain, northPole, southPole, 1);
comp_48=`   return uv_polar_logarithmic(help_uv,0.5,fins,log_factor,coord);
comp_49=`}
comp_50=`
comp_51=`
comp_52=`float2 uv_rotate( float2 domain, float2 center, float sinw, float cosw, float scale){
comp_53=`   float2 uv_r = (domain-center);
comp_54=`   return center + float2( cosw*uv_r.x - sinw*uv_r.y, sinw*uv_r.x + cosw*uv_r.y)*scale;
comp_55=`}
comp_56=`
comp_57=`shader_body
comp_58=`{
comp_59=`float2 rotate_uv = 0.5-uv_rotate(0 + (uv-0.5)*aspect.xy, 0, q3, q9, 2);
comp_60=`time *= 0.4;
comp_61=`
comp_62=`float2 pole1 =float2(0,0.5);
comp_63=`float2 pole2 =float2(1,0.5);
comp_64=`
comp_65=`float2 uvo = uv;
comp_66=`
comp_67=`float2 bipolar_uv = uv_bipolar(rotate_uv,float2(0,0.5),float2(1,0.5), 2, 0.5, float2(q18,q19));
comp_68=`uv = 0.5 + (0.5 - abs( frac( bipolar_uv * 0.5 ) * 2.0 - 1.0 ));
comp_69=`
comp_70=`uv1 = (uv-center)*aspect.xy;
comp_71=`
comp_72=`dist = MinDistB(uv);
comp_73=`bdist = lerp(dist,GetDistB(uv),.2);
comp_74=`dist_c = clamp(GetDistB2 (center),.1,.4); //center distance
comp_75=`
comp_76=`float3 uv2 = mul(float3((uv-.5)*MinDistB(uv),MinDistB(uv))/myzoom,RotMat)+CamPos;
comp_77=`glow = pow (sat(tex2D (sampler_noise_hq,.02*uv2).r-.6)*2,2);
comp_78=`//uv += .003*glow*(tex2D (sampler_noise_mq,uv*2+float2(0,time/4).xy-.5));
comp_79=`
comp_80=`float focus = sat(abs(GetDistB2(uv)-dist_c)*1+.2);
comp_81=`float struc = GetBlurX(uv,focus).r;
comp_82=`
comp_83=`glow = sat(1-exp(-(GetBlur1(uv).r))-.2);
comp_84=`q18 = 1;
comp_85=`ret = pow(struc,1) * (.2+(1-focus) *lerp(dist,1-dist,q18)) * (1+.5*sin(uv2));
comp_86=`ret = lerp(ret, float3(0,1,glow*3), glow);
comp_87=`
comp_88=`//distant light
comp_89=`ret += pow(1-GetBlurX(uv,.8).b,3)*(.5+.5*slow_roam_cos) *q19;
comp_90=`
comp_91=`//Lamp
comp_92=`uv3 = uv1; 
comp_93=`lamp = saturate(1-4*length(uv3))*(struc)*saturate(1-2*bdist)*1.8;
comp_94=`//ret += (1-lum(ret))*lamp;
comp_95=`ret = 1-exp((-2)*ret);
comp_96=`//ret = GetPixel(uv).r;
comp_97=`}
comp_98=`
comp_99=`//-------------------------------------------
comp_100=`//Written by martin
comp_101=`
